# BUILD files (and bzl files imported by them) are in Starlark language,
# which is a dialect of Python.
# Targets are function calls, and their params are named arguments to
# the function.

# This function calls the genrule() function, which is the same thing
# a BUILD file does when it defines a genrule() target.
# So a BUILD file calling this function (which will look like any
# other rule), will be creating this genrule target.
def probe_sandbox(name, srcs = [], visibility=None):
    ## native module has the built-in rules (from within .bzl files only)
    ## stuff you usually use unqualified without load() statements in
    ## BUILD files
    native.genrule(
        name = name,
        outs = [name + "_out.txt"],
        visibility = visibility,
        srcs = srcs,
        cmd = "pwd > $@ && echo >> $@ && ls -R -1 >> $@",
    )

# This demonstrates creating and chaining multiple targets
# based on some common config.
# It also demonstrates using python-like code.
# Note that the target name gets assigned to the last target,
# which will trigger the first target if needed.
def probe_sandbox_for_file(name, srcs = [], visibility = None):
    # You can do Python-like stuff like this.
    base_out_name = name + "_out.txt"
    intermediate_rule_name = name + "_ls"
    # This shows as DEBUG line in console and should be removed in production (by you).
    # It prints at macro expansion (so even if the target is not built).
    print(base_out_name)
    if not srcs:
        # Unconditional build failure that cannot be caught.
        fail("No srces!")

    # Since this is the same as the above macro, we could have
    # also just called that one here.
    native.genrule(
        name = intermediate_rule_name,
        outs = [base_out_name],
        srcs = srcs,
        cmd = "pwd > $@ && echo >> $@ && ls -R -1 >> $@",
        # by convention, we don't set the visibliity of an
        # intermediate rule like this
    )

    # This is what queries and run commands will find, so you'd
    # better set up the dependency in it.
    native.genrule(
        name = name,
        srcs = [":" + intermediate_rule_name],
        outs = [base_out_name.replace(".txt", "_2.txt")],
        # You can't use f"" in Starlark.  You have to use either this or the % style.
        cmd = "grep " + srcs[0] + " $(location :" + intermediate_rule_name + ") > $@",
        visibility = visibility,
    )

# Label() makes it relative to the repo the bzl file is in instead of relative
# to the workspace calling the bzl file (the default).
# In this case, those are the same, but if this was an installed ruleset
# from the web, for instance, it would make a difference.
def probe_sandbox_with_hardcoded(name):
    native.genrule(
        name=name,
        srcs = [Label("//:file.txt"), "//:file2.txt"],
        outs = [name + "_out.txt"],
        cmd = "ls > $@",
    )

# MACRO EXPANSION
# 'bazel query --output=build //path/to:target'
# will print the real rule with that name (eg. inside a macro).

# 'bazel query --output=build //path/to:all'
# will print the whole build file with macros expanded.

# CONVENTIONS
# 1. All macros should have a name argument and visibility = None.
# 2. All macros should have docstrings.
# 3. Rules generated by a macro should use the name arg as a prefix.
# 4. Optional arguments should default to None instead of the natural default values.
#    This allows you to pass it to other rules and have it know the user didn't specify.
