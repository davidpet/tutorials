{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww28600\viewh15100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 This document defaults to assuming Java because that\'92s the main use case.  Exceptions for other languages will be noted as they are discovered.\
\
Perspectives\
	Basically arrangement of panels within the Eclipse workbench (Eclipse application)\
	Window -> Perspective -> Open Perspective\
	\
	Java				ordinary one for coding in Java\
	Debug				for debugging (sometimes activated automatically when you start debugging)\
\
Panels\
	To find a panel that\'92s missing, Window -> Show View -> (if it\'92s not in the list click Other)\
\
Workbench\
	The main application window\
	From the Welcome screen, you get to it with the orange play button\
\
Workspaces\
	Instead of opening standalone solutions like in Visual Studio, you have a workspace which points to projects.  Generally the workspace is your own while projects are checked into version control.\
	You can have multiple workspaces that you switch between with File -> Switch Workspace (MRU order)\
	\
	.metadata			stores metadata for the workspace (settings, project refs, etc.)\
	Projects			can go directly under workspace or somewhere else and point to from workspace\
					if manually build workspace have to do an Import of the project(s), even if they are stored under your workspace folder\
\
	To add projects, do File -> Import (doesn\'92t have to be copy, can reference too)\
	If you want to build a workspace for existing projects (even projects physically located under your new workspace), import them as above\
\
Projects\
	Projects generally go in their own folder (default parent will be workspace when you create)\
	\
	.project			The project file itself\
	.classpath			Stores other settings for the project such as paths to jars and libs that the project references\
	src				Folder with the source code for the project\
	bin				Output binaries (class = .class file)\
\
Project Properties\
	accessed via right-click in Package Explorer\
	\
	Dependencies		configured via Java Build Path\
					can set JARs, other projects, JRE/JDK, etc. that the project depends on\
	JRE/JDK			After installing a JRE or JDK on your system (you can have multiple), it might not automatically be available in Eclipse\
					You can manually add them by path in Preferences -> Java -> Installed JREs\
					It is better to refer to a JDK instead of JRE so you can see java docs and param names\
\
	Subfolders			You can add subfolders to your project and they will be automatically searched for files (eg. files that can be used in dialogues such as .jar files)\
\
Launch Configuration\
	The first time you run or export, you might have to create a launch configuration (Run As -> Java might fix that\'85I haven\'92t tried it yet)\
	The steps to create a launch configuration are as follows:\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}Go to Project -> Properties\
{\listtext	\uc0\u8259 	}Select Run/Debug Settings\
{\listtext	\uc0\u8259 	}Select New -> Java Application\
{\listtext	\uc0\u8259 	}Set a clear name in the Main tab (eg. MyApp - Launch)\
{\listtext	\uc0\u8259 	}Set the project and main class\
{\listtext	\uc0\u8259 	}Hit OK twice\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Version Control\
	You can\'92t check in a whole workspace because user-specific data is intermingled very heavily\
	everything under the project\'92s folder can be checked in\
	launch configurations for projects can be checked in by copying them to a certain place in the project or by checking in from the workspace: .metadata/.plugins/org.eclipse.debug.core/.launches\
	to check in project references in your workspace: .metadata/.plugins/org.eclipse.core.resources/.projects/projectname/org.eclipse.jdt.core/state.dat [NOTE: this is modified every day so it may actually be a bad idea]\
\
	It might be easier to put stuff in version control properly if you use something like Maven to auto-generate these artifacts\
\
Package Explorer\
	like Solution Explorer in Visual Studio\
	To make a file runnable as the starting point of the Java application, right-click the file and click Run As -> Java Application (not sure if this creates a launch configuration or not, but it persists)\
	\
Refactoring\
	Imports			You can code against objects that you haven\'92t imported and then either use the red x to fix each individually or do Editor->Source->Organize Imports\
\
Building\
	By default, your project will keep building as you change it, and errors/warnings will show up in the Problems panel (after you save)\
	Errors and warnings also show up in the source code with icons you can click to see the issue and suggestions to fix\
	There is a build button, but it is greyed out by default because the project keeps building on its own\
	The output of building is a .class file for each class (including nested) [loadable by JVM]\
	See \'91Exporting\'92 for how to create an independent JAR or EXE instead\
\
Exporting\
	File->Export to make a JAR file or EXE (options for whether to include dependencies or not, etc.)\
	JAR = archive (which can be runnable as if an exe or be a class library for another Java application)\
	To make the build/export more automatic, you need something like ANT or Maven\
	NOTE: the first time might require creating a Launch Configuration (see that section)\
\
Running/Debugging\
	Being able to run might require creating a Launch Configuration the first time (see that section)\
	\
	Run (without debugging)					Green play button (Ctrl-F11)\
	Debug								Bug button (F11)\
	\
	Setting/Clearing Breakpoints				Double-click (blue circle shows up)\
	Conditional, etc.						Right-click the breakpoint and select Breakpoint Properties\
\
	Step Over							F6\
	Step Into							F5\
	Step Into Selection						Ctrl-F5\
	Step Out							F7\
	Continue							F8\
\
Visual Studio Equivalents\
	Go to Declaration						Available here too but you have to highlight the text first before right-clicking\
	Find in Files							Ctrl-Alt-G when have a name highlighted (not pure text search though, looking for the symbol)\
	\
\
	}