{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red46\green13\blue110;\red109\green109\blue109;\red92\green38\blue153;
\red50\green91\blue97;}
\margl1440\margr1440\vieww28600\viewh14980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 XCODE\
	playground: type of project that lets you learn & experiment (tutorial text with inline code that is executed and shown in right panel)((code can be edited to try things out))((the new value will be remembered next time you load))((executed soon after you make the change))[can\'92t edit tutorial text same way as code text]\
	option-click (not double-tap) is equivalent of hovering (see type info etc.)\
	error messages often offer to fix it (eg. could type in the params without names and let the error fix it for you)\
	be careful of double-clicking folder when selecting output\
	select parent folder when selecting where to put project (named folder will automatically be created)\
	Toolbar at top, Navigator -> Editor -> Utility areas\
	project properties are shown in Editor area when you select the root node\
	can enable/disable the panes in the top right (blue = enabled), select between view types next to that (eg. Assistant Editor vs. Standard Editor)\
\
	Simulator: in Toolbar, select device by name of project, command-R builds and pops up window, quit it just like any other app (separate from Xcode)\
		*use cmd-K to toggle iOS keyboard on/off (can enter with normal keyboard too)\
		*usecmd-left or right arrows to rotate 90 degrees (portrait/landscape/upside down)\
		**camera roll comes populated with some sample images but you can add more by dragging and dropping images to the simulator during execution [will persist across sessions]\
		***can leave running and keep running things on it (eg. tests)\
		\
	Status: top (in Toolbar)\
\
	Utility Area:\
		Object Library lower right corner (hover over icons) [use filter field if no part of name]\
		Inspectors like Attributes Inspector at top (tooltips to see what fields mean)\
			*double-clicking object lets you set the text with auto resizing\
			*Size Inspector for sizes, Attribute Inspector for properties, Identity Inspector for things like what class the object is\
			*Connections Inspector to handle connections like outlets and actions (also dots in source code that show where it is connected to UI)\
	Editor Area:\
		Outline View button in lower left (to see hierarchy of objects in the storyboard)\
		Stack button to stack some shift-clicked (selected) stuff automatically (edit the attributes of the stack view object itself to change)\
			*to add constraints to stack view (eg. spacing on 4 sides, aspect ratio, size, etc.), use the \'93Pin\'94 button near the \'93Stack\'94 button and select directions in red, set spacing, etc. [can set placeholder size and then constraint aspect ratio]\
			*constraints are relative to nearby controls and you can keep setting more for the same controls\
			*always select Items of New Constraints for Update Frames\
			**can drag new items into the stack view and add new constraints to it\
			NOTE: if you don\'92t pick Update Item to New Constraints or whatever it won\'92t happen\
			stack view can be viewed in Attributes Inspector to set things like Alignment (center = horizontally center aligned)\
		Resolve Auto Layout Issues button next to Pins button to help debug layout issues\
\
	Assistant Editor Mode:\
		change Automatic to Preview -> and a storyboard to see a preview of what your UI is looking like (do this often - things that look ok in normal edit may not look right here)\
		if alignment of a text field or label field is screwed up here but not at runtime, you may need to set intrinsic size to placeholder and set dimensions in Size Inspector (sets design time size so you can design - does not affect runtime)\
		*doesn\'92t necessarily look the same as real, just shows you the layout (eg. labels have underline that they don\'92t have in the design views)\
		*for storyboard, assistant editor can be selected to show view controller code on the right\
\
	File -> New File (or command-N): you can select a class to subclass, where to put it, etc. (use Swift File and manually fill in for normal class, Cocoa Touch Class for things like view controllers, etc.)\
		*can add the new prefix and then select the subclass to have it automatically give you the appropriate name (which you can decide on after)\
		**dropdown list for subclass is scrollable even though doesn\'92t look like it\
\
	Edit -> Emoji & Symbols (universal Mac thing)\
	Ctrl-I to fix indent\
\
	Editor -> Embed In: lets you embed selected object into a new object between the object and its parent in the hierarchy (eg. Navigation stuff)\
\
	Debug area toggle = in upper right corner (eg. to dismiss console)\
	can jump to sections, functions, etc. in bar along top\
\
	icons on the left like folder to view project hierarchy and diamond to see tests\
\
	Editor -> Canvas -> Show Bounds Rectangles = show blue boundaries around objects on storyboard to help layout\
\
	***data about the reason for the exception is there \'97 you just have to read through ugly assembly-looking crap\
\
	Renaming a controller: click on the file in navigator area and hit return, then change name.  Manually rename the class in code and in the storyboard (Identity Panel of view).  May need to update some stuff in Connections Inspector too.\
\
	TODO: learn debugging, breakpoints, refactoring, searching, etc., Simulator selecting OS/device combinations, upcoming OSes, testing multiple apps, etc.  how to do things like bring up apps running and notification center in simulator\
\
COCOA TOUCH\
	import UIKit	//iOS UI stuff\
	\
	Assets.xcassets = assets like icons and images for your application\
		*use the + to create a new image set (or folder of image sets) drag an image into the application to copy it into the assets (gets included in the application folder)\
		*double-click image set name to change it\
		*drag to the 2x square for iPhone 6 size (allows you to use multiple sized images to represent the same image)\
	@UIApplicationMain	//defines application entry point and sets up messaging loops\
	AppDelegate class handles application-level logic and routing\
	ViewController class handles code for one scene in ui (UIViewController class) [it is the Controller in MVC]\
		*methods like viewWillAppear, viewDidAppear, viewWillDissappear, viewDidDissappear to handle lifecycle events\
		*viewDidLoad is called after storyboard objects created before view appears, but not guaranteed to only be called once\
	Storyboard file defines the UI controls (nib file with .storyboard extension)\
		*consists of scenes (arrow points to the initial scene)\
		*Interface Builder is generic (your canvas doesn\'92t show same dimensions as device)\
		\
	UIView = base for views (controls are special subclass of view that implements actions)\
		*can disable user interaction in Attributes Inspector to make it display only (eg. rating control in table instead of in edit page)\
	TextField (UITextField) = 1 line text field user can enter into (placeholder text = light grey default text), Return Key and KeyboardType for defining how user will enter the text, Auto Enable Return Key to only allow return key when there is text\
		UITextFieldDelegate -> textFieldShouldReturn lets you surrender first responder status (
\f1\fs22 \CocoaLigature0 textField.\cf2 resignFirstResponder()) and decide whether to move to next step (return value), \cf0 textFieldDidEndEditing lets you react to the new text (eg. set other controls) [if text might be up while interacting with images, etc. can use textField.resignFirstResponder() there too]
\f0\fs24 \CocoaLigature1 \
	other fields are normal: Button, Label, etc.\
		HINT: might want to hook textFieldDidEndEditing to disable things like Save buttons if invalid text\
	UIStackView = for leveraging AutoLayout (uses constraints to stack controls adaptively)\
	UIImageView (Image View) = an image (view, not a control, so to make act like a button use gesture recognizer)\
		*may need to enable user interaction\
		*Image property lets you select an image set from the assets\
	UIImagePickerController - lets user pick an image or take their own (uses delegate with protocol just like text field)\
		*sourceType enum field can select where photos can come from (eg. disable taking picture)(PhotoLibrary = camera roll)\
		*create locally (eg. inside an action) and then call presentViewController on the controller to show it (set a delegate to respond)\
		*dismiss with dismissViewController in the didCancel method\
		**if constrain aspect ratio with stacker, the image will be resized to fit iPhone screen\
	
\f1 \cf3 \expnd0\expndtw0\kerning0
UINavigationControllerDelegate: lets you implement navigation in your controller\

\f0 \cf0 \kerning1\expnd0\expndtw0 	UIButton = button class in code (can initialize without frame, with frame, etc.)\
		*button is selected or normal, or highlighted and selected (in process of tapping) [.selected property]\
		**can use setImage() to map UIImage objects (eg. named assets) to button states (forState param can take an array for combined states too)\
		***set adjustsImageWhenHighlighted = false to stop default highlighting behavior (eg. if image already accounts for it)\
	UITableView = table view with scrolling list of items (can be a scene in itself if drag a table view controller instead of table view)\
		*managed by UITableViewController (can click on table view cell and use Identity Inspector to change class)\
		*use Size Inspector to set things like row height\
		*by default data is dynamic, so static stuff you enter into attributes won\'92t show up unless you do Preview mode in Assistant Editor\
		**need to implement UITableViewDelegate (top 3 methods [2 of which are uncommented] in the template are required) to make functional (don\'92t declare the protocol because UITableViewController already does)\
			-one that returns int is count, one that returns cell gets new cell based on model (passes in selected index which you can use to index your own array, for instance)\
			-the identifier you use in the 3rd one should be set to the identifier (in Attributes Inspector) of the cell in the storyboard or you\'92ll get a runtime exception\
		*use 
\f1\fs22 \cf2 \CocoaLigature0 insertRowsAtIndexPaths with animation option to add item
\f0\fs24 \cf0 \CocoaLigature1 \
	UITableViewCell = cell within a table view\
		*many default kinds you could use, or you can subclass it to provide your own content\
	CGRect = rectangle in code (once constructed, x and y are accessed via origin property but for some reason have to wrap value as CGFloat)\
	CGSize = 2D size in code\
	UIColor = useful stuff like static color methods to return colors\
	UIImage = an image (can use the init(named:) initializer to set a name from the assets)((folder doesn\'92t seem to matter))\
\
	Navigation Controller = for navigation between scenes\
		*has navigation stack (1st item = root controller which is never popped off the stack)\
		**each scene added gets a navigation bar which unifies the flow in the app\
\
	Mark Comments: //MARK: and then a string to help you and other developers know where to insert things (eg. //MARK: Properties) [just a convention]\
		*useful to mark protocol sections, etc.\
		**the navigator at the top of the Editor area understands these\
\
	Outlets = way to access control properties and actions from view controller [needed to make Actions and gesture recognizers work]\
		*to create, select a control, ctrl-drag it to the point in code where you want the property, and name the property in the dialog [use assistant editor for this]\
	Actions = code to execute when control is used (by control, not by event)\
		*set up same way as Outlets (the dialog has a dropdown to choose outlet or action)[can let it handle any object or pick a specific one depending on your needs (eg. reuse later)]\
		**can make use of outlets (eg. set a label field outlet\'92s .text property)\
	Gesture Recognizers = to make views act like controls in terms of actions, etc. (drag onto object and it shows up in the top dock by Exit and First Responder) [after add it, can ctrl-drag it to make action in code]\
	Delegates = certain controls have delegate property that you can set (eg. in viewDidLoad() of controller), which is an object that implements the delegate protocol for the control (eg. self if view controller itself implements it)\
		*by implementing the methods of the protocol (tend to start with delegate name but without delegate - can also just be name of delegate for default action) you can respond to user input\
		**similar to actions but can do more things (not just 1 per control like Actions)\
		eg) make view controller UITextFieldDelegate, set self as text field\'92s delegate property, implement textField* methods (use auto-complete to find)\
	First Responder = the item getting input currently (eg. a text field when the user taps the field and the keyboard pops up)\
\
	print(): goes to debug console\
\
	Custom Control:\
		use File -> New File (Cocoa Touch Class -> subclass UIView with a name like RatingControl) [end up with a .swift file defining the new class]\
		give init(frame:) if want to load the control manually [not required], init?(coder:) if you want to load by storyboard (delegate to the base before using self) [required to give]\
		to place in storyboard: put a View object there, set intrinsic size, etc. and then use Identity Inspector to change class to your class\
		in initializer, can create the controls/views that are shown on the view, and add them with addSubview()\
			let buttonSize = Int(frame.size.height)	//getting a constant for the height of the view which can then be used to specify control sizes\
		override intrinsicContentSize() to specify size for stack view to use for layout  (can be hardcoded or adapt to what\'92s inside)[eg. use the let buttonSize technique from above)\
		call addTarget() to add target methods (manual way of doing the crazy wiring in storyboard) [no IBAction attribute needed since defining in code instead of Interface Builder] ((one of few old things that still requires #selector syntax))\
		rather than trying to place the controls on creation, you have to override layoutSubviews() [they can even have no rect on creation if you want]\
			*set the .frame property of a view to a CGRect of its position\
			*tutorial shows creating CGRect at 0 and then moving it to appropriate origin.x in loop for each button with spacing accounted for\
			*since things like CGRect are structs, you can keep using the same one because it will be copied\
			*use property observers and setNeedsLayout() to make sure UI is updated as properties are modified\
		can be control-dragged from your storyboard to make an outlet, etc. just like any other control\
\
	Data Model:\
		create base class (swift file)\
		add properties (can include things like UIImage that are cocoa touch specific), make optional ones optional with ?\
		probably want to create a failable initializer (return nil on invalid input and mark as init?)\
		build unit test(s)(see below) to check the class separately (or before incorporated into) the rest of the program\
\
	MVC Summary:\
		storyboard has scenes\
		scenes are UI panels (like forms in Windows) - code is in a view controller for the scene (wired via Outlets and Actions [and sometimes delegates])\
		scenes have views and controls in them which can be backed by custom subclasses or just configured (accessed in view controller as outlets)\
			*could have view controllers for sub controls too\
		models are custom classes representing the data for the application and are owned and managed by the view controllers (eg. have a Meal class and then an array of Meals in the view controller for a table)\
		delegates are classes that implement protocols used by views and controls (often the view controller itself) to handle behavior that is too complex to represent as an action\
\
	Unit Tests:\
		*when create unit test folder in your project, the pre-populated swift file has comments to help you get going (looks a lot like other frameworks with test methods and setup/teardown)\
		each test method is a series of asserts that start with XCTAssert (eg. XCTAssertNil() and XCTAssertNotNil())\
		a diamond appears next to tests and classes to let you execute (red diamond shows up if failure, can be reclicked to rerun)\
		*also brings up a dangling simulator to run the tests\
\
	Adding a Scene:  ((scene is like a form))\
		Drag a table view controller from Object Library to some point outside of the existing scenes\
		Drag the arrow to the scene if you want it to be the opening scene of the storyboard\
		rearrange the scenes if you want\
		if have trouble selecting the view itself, use the outline view to the left to do it\
		if table view scene, set up the prototype cell to determine the kinds of cells that will be created dynamically at runtime (can wire outlets, etc. to a custom controller subclass - will be instanced along with the cell instances)\
		if make a custom table view controller, deselect creating a custom NIB\
\
	Adding Scene Navigation:\
		select the scene (controller) and use Editor -> Embed In -> Navigator Controller to encapsulate it in a navigator \
			*navigator actually sets the scene as its root controller and adds a navigation bar controller to the root controller scene (if scene was startup scene, the navigation controller is now)\
		double-click the navigation bar in the root scene to change the title\
		To add a navigation button (hyperlink text): drag Bar Button from object library into the navigation bar (can set to system things like Add (+) or custom text) [even for stuff like Save and Cancel there are system items you should use]\
			*control drag to the scene you want the button to navigate to (adds it to stack of the navigation controller and gives it a navigation bar)\
			*can set segue type when creating (change by selecting the segue arrow and changing in Attributes Inspector)\
			\'93Show\'94 segue = automatically a back button with title from the navigation bar that lets you go back (without adding anything on the next scene)\
			\'93Modal\'94 segue = modal popup and no automatic stuff (navigation bar goes away too)\
			*give the segue an identifier in Attributes Inspector if going to need to reference it in code\
		If want to manually add a navigation bar to a scene that doesn\'92t get one (eg. because you used Modal), have to embed that scene in its own navigation controller\
			*add buttons like Cancel & Save to the new navigation bar but don\'92t connect it to the other scene/navigator\
		If using a stacker in a scene with a navigation bar, use Auto Layout button and Update Constraints to fix it up\
		Can implement prepareForSegue() method in controller to hook segues (eg. to pass a data model object from scene to scene)\
			*sender = the button that causes the segue\
		To create an unwind segue to go back to previous scene (eg. Save button)\
			have the data model object set on the source controller in prepareForSeque (based on control fields)\
			Create action method in the target controller (should take 
\f1\fs22 \CocoaLigature0 sender: \cf4 UIStoryboardSegue and return void) that deals with the data model object after casting the sender to the source controller\
			Ctrl-drag the segue button (eg. Save) to the Exit icon in the dock in the storyboard and select the action method
\f0\fs24 \cf0 \CocoaLigature1 \
				**for some reason the circle will not be filled next to the action in the source\
				HINT: if add to table, just insert into table and the tableView() method will be called on its own to create the controls in the cell\
			For cancel button, create cancel action in the controller and call 
\f1 \cf5 \expnd0\expndtw0\kerning0
dismissViewControllerAnimated to dismiss the controller (which if modal automatically unwinds back without changing or calling anything you defined)
\f0 \cf0 \kerning1\expnd0\expndtw0 \
\
	TODO: how to apply a design scheme/skin/etc?  UI design guidelines?  setting app icon?  figure out what syntax of imagePickerController delegate method means? how can you see what control a gesture recognizer is controlling in design view?  how to create custom control visually instead of in code?  are sizes in pixels or what?,  what does setting intrinsic width for a custom control really do?  or for any control?}