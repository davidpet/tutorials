{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww28600\viewh15040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 NOTE: commands that take files can take multiple files and wildcards (eg. git add)\
NOTE: git commands that print more than a page worth will use \'91less\'92 automatically\
\
Basic Setup\
	git config --global user.name "Paul Hudson"\
	git config --global user.email "paul@hackingwithswift.com"\
	it config --global color.ui true						possibly already colored on your system\
Help\
	git help [command]		Get help for a git command\
Repositories\
	git init			create a new .git folder in the current folder (which turns it into a repo)\
Diffing\
Changes\
	git add [file] ..		stage changes in the index by file/folder name(s) and/or wildcards (adding a new untracked file is also a change)\
	git add .		stage all changes in current folder\
				NOTE: you can stage the same file multiple times in a commit and the final state is in the commit (keep adding same file after changes)\
	git add -p [file]	patch add (interactively select which changes in file to stage)\
	git add -p		same thing but more general\
\
	git rm [file] ..			delete files and stage the change (only if unmodified)\
	git add [folder]		if deleted a file outside of git, can use this to have it detect that and stage the delete change\
	git rm -f [file]			force deletion even if file is modified\
	git rm --cached [file]		delete the file as an index change, but leave the file on disk in the working copy\
\
	git commit				launch your text editor (for the log message) and commit the changes in the index to the actual repository\
	git commit -m \'93[message]		specify commit message and commit in one operation\
	git commit -am \'93[message\'94]	stages all modifications (but not new files), then commits the staging area with a message (use just -a for using Vim for the log message)\
\
	git push		send the new commits, trees, etc. to the tracked branch in the remote repository (eg. GitHub)\
Diffing\
	git status		status of the repo (new untracked files, changed files, etc.) with hints about what you can do\
				NOTE: a file can have unstaged modifications and staged ones at the same time\
	git status -s		get short status (just list of files with special characters)\
\
	git diff			show line-by-line changes that are not yet staged\
				unified diff format (shows 2 ranges with index and count on a line, then shows + and - lines)\
	git diff [file]		same but for individual files (or wildcards)\
	git diff --staged	show line-by-line changes that are staged\
	git diff --staged [file] same thing with specific file\
Reverting\
	git reset HEAD [file]		unstage file from the index (but leave the change in the working directory) [like undoing git add]\
	git reset HEAD		unstage all changes in the index (but leave working directory alone)\
	git reset			can leave out HEAD (not sure why other tutorial didn\'92t mention that)\
	git reset [file]			see above\
\
	git reset --hard 		the \'91hard\'92 option adds the additional step of reverting the working copy changes (can\'92t do on individual files)\
					for newly created files, if they have been staged, they will be deleted, otherwise left alone\
Branches\
	git status		convenient way to see which branch you\'92re on (and how it compares to remote)\
	git branch		find out which branches you have locally\
\
	git branch [name]		create a new branch from the current state of the repository (don\'92t switch to it yet)\
					don\'92t have to worry about name clashes because your branches are your own unless you push them on purpose\
	git checkout [name]		switch to branch\
	git checkout -b [name]	create new branch and switch to it at the same time\
\
	git merge [fromBranch]		merge changes from a branch into the current one (based on common ancestry) [can continue adding to the branch and merging as desired]\
History\
	git log					print basic info about last 4 commits (hash, author, comment, date) [most recent = top] (since using less, it will stay at the top until you advance)((the hash goes BEFORE the metadata))\
	git log -1				can specify number of commits to show\
	git log --oneline			show each commit on one line (hash and message) [shows a lot more than 4 by default]\
	git diff [hash]				can see the diff of what was checked in in a commit (using the hash from git log)\
Git Objects\
	Repository		stored in .git folder in local copy (contains change history for repo)\
	Index/Staging	where you build up your changes which will be commited next time you commit\
	Working Copy	Your source tree\
	Branch		stream of development\
	master		default initial branch name\
	Hash			SHA1 hashes used (security bonus = can download a repo from untrusted source and as long as hashes match you know it\'92s right)\
				NOTE: when using the hashes as parameters to git commands, can usually specify 5 or 6 characters (just has to be unique in the repo)\
	HEAD			the last commit\
Subversion\
	Loss of server	screwed in Subversion (CVCS) but everyone has the repo data in Git (DVCS)\
	Peers			can push/pull to each other in Git (don\'92t even need a central server)\
	Revision Numbers	not needed in Git because hashes identify things\
	Merging		more easy and automatic in Git (eg. fast-forward merges)\
	Modifications		extra indexing step\
\
TODO: read Git chapter in Beyond Code (resume at p. 131)\
TODO: watch Git videos in Beyond Code\
TODO: setup Beyond Compare diffing/merging on Mac and PC (document in cloud setup steps) [need to resolve issue with tech support]\
TODO: How to revert unstaged changes?\
TODO: Revert a revision you checked in or revert to a revision?  Revert changes from revision?\
TODO: try git add -p and record the options here\
TODO: record equivalent to Subversion operations here\
TODO: how to use hard reset on individual files?\
TODO: learn git status -s symbols\
TODO: what happens if you checkout a directory with unstaged and/or staged changes?\
}