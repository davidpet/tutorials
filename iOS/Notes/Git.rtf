{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww28600\viewh15040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 NOTE: commands that take files can take multiple files and wildcards (eg. git add)\
NOTE: git commands that print more than a page worth will use \'91less\'92 automatically\
NOTE: git is about content, not files necessarily (for instance, it doesn\'92t record the modified date of the files [so \'91touch\'92 won\'92t be seen as a change])\
\
Configuration\
	git config --global user.name "Paul Hudson"\
	git config --global user.email "paul@hackingwithswift.com"\
	git config --global color.ui true						possibly already colored on your system\
	git config --global diff.tool bc3						set Beyond Compare 3 or 4 (both aliased as bc3 in git) as your external diff tool (bc3 is an internal git thing, it is not a real shell command)\
											NOTE: merge.tool is same thing but for merge tool, and both may have extra options (see the installation instructions for your tool)\
\
	git config --global push.default simple					can do this if you get a bunch of messages about changed behavior in git push\
	git config --global alias.co checkout					create an alias (from now on can use co instead of checkout)\
	git config --global alias.nuke \'93reset --hard\'94				create an alias with switches\
Help\
	git help [command]		Get help for a git command\
Repositories\
	git init			create a new .git folder in the current folder (which turns it into a repo)\
	git clone [repoPath]	clone a repository into a folder in the working directory (for cloning local paths give the full path of the .git folder)\
\
	.gitignore		file that tells your repository what to ignore (at root of directory causes it to apply to that tree - doesn\'92t have to be root of repo)\
				folders and files with possible wildcards, one per line\
				use ! before a pattern to NOT ignore it (eg. if already ignored by another line)\
				use # for comments\
				NOTE: can use .gitignore file to check in an empty folder (since that usually isn\'92t allowed)\
\
	git clean -f		Delete all untracked files (that are not ignored) in the repo (-f required because destructive)\
	git clean -x		Delete all untracked files (even ignored ones) in the repo\
	git clean -n		List what untracked files would be deleted (good to test before you do it for real)\
Changes\
	git add [file] ..		stage changes in the index by file/folder name(s) and/or wildcards (adding a new untracked file is also a change)\
	git add .		stage all changes in current folder\
				NOTE: you can stage the same file multiple times in a commit and the final state is in the commit (keep adding same file after changes)\
	git add -p [file]	patch add (interactively select which changes in file to stage)\
	git add -p		same thing but more general\
\
	git rm [file] ..			delete files and stage the change (only if unmodified)\
	git add [folder]		if deleted a file outside of git, can use this to have it detect that and stage the delete change\
	git rm -f [file]			force deletion even if file is modified\
	git rm --cached [file]		delete the file as an index change, but leave the file on disk in the working copy\
\
	git commit				launch your text editor (for the log message) and commit the changes in the index to the actual repository\
	git commit -m \'93[message]		specify commit message and commit in one operation\
	git commit -am \'93[message\'94]	stages all modifications (but not new files), then commits the staging area with a message (use just -a for using Vim for the log message)\
\
	git push		send the new commits, trees, etc. to the tracked branch in the remote repository (eg. GitHub)\
Diffing\
	git status		status of the repo (new untracked files, changed files, etc.) with hints about what you can do\
				NOTE: a file can have unstaged modifications and staged ones at the same time\
	git status -s		get short status (just list of files with special characters)\
\
	git diff			show line-by-line changes that are not yet staged\
				unified diff format (shows 2 ranges with index and count on a line, then shows + and - lines)\
	git diff [file]		same but for individual files (or wildcards)\
	git diff --staged	show line-by-line changes that are staged\
	git diff --staged [file] same thing with specific file\
\
	git difftool [file]	same options as git diff but sends it to your external merge tool (configure with \'91git config\'92)\
				prompts you to open each file in your (probably GUI) diff tool one by one\
Reverting\
	git reset HEAD [file]		unstage file from the index (but leave the change in the working directory) [like undoing git add]\
	git reset HEAD		unstage all changes in the index (but leave working directory alone)\
	git reset			can leave out HEAD (not sure why other tutorial didn\'92t mention that)\
	git reset [file]			see above\
\
	git reset --hard 		the \'91hard\'92 option adds the additional step of reverting the working copy changes (can\'92t do on individual files)\
					for newly created files, if they have been staged, they will be deleted, otherwise left alone\
\
	git checkout [file]		revert working copy of file to the state in the index\
Branches\
	NOTE: branches in Git are cheap so it\'92s common to make them freely for features, etc. (like save points)\
\
	git status		convenient way to see which branch you\'92re on (and how it compares to remote)\
	git branch		find out which branches you have locally\
\
	git branch [name]		create a new branch from the current state of the repository (don\'92t switch to it yet)\
					don\'92t have to worry about name clashes because your branches are your own unless you push them on purpose\
	git checkout [name]		switch to branch\
	git checkout -b [name]	create new branch and switch to it at the same time\
\
	git merge [fromBranch]		merge changes from a branch into the current one (based on common ancestry) [can continue adding to the branch and merging as desired]\
						NOTE: can use git mergetool in place of git merge to use external program like Beyond Compare\
						NOTE: if merge conflicts, you must edit them (by editing the file which contains both versions in special notation), then stage the file(s), then commit\
						NOTE: by default Git tries to do a fast-forward merge (moving pointer of target branch to last commit of source branch - works if no changes in source branch - such as when have feature branch)\
						NOTE: if it can\'92t do fast-forward, it will do a text merge and ask you for a commit message\
	git merge --no-ff [branch]		force a text merge and commit message (default on GitHub)\
\
	git branch -d [branch]		delete a branch when you\'92re done with it (with error if unmerged changes)\
	git branch -D [branch]		same as above but suppresses error on unmerged changes\
						NOTE: you are not allowed to delete the branch you\'92re on\
	git branch -m [newname]		rename the current branch\
\
	git branch -v				show latest commit on each branch\
	git branch --merged			show branches that have been merged into the current one\
	git branch --no-merged		show branches that have not been merged into the current one\
\
	git rebase [branch]			change the history so that it looks like the current branch was based on \'91branch\'92 instead of whatever it was based on\
						This is accomplished by rewinding to common ancestor then applying diffs\
	git cherry-pick [hash]		merge a single commit from a different branch\
Stashing\
	git stash				pushes current working directory and index state to stash item 0\
						resets working directory and index to state of commit you were working from (shown in the stash message)\
						NOTE: WIP = work in progress\
						NOTE: stash is for saving work that you can come back to later (eg. asked to work on something higher priority but not in a commitable state)\
						NOTE: will not stash untracked files (but will stash unstaged tracked files)\
	git stash -u				stash untracked files\
	git stash --keep-index		stash only unstaged changes\
	git stash save \'93message\'94		like git stash but lets you provide your own message instead of the default WIP hash one\
	\
	git stash list				show the stashed items (like a stack with 0 at the top)\
	git stash show			show more detail (eg. files and lines changed) about stash item 0\
	git stash show stash@\{1\}		show more detail about particular stash item\
	git stash show -p			show unified diff for more detail\
	\
	git stash pop				remove item 0 from stash and apply it to working directory and index\
						NOTE: it does not have to be the same state the stash item was created in (eg. you can be on a different branch with other changes, etc.)\
	git stash apply			like pop but leaves the item in the stash too (eg. if want to apply to multiple branches)\
	git stash pop stash@\{1\}		way to specify a specific index instead of take the top\
	git stash apply stash@\{1\}		works for apply too\
	\
	git stash drop stash@\{1\}		remove an item from the stash (can leave out the item to have it use 0)\
	git stash clear			drop all items from the stash\
History\
	git log					print basic info about last 4 commits (hash, author, comment, date) [most recent = top] (since using less, it will stay at the top until you advance)((the hash goes BEFORE the metadata))\
	git log -1				can specify number of commits to show\
	git log --oneline			show each commit on one line (hash and message) [shows a lot more than 4 by default]\
	git log --stat				add details like number of insertions/removals\
	git log [file]				show the log for a specific file instead of the whole repo\
	git log --since=1.week		format for specifying specific times\
	git log --since=4.years\
	git log --author David		get messages for specific authors (partial match)\
	git log --grep=\'93text\'94			search through commit messages\
	git log -i --grep=\'93text\'94		case insensitive search through commit messages\
						NOTE: -G option is available to search within changes themselves\
\
	git log [branch]			get log for a specific branch\
	git log [branch] ^[excludeBranch]	get commits in branch that are not in excludeBranch\
\
	git show [commitHash]		show a diff of the commit changes (eg. from git log)\
	git difftool [commitHash]^!		same as above but using difftool\
ags\
	git tag 1.0 -m \'93Tag version 1.0 from master\'94			create a tag called 1.0 of the current state of the current branch with a given description\
	git tag									list your tags without the messages\
	git tag -n								list your tags with the message\
	git tag -ln 1.*								list all tags that start with 1.\
Remotes\
	git remote									list remotes you have configured\
	git remote -v									list remotes you have configured with URLs\
	git remote show origin							get information about a specific remote\
\
	git branch -r									get list of branches on the remote server (don\'92t see them with git branch normally unless you have them locally)\
	git branch -a									list all branches (local and remote)\
											NOTE: git does not automatically have local branches for remote branches until you check them out (except the one you clone/add)\
	git branch -avv								get all branches (local and remote) and which branches track what changes\
\
	git remote add origin https://github.com/user/repo.git			Add a remote for the given repo with the given name (in this case origin) to an existing local repository\
	git clone https://github.com/user/repo.git					Clone (and set up tracking for) a remote branch into local directory (in this case a folder called 
\i repo
\i0  will be created)\
	git checkout newfeature							Check out a branch from the remote (create local branch for it, set up tracking, switch to it)\
\
	git remote remove origin							Remove a remote from the local repo\
\
	git push -u origin master							Push local branch to remote and add tracking reference (eg. if you used git remote add for a new GitHub repo)\
											NOTE: from now on, you can ommit origin and master when on master branch and want to push\
	git push									Push local changes to the default remote and branch (the tracking branch for the current branch)\
											NOTE: if there are changes that will result in anything but a fast-forward merge, git will refuse\
	git push --force								Force the push even if non fast forward changes (absolute last resort -> try to avoid)\
	git push origin newfeature							Explicit push to remote and branch (doesn\'92t have to be the tracking branch of current branch)\
											NOTE: git does not automatically push branches or tags (so those are private, but both can be manually pushed if desired)\
	git push origin --delete newfeature					Delete remote branch from remote server\
	git push origin --tags							Push tags to the remote server	\
	git pull										Download and merge changes from default remote and branch (eg. tacking branch of the current branch)\
											NOTE: git might create merge commits\
											NOTE: if others want to commit something for you to incorporate in your repo, they will use Pull Requests on GitHub\
	git pull --rebase origin							rebase local branch onto the remote version so you don\'92t have to merge\
	git fetch									Like pull but doesn\'92t merge (you can do that manually once the changes have been downloaded)\
Commit Messages\
	Preferred format (used by some tools even) is < 50 char first line summary then 2 returns then longer description (see below).\
	One-liners are ok for very simple changes though.\
\
	
\f1\fs29\fsmilli14667 \cf2 \expnd0\expndtw0\kerning0
Update shopping.txt to remove Eggs\
\pard\pardeftab720\sl340\partightenfactor0
\cf2 \
	Management came back with a request to remove Eggs from the shopping.txt file because it was causing problems for vegan users.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
	git commit --amend -m \'93revised message\'94		rewrite the previous commit message if you made a mistake\
									NOTE: if you stage files before using \'97amend, the new changes will be amended in the previous commit too\
Git Objects\
	Repository		stored in .git folder in local copy (contains change history for repo)\
	Index/Staging	where you build up your changes which will be commited next time you commit\
	Working Copy	Your source tree\
	Branch		stream of development\
	master		default initial branch name\
	Hash			SHA1 hashes used (security bonus = can download a repo from untrusted source and as long as hashes match you know it\'92s right)\
				NOTE: when using the hashes as parameters to git commands, can usually specify 5 or 6 characters (just has to be unique in the repo)\
	HEAD			the last commit\
	origin			default name of a remote\
	origin/master		default main branch on remote names\
Subversion\
	Loss of server	screwed in Subversion (CVCS) but everyone has the repo data in Git (DVCS)\
	Peers			can push/pull to each other in Git (don\'92t even need a central server)\
	Revision Numbers	not needed in Git because hashes identify things\
	Merging		more easy and automatic in Git (eg. fast-forward merges)\
	Modifications		extra indexing step\
Workflows\
	Small Teams	(<5)		pushing and pulling to central remote\
	Medium Teams (5-20)	pull requests to designated person (can also use for mixed experience levels)\
	Large Teams (>20)		multiple level version of the medium model (eg. Linux kernel = Linus has lieutenants to funnel merges to him)\
\
TODO: watch Git videos in Beyond Code\
TODO: setup Beyond Compare diffing/merging on Mac and PC (document in cloud setup steps) [need to resolve issue with tech support]\
TODO: How to revert unstaged changes to whole repo?\
TODO: Revert a revision you checked in or revert to a revision?  Revert changes from revision?\
TODO: try git add -p and record the options here\
TODO: record equivalent to Subversion operations here\
TODO: how to use hard reset on individual files?\
TODO: learn git status -s symbols\
TODO: what happens if you checkout a directory with unstaged and/or staged changes?\
TODO: add stuff from previous notes (maybe only in Anki form)\
TODO: clarify what git does from subfolders\
TODO: look at git shortlog -10 -n -sn and compare to git log\
TODO: does git stash -u stash tracked files too?\
TODO: using difftool w/ commands that do unified diffs (eg. stash show -p)\
TODO: sending stash to remotes?\
}