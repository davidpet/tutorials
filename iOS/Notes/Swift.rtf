{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red0\green0\blue0;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;}
\margl1440\margr1440\vieww28600\viewh14980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ***see tutorials/ios/playgrounds in my github repo\
-Swift is supported in iOS 7+ (generally publishers support two versions before current one)\
-source files have .Swift extension\
	\'97a swift file can have multiple types in it (not class per file like in some languages)\
-Swift does not have a base object type (like C++, unlike C# and Objective-C)\
-Swift is refcounted rather than garbage collected\
\
*questions inside the playgrounds to resolve over time\
**also want to fit in almost-empty playgrounds like Modules, Functional Programming. etc.\
\
Nesting: you are allowed to nest enums in enums, structs in structs, functions in functions, etc. for logical grouping (eg. MyEnum.MyOtherEnum.value)\
	HINT: can make things only exist to nest other things (eg. Resources enum that contains Pictures and Documents enums)\
	-can nest mixed types too (eg. enum in struct) which is like namespacing it\
	-nested functions are restricted to their enclosing function but automatically capture and can be returned as closures (just like Python)\
	HINT: nesting functions that capture variables is a possible way to return partially applied functions\
Access Control:\
	can use private on nested things so only the parent can use it (NOTE: you cannot expose a private type as a property, but you can have a private property of that type)\
	put modifiers in front of things (like C#)\
	members, classes, global variables, etc. can have these \
\
	private: only used internally in same class or struct\
	fileprivate: only used in same .Swift file\
	internal: only used in same module (eg. your app) [DEFAULT]\
	public: anyone\
\
	special syntax to allow public read but private write on a property: private(set) var x = 0\
\
https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/\
	*has API reference and language guide\
\
POP vs. OOP: Apple recommends you start with a protocol instead of class (like starting with interfaces in OOP)\
***experiment with moving towards POP\
MVC: make sure to separate model and controller code and use IB when possible (see tips in Cocoa Touch MVC notes)\
MVVM (Model View ViewModel): alternative to MVC if have fat controller problem\
	controller gets split into View Controller and View Model\
	otherwise just like MVC\
	View Model transforms between model and data that is ready to present while View Controller is responsible for talking to UI\
	can do this kind of orthogonal/testable thing without giving it a fancy name	\
	overkill unless very large UI\
MVVC vs. MVC: not really separate but natural orthogonal decomposition (you can take it even further as the project gets larger)\
\
Pro Swift: sections left = 7: MVVM, command-line\
	***remember the videos also (none watched)\
\
on project 19 of Hacking with Swift\
\
TODO: put stuff in this document in the appropriate playgrounds if applicable\
TODO: how to do generator/yield type stuff in Swift?  (like lazy sequence but have the elements totally computed when needed, hopefully with a closure)\
TODO: is there a list type like in clojure that can be lazy, etc. or do you use array for that?\
TODO: Is there a way to declare a reference variable (like int& in C++)?\
TODO: modules (already have playground)\
TODO: how to use http instead of https for WKWebView?\
TODO: attributes (built-in, can you do custom?)\
TODO: optional chaining can be used in top-level statements (eg. before function calls) too\
TODO: putting ! on place that doesn\'92t need a ! like in function that implements closure?  (eg. askQuestion() in Project 2)\
TODO: selector syntax (eg. #selector(methodName)) (
\f1\fs22 \cf2 \CocoaLigature0 #selector\cf3 (image(\cf2 _\cf3 :didFinishSavingWithError:contextInfo:)))
\f0\fs24 \cf0 \CocoaLigature1 \
TODO: URL struct\
TODO: enumerated() method of array\
TODO: learn how webView(decidePolicyFor) from Project 4 works in detail (eg. what is @escaping)\
TODO: look into using smootherStep function for smooth interpolation (and also the clipping technique used)\
TODO: look into extending collections to allow safe nil for out of bound\
TODO: macros?  #ifdef?\
TODO: custom subscript operator\
TODO: iterators?\
TODO: bring in missing stuff (that still applies) from the Swift 2 tutorial\
TODO: look into times extension in chapter 7 of Pro Swift\
TODO: tip: use ?? after a try? to handle situations where throwing an error still results in valid state (eg. try to read a file that may not be there)\
TODO: are parameters mutable or immutable?\
TODO: table view basic cell vs. custom cell\
TODO: warnings about calling function and ignoring value (do you just use _?)(is there a return ignored macro)?\
TODO: Can you destructure such as head and tail of an array, first 3 items as variables, etc? like in Clojure?\
TODO: how do you disambiguate methods with #selector, closures, etc. (eg. taking no parameters vs. 1)?\
TODO: required to use self in closures explicitly\
TODO: figure out layout issue with AutoLayout project (worked in simular but not real phone) (landscape mode)\
TODO: make sure cover that lines can be split up across =, (), etc.\
TODO: find out if UIImage and stuff like that support vector graphics (or else what resolutions you should make things at)\
TODO: how to do underlined letters (like hangman)\
TODO: what is the .now() when calling asyncAfter (why the dot and what is it getting and what else can you use?)\
TODO: look into global variables\
TODO: look into other notes about access modifiers\
}