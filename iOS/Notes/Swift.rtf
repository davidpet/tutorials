{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww28600\viewh14980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ***see tutorials/ios/playgrounds in my github repo\
****there is a Hangman project in OSX folder separately from all the iOS stuff (shows cmdline app) [see Xcode notes for more info about cmdline apps]\
\
-Swift is supported in iOS 7+ (generally publishers support two versions before current one)\
-source files have .Swift extension\
	\'97a swift file can have multiple types in it (not class per file like in some languages)\
-Swift does not have a base object type (like C++, unlike C# and Objective-C)\
-Swift is refcounted rather than garbage collected\
\
*questions inside the playgrounds to resolve over time\
**also want to fit in almost-empty playgrounds like Modules, Functional Programming. etc.\
\
Nesting: you are allowed to nest enums in enums, structs in structs, functions in functions, etc. for logical grouping (eg. MyEnum.MyOtherEnum.value)\
	HINT: can make things only exist to nest other things (eg. Resources enum that contains Pictures and Documents enums)\
	-can nest mixed types too (eg. enum in struct) which is like namespacing it\
	-nested functions are restricted to their enclosing function but automatically capture and can be returned as closures (just like Python)\
	HINT: nesting functions that capture variables is a possible way to return partially applied functions\
Access Control:\
	can use private on nested things so only the parent can use it (NOTE: you cannot expose a private type as a property, but you can have a private property of that type)\
	put modifiers in front of things (like C#)\
	members, classes, global variables, etc. can have these \
\
	private: only used internally in same class or struct\
	fileprivate: only used in same .Swift file\
	internal: only used in same module (eg. your app) [DEFAULT] ((doesn\'92t matter how the targets within the module are split up - a module is a project))\
	public: anyone\
\
	special syntax to allow public read but private write on a property: private(set) var x = 0\
Conditional Compilation:\
	#if/#else/#endif construct available\
	#if (arch(i386) || arch(x86_64)) checks if you\'92re running on a Mac or Linux machine (rather than an iDevice)\
		this can be used as a hack to separate accelerometer vs. touch for a game, for instance\
	#if swift(>=3.0)	checks for Swift version\
	#line, #filename, #function 		for getting info about the code compiled into the code\
\
https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/\
	*has API reference and language guide\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/pNre/ExSwift"}}{\fldrslt \cf0 https://github.com/pNre/ExSwift}} - set of swift extensions for common stuff\
\
POP vs. OOP: Apple recommends you start with a protocol instead of class (like starting with interfaces in OOP)\
***experiment with moving towards POP\
MVC: make sure to separate model and controller code and use IB when possible (see tips in Cocoa Touch MVC notes)\
MVVM (Model View ViewModel): alternative to MVC if have fat controller problem\
	controller gets split into View Controller and View Model\
	otherwise just like MVC\
	View Model transforms between model and data that is ready to present while View Controller is responsible for talking to UI\
	can do this kind of orthogonal/testable thing without giving it a fancy name	\
	overkill unless very large UI\
MVVC vs. MVC: not really separate but natural orthogonal decomposition (you can take it even further as the project gets larger)\
}