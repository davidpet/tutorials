{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\froman\fcharset0 TimesNewRomanPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;\csgray\c100000;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid103\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid203\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid403\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid404\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid405\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid602\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid603\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid901\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid903\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid904\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1002\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1201\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1204\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1301\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1401\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid15}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}}
\margl1440\margr1440\vieww28600\viewh14980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Menus\
	*holding modifier while looking at menu options might show additional options that use that modifier\
\
Buttons\
	can access menus held in little arrows on buttons by hovering and holding down mouse button\
\
Jump Bar at top of editor = hierarchy down to items within files which are sorted in the order they appear\
	*can start typing when list of items in a file is dropped down and it will filter\
	*automatically shows //MARK: areas (eg. //MARK: Properties) [can put a - before or after mark name to add a separator in the Jump Bar]\
\
Assistant Editor: rings next to normal editor in top right, lets you see another file or view at the same time as the one you\'92re editing\
\
cmd-shift-o: open (quickly) a file in your project w/ fuzzy name matching [doesn\'92t navigate to it on left]\
	*can be used to look up built-in stuff too\
cmd-shift-j: jump to the current editor file in the navigator\
alt-shift-click on another file in navigator: asks you how to open the other file (eg. assistant editor, new window, new tab, etc.)\
cmd-ctrl-j: jump to definition of symbol under cursor\
cmd-j+return: jump from navigator back to file being edited (without having to mouse click)\
\
alt-click on item in text: show popup of info about it (like VS hovering)\
Quick Help Pane on right: same info as you could get by alt-clicking if you just regular click cursor into item\
can add /// comments in special form (similar to C# but won\'92t auto popup with ///) to markup your code with documentation to show up here\
\
Right-click on symbol:\
	Jump To Definition: like Go To Definition in VS (cmd-ctrl-j)\
\
cmd-[ and cmd-]: dedent and indent line(s) [like tab + shift-tab in VS, which don\'92t work here]\
ctrl-i: smartly reindent the selected code\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Building
\fs24 \
	cmd-b: build\
	cmd-r: run\
	cmd-.: stop\
	cmd-shift-k: clean (current target only)\
	alt-cmd-shift-k: clean build folder (all targets)\
	cmd-k: clear console\
\
	Red error icon can be clicked to see error (sometimes has a Fix-it button)\
\
	see Issue Navigator on left side for list of all errors/warnings\
\

\fs36 Debugging (Visual Studio Equivalents)
\fs24 \
	F5: to run = cmd-r, to continue when broken in = ctrl-cmd-y\
	F6/F7: cmd-b (to build)[but just current scheme if in workspace]\
	F10 = F6 (step out)\
	F11 = F7 (step into)\
	shift-F11 = F8 (step out)\
\
	Debugging Panels\
		Debug Navigator (default left side)\
			threads, stacktrace (called backtrace in Xcode), disk/memory/cup usage		Variables View (default lower left): has lower dropdown to pick auto vs. locals\
		Console (default lower right): lldb console where you can enter commands (eg. p x to print the value of x)\
			If missing, do View -> Debug Area -> Active Console\
			also where you look for output during or after program is run (print() commands) [clears itself when program starts]\
		Breakpoint Navigator (can be selected on left side in place of Debug Navigator)\
\

\fs36 Breakpoints
\fs24 \
	breakpoints: look like blue bookmarks in Xcode (not red dots)\
	cmd-\\: set or clear breakpoint\
	click in empty space in left column: set breakpoint or disable (not delete) existing one\
	right-click breakpoint: options like Delete\
	cmd-y: toggle all breakpoints on/off\
	conditional breakpoint: right-click a breakpoint and add a condition to it just like VS\
	debug output: can right-click breakpoint and tell it to do an lldb debug action (like print) when breakpoint is hit and continue (therefore don\'92t have to put prints into code)\
	special breakpoints: can be created with + in Breakpoint Navigator on left (these can be enabled/disabled just like code ones)\
		error breakpoint: catches swift thrown errors\
		exception breakpoint: catches exceptions that you specify\
	moving instruction pointer: little green plate when you\'92re debugging is the program counter and can be dragged to skip or rerun code\

\fs36 \
View Debugging
\fs24 \
	For debugging complicated views (eg. layout issues)\
\
	Debug -> View Debugging -> Show View Frames\
		Draws lines around views so you can see the separation\
	Debug -> View Debugging -> Capture View Hierarchy\
		Similar to Show View Frames but gives a 3D representation so that you can rotate views around each other to find ones that have been hidden behind others\

\fs36 \
Profiling
\fs24 \
	Xcode ships with a tool called Instruments for profiling performance, memory, etc.\
	Recommended to use physical device since simulator will behave very differently (can choose target in dropdown just like regular running)\
\
	To profile:\
		Cmd-I\
		Choose profile (eg. Time Profiler to profile timing)\
		an Instruments window appears to show you the profiling information\
		To start the actual app (and recording of profiling information), click the Red circle button\
		Use the app\
		Click the stop button in Instruments to stop the app and the recording	Interpreting Readings:\
		Draw range in the graph to restrict what you are shown in the lower panel\
		Can see things in lower panel like which threads use the most CPU (too much on main = not taking advantage of multiple cores)\
		Can drill in to see specific calls (alt-click arrow to open all children)\
	Panels:\
		top half = graph and controls\
		bottom half, left side = Detail View\
		bottom half, right side = extended panels\
			Record Settings\
			Display Settings\
				affects how the other panels display\
				Invert Call Tree = show call tree bottom up\
				Hide System Libraries = don\'92t show Apple stuff\
			Extended Detail\
				shows heaviest stack trace (calls that took most time in selected thread)\
	Profilers:\
		Time Profiler:	for analyzing time taken by various calls\
		Core Animation: for analyzing FPS (ideally want 60 unless app not doing anything)\
					various display settings for things like visible vs. invisible views, offscreen views, and image caching\
		Allocations: for tracking allocations, leaks, etc.\
	General Tips:\
		profile on real device (slowest you support)\
		fix one thing at a time and re-profile so you know you\'92re actually fixing the right thing\

\fs36 \
File -> New -> File\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	ios/Cocoa Touch Class: can select what UI class to subclass [subclass list is scrollable even though doesn\'92t look it] ((or type in your own class))\
	can create an empty file under Other category to make an arbitrary file (eg. .js file) [XCode understands javascript even if you do it this way] ((make sure in Copy Bundle Resources in Build Phases tab of target))
\fs36 \
\
Interface Builder
\fs24 \
	Assistant Editor: lets you see extra information in another pane while editing (eg. controller code for storyboard so that you can drag connections)\
		Preview: in the main dropdown for the Assistant Editor, can select preview to see what the layout will look like on different devices\
			+ to add more devices for a side by side view\
			Double-Length Pseudo Language to see what interface will look like on languages with really long words\
		Manual: can select whatever file you want to see in the pane\
		Automatic: offers files based on what kind of thing you\'92re looking at (eg. controller for the storyboard)\
		Vertical vs. Horizontal: View -> Assistant Editor\
	Adding a scene: drag a view controller to an open space in the storyboard\
		give it a storyboard ID if want to load it from code\
	Adding a scene for your custom view subclass: add a view controller scene and then change the class in Identity Inspector\
	Changing view class\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	1.	}change the class you inherit from in the .swift file for the controller\
{\listtext	2.	}If the controller is all that\'92s in the scene, just delete the old one in the outline (will have empty storyboard) [have to because even if change class of existing one it will not have the right children]\
{\listtext	3.	}Drag a view controller of the type you want into the storyboard to make a new scene\
{\listtext	4.	}Change the class to your class in Identity Inspector\
{\listtext	5.	}In Attributes Inspector, set Is Initial View Controller if it is (this will set the arrow to it)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Using custom class for table view (or collection view) cell\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls2\ilvl2\cf0 {\listtext	1.	}create a new class that inherits from the cell class\
{\listtext	2.	}change the class of the cell prototype in IB with Identity Inspector\
{\listtext	3.	}declare outlets for the controls you put inside the prototype cell\
{\listtext	4.	}In Connections Inspector, drag the empty circles for the outlets onto the controls in IB (instead of to the code)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Wrapping scene in Navigation Controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	1.	}Select the scene (view controller)\
{\listtext	2.	}Editor -> Embed In -> Navigation Controller\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Adding new scene to existing navigation controller\
		Ctrl-drag from the navigation controller to the scene and select the appropriate option (like Root View Controller) in the popup\
	Wrapping scene in Tab Bar Controller\
		***same as for navigation controller (can even combine - probably do navigation controller first and then embed it) but select Tab Bar Controller\
		Select the tab item in IB to change its attributes\
	Finding Controls: object library window in lower right, search for regular name instead of class name (eg. Navigation Controller)\
		NOTE: controllers in object library aren\'92t just from UIKit (eg. map views are there)\
		NOTE: there isn\'92t necessarily a 1-1 correspondence between classes and object library objects (eg. UIStackView has Horizontal Stack View and Vertical Stack View in library when it\'92s just a property difference)\
	Auto Layout\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}Editor -> Resolve Auto Layout Issues -> Reset to Suggested Constraints: selected control will be set to constraints the system thinks it should (eg. image view to fill view)[pretty good at guessing - give it a try first]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 		Constraints show up in outline\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}Ctrl-drag control/view somewhere else to create constraint based on that (eg. the view controller or another control)(direction matters) and release to see menu about what constraints to create.  Shift-select if want multiple.  Click Add Constraints\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}Constraints can be found either in outline mode or (sometimes only) in Size Inspector\
{\listtext	\uc0\u8259 	}in the constraints, you can set constant offsets, ratios, etc., change comparison from equal to less than or equal, and stuff like that [useful for setting minimum spacing]\
{\listtext	\uc0\u8259 	}can also see the constraints when you click on a control (clicking the constraint will select it in the outline)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}lines with numbers for distances, ratio for aspect ratio, equality symbol for equal, etc.\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}Selecting constraint in outline allows you to view its data in the Attributes Inspector\
{\listtext	\uc0\u8259 	}too many constraints can do things like squish your images\
{\listtext	\uc0\u8259 	}another useful one is selecting \'93Equal Heights\'94 when you ctrl-drag (to specify two things should have same height)\
{\listtext	\uc0\u8259 	}drag within same object to specify things like Aspect Ratio [will default to current value]\
{\listtext	\uc0\u8259 	}constraints may cause squishing, changing of sizes, etc. of images (can control that with constraints)\
{\listtext	\uc0\u8259 	}can add constraints by diagonally dragging inside the object itself (eg. to constrain height, width, aspect ratio to their current values)\
{\listtext	\uc0\u8259 	}Pin Menu (3rd of 4 auto layout assisting buttons next to the View As portion)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}another way to add constraints for an element based on its neighbors\
{\listtext	\uc0\u8259 	}might see warnings about ambiguous layout which should go away when you do Update Frames\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}There is also an Update Frames button down there before the 1st item\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}If you don\'92t see an update, do Editor -> Resolve Auto Layout Issues -> Update Frames (with all the controls/views you want to update selected)\
{\listtext	\uc0\u8259 	}Sometimes there are constraints you can only see in Size Inspector but not in outline (eg. aspect ratio)\
{\listtext	\uc0\u8259 	}Can also add constraints by layout button in bottom right corner\
{\listtext	\uc0\u8259 	}also can ctrl drag within the document outline to the object you want to constrain something inside (gives more options because not directional)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}can drag from outline to storyboard or vice versa, or within outline\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: another thing to know for making adaptive layouts is to use view.frame.width and view.frame.height in the view controller to get the size at runtime (eg. in viewDidLoad)\
{\listtext	\uc0\u8259 	}Orange dashed line shows you where your view will be when the app runs (if you haven\'92t updated frames yet)\
{\listtext	\uc0\u8259 	}Adaptive UI: besides the normal Auto Layout stuff, you can have fully adaptive layout that does things like choosing between vertical and horizontal stacking depending on orientation\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i size class
\i0  - two axes, compact and regular vs. horizontal and vertical\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}compact and regular apply to each dimension\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls5\ilvl4\cf0 {\listtext	\uc0\u8259 	}compact = constrained space, regular = expansive space\
{\listtext	\uc0\u8259 	}height vs. width is a different dimension depending on orientation (synonymous w/ vertical and horizontal) [eg. height is the small one in landscape but the big one in portrait]\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}can adapt to it in code by implementing 
\i traitCollectionDidChange()
\i0  method in view controller\
{\listtext	\uc0\u8259 	}iPhone 6 Plus (and I assume 7 Plus) = long dimension is regular, short dimension is compact (based on orientation)\
{\listtext	\uc0\u8259 	}iPhone = always compact except for height in portrait (for landscape both dimensions are compact)\
{\listtext	\uc0\u8259 	}iPad fullscreen app = both dimensions regular\
{\listtext	\uc0\u8259 	}iPad multitasking = height is always regular\
{\listtext	\uc0\u8259 	}iPad multitasking = width is compact except for a landscape slide-over if you\'92re the big app (70/30)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i dynamic type
\i0  - technology for handling text size/formatting based on user preferences\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}user specifies preferences in Settings and then apps that are Dynamic Type-aware will respect it\
{\listtext	\uc0\u8259 	}properties/methods of classes (eg. UIFont.preferredFont(forTextStyle:)\
{\listtext	\uc0\u8259 	}can respond to changes of user preferences while app is still running via NotificationCenter\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}TIP: when auto layout constraints are generated, they are based on the current stuff (so for instance, you can generate it in iPad view for aspect ratio if you like that ratio for iPhone as well)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Adding Outlet\
		Ctrl-drag a control onto source code where you want the outlet declaration and use the box that pops up to configure name, type, etc. (use Assistant Editor)\
		Will see a filled circle that can be clicked to see where it connects\
		Outlet can be treated like the control itself because it will be populated by the time the view loads\
		NOTE: outlets are useful outside of the class too (eg. so you can set the text label from the outside)\
		NOTE: can add a view controller that handles a view as the delegate for a control in the view by ctrl-dragging to the orange \'93view controller\'94 symbol at the top of the view in IB\
	Adding Outlet Collection\
		Outlet collection is an array of outlets\
		To create one, drag the first thing and then select Outlet Collection from the dropdown\
		Then drag each one in order to the outlet collection until a blue box with a popup of \'93Connect Outlet\'94 comes up and release it\
		WARNING: You cannot shortcut this by dragging all at once, either before or after the collection creation.  You have to do them one by one or only the first will be seen\
	Adding Action\
		Ctrl-drag a control onto source where you want the action method and use the box that pops up to configure name, type, etc. (use Assistant Editor)\
		Can select from multiple events to wire up an action\
		Will see a filled circle like with outlets\
		To reuse the same action for other controls, ctrl drag them to the method until the whole method turns blue (not blue circle) w/ a \'93Connect Action\'94 popup [can use tag to distinguish]\
		In Code: call addTarget() method with a selector\
		WARNING: selecting and dragging multiple controls at the same time will not work, you have to do it one by one (or else only the first will be used)\
	Attributes\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}@IBOutlet: tells Interface Builder the declaration is an outlet (generally weak reference because storyboard owns the object)(generally ! because it\'92ll be there by the time the view loads)\
{\listtext	\uc0\u8259 	}@IBAction: tells Interface Builder the method is an action that responds to an event from a view in the UI\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Copying Controls\
		cmd-c and stuff like that OR\
		alt-drag (sometimes only way that works)\
		can copy and paste groups as with other programs\
	Points\
		sizes and positions are given in points\
		points are pixels on non-retina (1x)\
		points are 2 pixels wide on retina and 3 pixels wide on retina HD\
		allows points to be about same size on all devices\
	Bypassing storyboard view (eg. in browser example)\
		override 
\i loadView
\i0  to customize which view actually gets loaded\
		set 
\i view
\i0  member of view controller instance to an instance of the view you want to attach the controller to\
		set 
\i delegate
\i0  also if applicable\
	Custom View Controllers\
		can create a subclass of a view controller\
		can add a storyboard scene for it (or add it to a view) by adding the base one and then changing the class in Identity Inspector\
		alternatively, to do the view without storyboard, you can just instantiate it and set up all the UI in code (implement loadView() to handle creating and wrapping a view)\
		NOTE: changing title of custom view controller that has been presented, pushed, etc. will change the title of the window\
	Inspectors\
		support multi-editing (select multiple views and make a change)\
		Size Inspector: contrary to name, also does stuff like coordinates (also does stuff like cell size of UICollectionView)(margins too)\
	Placing\
		can use inspectors, mouse, or array keys\
		arrow key = 1 point (blue lines still appear to help guide as needed)\
		remember that things that hold text also have fonts, alignments, text colors, etc.\
	Z-Order\
		Editor->Arrange->Send to Front (or Send to Back, etc.) with an item selected can change its order [although this often greys itself out for no reason]\
		Also, can drag things in document outline to change the order (lower = more front in z-order)\
		NOTE: can also show/hide controls to reveal the ones beneath at runtime\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Custom Control\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	When to do custom view controller: tutorial did one because it wanted to make a gesture recognizer for each instance\
	\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1\cf0 {\listtext	1.	}Subclass existing control, UIView, or UIViewController\
{\listtext	2.	}If extending something existing or UIView, drag it to IB and then change the class in Identity Inspector.  If extending UIViewController (or if not going to use IB), create the controller in code\
{\listtext	3.	}If extending view controller, use view containment and add the view and any other views it maintains to the appropriate parent view (even if counterintuitive)\
{\listtext	4.	}If doing in code, position appropriately (use view member if extending UIViewController)\
{\listtext	5.	}To have the control support Interface Builder (instead of just being created in code), add the @IBDesignable to the class\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls7\ilvl2\cf0 {\listtext	\uc0\u8259 	}the control will be instantiated at design time and updated as you change properties so you can see what it looks like\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1\cf0 {\listtext	6.	}If you marked the class as @IBDesignable, mark any properties that should be exposed to IB as @IBInspectable\
{\listtext	7.	}Override appropriate methods and properties (eg. the drawing one that gets given commented out as default, layoutSubviews, layerClass, etc.)\
{\listtext	8.	}To use in IB, draw a UIView into the storyboard and then change its class to your custom class.  Then set properties as appropriate.  The ones you marked should show up under a section named after your class.\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls7\ilvl2\cf0 {\listtext	\uc0\u8259 	}IB is smart enough to turn topColor into Top Color and things like that\
{\listtext	\uc0\u8259 	}in my testing the property changes did not take effect (why???)\
{\listtext	\uc0\u8259 	}Can make outlets, etc. as normal\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
Scene Editor\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	SpriteKit equivalent of Interface Builder\
	A lot of things are very similar but a bit different (eg. inspectors are still here but they use different icons and slightly different behavior for some things)\
	\
	Coordinates/Sizes\
		Y coordinates are from bottom up instead of top down like normal\
		tutorial uses 1024x768 for an iPad app\
	Anchor Point\
		accessed via Attributes Inspector\
		Sets the point in the scene that is used as the origin for child nodes (0, 0 will make it bottom-right while 0.5,0.5 will make it center)\
	Gravity\
		Can set that here too (default is 9.8 m/s/s)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Particle Editor\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	Loaded when you select a .sks file representing particle effects (such as in your resources)\
	Preview of the particle animation on the left and inspectors on the right\
	Maximum Bug\
		tutorial says there may be a bug where you won\'92t see anything unless you set Maximum to 0 (then set it back when you\'92re done) -> so far I have not run into it\
	What Particle Systems Can Do (Wikipedia Quote)\
		\'93Examples of such phenomena which are commonly replicated using particle systems include fire, explosions, smoke, moving water (such as a waterfall), sparks, falling leaves, rock falls, clouds, fog, snow, dust, meteor tails, stars and galaxies, or abstract 		 visual effects like glowing trails, magic spells, etc. - these use particles that fade out quickly and are then re-emitted from the effect's source. Another technique can be used for things that contain many strands - such as fur, hair, and grass - involving 		 rendering an entire particle's lifetime at once, which can then be drawn and manipulated as a single strand of the material in question.\'94\
	Templates\
		File -> New File -> choose Resource -> SpriteKit Particle File\
		can use a built-in template as a starting point and then tweak the .sks file in Particle Editor as desired\
	Settings\
		see p. 348 of Hacking with Swift (or probably an online resource) for descriptions of the settings\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Playgrounds
\fs24 \
	Create from the start screen: creates a single folder (which acts like a file in a lot of ways)(contains xcplayground and swift file, plus a workspace file you don\'92t need to check in) (so make a folder for it if desired)\
	Like a code file that continuously runs and shows results in right pane\
	Opening from command line: open playgroundname.playground\
	Auto-saves as you go, so if you do cmd-s you\'92ll get an error about already existing\
	if red error shows up or text goes grey in output, something is wrong and the code hasn\'92t run\
	Can resize the output pane, click eye to show message in popup, click + to show output inline with code (with multiline print operations you can right-click to switch between last value and value history)\
\

\fs36 Project Types
\fs24 \
	Single View Application (UIKit app)\
		Default app just has blank white screen\
		Storyboard w/ single scene (edited by Interface Builder)\
		AppDelegate swift file\
		ViewController swift file\
		Assets folder\
		Info.plist (key-value configuration)\
		*some others?\
	Action Extension: extension for apps like safari extensions (generally must be embedded as a separate target within an app)\
		ActionViewController.Swift: a UIViewController subclass with some default code in it\
		MainInterface.storyboard: default UI for the extension that has navigation bar and image view (and layout constraints) [both can be deleted - default navigation bar is terrible and you might want to do navigation same way as normal apps instead]\
			if you delete the navigation bar item, the 
\i done
\i0  action will be orphaned, but you can reuse it in your own navigation bars\
		Info.plist (same as usual): has NSExtension fields\
	Watch Kit App: pick under watchOS\
		Gives you 3 folders (which are also each their own target)(only 2 of them are schemes for building/running though)\
			-1 is just your norma iOS app (like a Single View Application template project) [which has a reference to the WatchKit app]\
			-1 is watchkit app [which has a reference to watchkit extension]\
			-1 is watchkit extension\
	Game: starting point for a game (lets you select the base technology such as SpriteKit or SceneKit)\
		Default app has grey screen with \'93Hello, World\'94 and you can click and drag to animate loopy things of different colors (frame rate in lower right corner)\
		AppDelegate swift file (basically same as regular app - still uses UIKit)\
		Storyboard w/ single scene (still)(presentation set to Full Screen)\
		GameViewController swift file (the view controller used by the storyboard)\
			unlike in ordinary apps, this view controller has a lot of code in it already (to create and set up the scene mostly)\
			can take out the two lines that add the FPS and node counts in here\
			scene can be accessed by casting view to SKView and casting scene to your scene class (eg. GameScene)\
		GameScene.Swift\
			also contains a lot of code (the tutorial blows it all away)\
			this is the main class to start editing (roughly equivalent to the view controller for a UIKit app even though you have one here)\
		GameScene.sks (edited by Scene Editor)\
			tutorial uses 1024 x 768 for iPad games and 375 x 667 for iPhone games (default of aspectFill used for both)\
			tutorial sets anchor point to 0,0 so that it will be measured from bottom-left corner\
		Actions.sks? (deleted in tutorial so not sure what it is)\
		Assets folder (pre-populated with a spaceship - you can delete it)\
		Info.plist\
		*some others same as UIKit apps?\
		Resetting to Vanilla State: delete spaceship, replace code in GameScene.Swift with just didMove and touchesBegan (empty bodies)(get rid of properties too), delete Actions.sks, remove label from GameScene.sks and set Anchor Point and size attributes (and scaleMode if needed), remove FPS and node counts from view controller\
\
		Using UIKit controls within the game:\
			-give the scene a weak reference to the view controller (if needed) and the view controller a strong reference to the scene (since the scene is already implicitly/indirectly owned by the controller)\
			-set both properties in controller\'92s viewDidLoad just after presentScene\
			-add controls to the scene above the SKView that hosts the SpriteKit stuff (or contained in the view itself is fine - it\'92ll be rendered on top)\
			-add outlets and actions in the view controller to directly deal with the controls and then delegate behavior/values to the scene as appropriate\
			-scene and controller can call each other or access each other\'92s properties/outlets as needed\
	Cocoa Touch Framework\
		dynamic library\
		iOS 8 onwards\
		Swift or Objective-C\
		Add .swift files to it and the ones that are public automatically become available to whoever imports the package\
	Cocoa Touch Static Library\
		iOS 6 onwards\
		Objective-C only\
		***going to ignore this for now until Swift supports it\
	Library\
		C/C++ type stuff (not Swift and Objective-C)\
	Command-Line Tool (macOS)\
		main.Swift: the file that gets executed when the cmdline tool is executed (default prints a message)\
		*whatever you print would normally go to terminal: when you debug it will go to debug console as normal\
		*when input is solicited, click into the debug console and pretend it\'92s a normal terminal\
		\
		execution is much like a playground (top-level, top to bottom, declaration order of types matters to that code - can put declarations before code)\
		print() for output\
			remember can use separator (empty) to make it not use newline at end (eg. to keep printing on same line)\
		readLine() for input [reads stdin until EOF or newline][[user can add newline with enter]]((similar behavior to c++))\
			if user entered anything including enter, this will be a String\
			if user killed with ctrl-d you will get nil here but app will continue\
				you can use this fact to make a loop that keeps requesting more input until user quits\
		exit(n): exit with an exit code (bad in IOS but fine in commandline app)\
		\
		NOTE: the tutorial says there\'92s no need to use this template and can instead just use a .swift file (which you can edit in Xcode, vim, etc.) and run certain cmdline commands to make use of it\
		Command-line commands:\
			swiftc main.Swift:		compiles Swift file as executable\
			swiftc -O main.Swift:	same but includes optimizations\
			swift main.Swift:		makes temporary executable and runs it (as if scripting language)\
\
	\ul Things to do when creating any project:\ulnone  check the output device, portrait/landscape, iOS version, device type, and Interface Builder / Scene Editor sizes\
\

\fs36 Project Settings
\fs24 \
	selected by selecting project\'92s node in Navigation area on left\
	Deployment Target: iOS version to build for\
	Device: can select whether to support iPhone, iPad, or both (Don\'92t do universal unless you are really going to deploy for iPads, because some stuff acts differently between iPad and iPhone and it adds complexity)\
	Orientation: can decide which orientations to allow\
\
	Capabilities: to turn certain features on (eg. maps, notifications, wallet, etc.) click on Capabilities tab for the target in the project settings (also checkboxes and stuff you can configure with)\
\

\fs36 Info.plist
\fs24 \
	contains project configuration settings as key-value pairs\
	to add a setting, hover over any row in the key column and click the + icon to add a new row, then select the key from the dropdown and add a value	one useful example is \'93Privacy - Photo Library Usage Description\'94 to give user a reason you need to access the camera (without this the image picker will crash)\
	for location services: \'93Privacy - Location When In Use Usage Description\'94 or \'93Privacy - Location Always Description\'94 depending on which location behavior you want to request\
	double-click in the value cell to add a value for the key\
	can change type (eg. String to dictionary) and then use + to add items to it\
\

\fs36 Supporting iPad Multitasking
\fs24 \
	Supported since iOS 9\
	2 modes: dividers vs. slide-over\
	Works by default if you pull up other apps\
	Steps to Ensure Full Support:\
		1. Have a launch Xib (probably already do as part of your project)\
		2. Support all orientations\
		3. Use Auto-Layout\
		4. use Adaptive UI (Size Classes and Dynamic Type)\

\fs36 \
Xcode Hierarchy
\fs24 \
	Workspace = like a Visual Studio solution (contains multiple projects/apps/libraries)\
		all projects in a workspace share an output directory\
		a project can belong to multiple workspaces\
		project settings and files are independent of the workspace (eg. can remove it from workspace without affecting the project itself)\
		dependencies should be detected automatically (eg. if you refer to another project in the same workspace, it should automatically get built when you build)\
		you can have a shared library in multiple workspaces rather and the changes will be shared between them\
		an online resource claims that it doesn\'92t make sense to put unrelated projects in the same workspace even if they share common libraries\
		.xcworkspace file (don\'92t place files under this)\
	Project = a single library or app (like a Visual Studio Project)\
	Target = a build of a project (eg. can have targets for free and paid versions, Mac and iOS versions, etc.)\
		Many of the settings thought of (and described in this doc as) project settings are actually target settings\
		Scheme = all the settings like running, debugging, profiling stuff\
			can have multiple schemes in the same target\
\

\fs36 Creating/Managing Workspace
\fs24 \
	Creating a new workspace\
		File -> New -> Workspace, pick a folder (might want to make one manually if putting projects in it because this will only create .xcworkspace file) and name\
	Creating a new Project in a Workspace\
		File -> New -> Project, pick a folder (eg. the parent folder of the .xcworkspace file, it may try to trick you) and name, select the workspace in the bottom of the dialog (select the right group too as it may try to trick you)\
	Adding an existing project to a workspace\
		Within the Project Navigator (top level), right-click and select Add Files option, navigate to and select the xcodeproj file\
		This will add the project to the workspace (by reference)\
	Selecting the current project for building and debugging\
		Select the project in the toolbar to the left of where you select the device\
		hotkey: ctrl-command-[ and ctrl-command-] to cycle\
	Project Dependencies\
		If you manually build a library in the same workspace and then reference it from another project by importing and using the types, it will magically work, but it won\'92t build the dependency automatically later\
		To set up the dependency formally so building the dependency will happen automatically, go to project settings (target -> General tab), add it in linked frameworks and libraries at the bottom\
		To access the library within your module, import the library by name\
		TARGET dependencies can be set in the Build Phases tab (dependencies to other targets in your project)\
\

\fs36 Release Mode
\fs24 \
	the default for building and running is Debug mode\
	to switch to release mode without profiling or anything, select Product -> Scheme -> Edit Scheme and change the Run configuration to Release and not debug executable\
	This changes where the binaries are linked from in the project navigator (and in theory should change what\'92s deployed on devices)\
	Someone online suggested duplicating the scheme and making one be debug and the other release, so that you don\'92t have to edit the scheme to switch\
	Running in profile mode (cmd-i) also uses release, but it makes you pick a profiler and then profiles the app (see Profiling section)\
\

\fs36 Archiving
\fs24 \
	Archiving creates an app bundle (release mode, signed) that is ready for distribution\
	To archive:\
		1. set the target device to generic ios device (build only target)\
		2. click Product -> Archive\
		3. the Archives window will pop up showing the archives you have (including the one you just made)\
		4. You can deal with it now or close this window and come back later\
	To see and take action on your archives: Window -> Organizer (Archives tab)\
	From the Organizer you can export, submit to iTunes, etc.\
\

\fs36 Submitting to App Store
\fs24 \
	Guidelines: {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/app-store/review/"}}{\fldrslt https://developer.apple.com/app-store/review/}}\
	Things to Make Sure: you have signing/provisioning set up properly, you have tested on physical devices, you have tested on minimum supported things in simulator, you have app icon and splash image, you have profiled with Instruments in lowest device you support\
	iTunes Connect will be your portal for what\'92s happening on the app store with your stuff\
	Steps:\
		1. Create an archive ready to be released to the app store (see above)\
		2. On iTunes Connect website, click Manage Your Apps\
		3. Click \'93Add New App\'94 and fill in fields (skew is for your own purposes)\
		4. Set availability date and pricing info\
		5. Fill in all the other metadata (version should match the binary)\
		6. click the Ready for Upload blue button and answer questions (status should change from Prepare for Upload to Waiting for Upload)\
		7. Use the Upload to App Store button in Xcode Organizer, after validation/uploading, status should now be Waiting for Review\
		8. You\'92ll get an email when the app enters review (a few days to a couple of weeks)\
		9.  If it fails, fix what they tell you and submit with a new version number\
		10. If it passes, it should appear on the app store on the availability date\
		11.  Use iTunes Connect to monitor your app\'92s performance\
	Updating existing app: use iTunes Connect to add a version to the app and then go through a similar process for the rest of it\
		The update will go through a review but it should be quicker than the initial version\
\

\fs36 Line numbers
\fs24 \
	can turn on Xcode menu Preferences -> Text Editing \
\

\fs36 Adding Assets
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\'95	}Directly into project hierarchy: get built into the final .app bundle (loose files in resourcePath of bundle)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Drag folder from desktop or Finder into Xcode and tell it to copy the files and create folders\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}*the files are tracked as assets but they don\'92t show up in the assets node in Navigation panel\
{\listtext	\uc0\u8259 	}can drag individual files, text files, etc. too (will be prompted for whether to copy the files in)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}In Assets.xcassets manually\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}right-click and crate a new image set\
{\listtext	\uc0\u8259 	}drag in an image file to the appropriate bucket (1x, 2x, 3x) [see Packaging section for explanation of sizes]\
{\listtext	\uc0\u8259 	}Refer to image by image set name in code and the right size one will automatically be used (image can still be resampled a bit based on size changes of controls)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}In Assets.xcassets automatically\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}Create images where the 2x and 3x ones are exactly double and triple the dimensions and have @2x and @3x at end of filename\
{\listtext	\uc0\u8259 	}Select all the images and drag into the assets outline\
{\listtext	\uc0\u8259 	}Image sets automatically created with slots filled -> can use them in code as the image set name and right size will be used [see Packing section]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Texture Atlases (possibly more efficient loading for games)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}a texture altas is a folder called Assets.atlas in your project (containing images as usual, with diff resolutions etc. as always)\
{\listtext	\uc0\u8259 	}should only contain images, not things like sounds or particle effects\
{\listtext	\uc0\u8259 	}all the images get stitched together when you build (separated by 1x, 2x, 3x) and loaded/cropped/rotated as needed by the system\
{\listtext	\uc0\u8259 	}atlas remains loaded and can be accessed by system quickly at any time\
{\listtext	\uc0\u8259 	}access the assets within the atlas by name just like with normal assets\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Device Specs\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}Retina = 200 range PPI, non-Retina = 100 range PPI, Retina HD = 300-400 range PPI (cut pixels in half for retina and in third for retina HD to get points)\
{\listtext	\uc0\u8259 	}iOS 9 = where most of the cool stuff in tutorial started (41% user base in 2016), iOS 10 = full compatibility with tutorial (55% user base in 2016), other versions = <5% user base in 2016\
{\listtext	\uc0\u8259 	}iPhones Supported by iOS 10 ((user base is still spread out amongst them due to size of 6 and above))\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}iPhone 5 - 1136 x 640, Retina HD [~7:4 aspect ratio (taller than 4S)]\
{\listtext	\uc0\u8259 	}iPhone 5S/5C - same as iPhone 5 [5C is the lower speed of the two] ((1st iPhone to diverge within same year))\
{\listtext	\uc0\u8259 	}iPhone 6 - 1334 x 750, Retina HD ((physical size jump)) [a little taller aspect than 5]\
{\listtext	\uc0\u8259 	}iPhone 6 Plus - 1920 x 1080, Retina HD [16:9 aspect, in between 5 and 6]\
{\listtext	\uc0\u8259 	}iPhone 6S/6S Plus - same as 6/6 Plus\
{\listtext	\uc0\u8259 	}iPhone SE - same resolution as 5S, same internal specs as 6S\
{\listtext	\uc0\u8259 	}iPhone 7/7 Plus - same as 6/6 Plus\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}iPhones Supported by iOS 9\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}all the ones supported by iOS 10 (except 7/7 Plus which shipped with 10)\
{\listtext	\uc0\u8259 	}iPhone 4S - 960 x 640, Retina HD [3:2 aspect]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}iPod Touch\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}not a device type in Xcode (follows iPhone rules)\
{\listtext	\uc0\u8259 	}no simulator\
{\listtext	\uc0\u8259 	}6th generation = only one supported by iOS 10 (specs of iPhone 6 but underclocked, display of iPhone 5)\
{\listtext	\uc0\u8259 	}5th generation = only one supported by iOS 9 (specs of iPhone 4s, display of iPhone 5)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}iPads Supported by iOS 10\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}PATTERN: all except iPad Pro 12.9 Inch have same pixel resolution but minis are shrunk physically and therefore become \'93HD\'94\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls10\ilvl3\cf0 {\listtext	\uc0\u8259 	}also only the minis are Retina HD (even the big pro is not)\
{\listtext	\uc0\u8259 	}the minis are most comparable to the pluses in the iphone range (but still bigger and not same aspect ratio)\
{\listtext	\uc0\u8259 	}aspect ratio of all iPad models is 4:3 (more square than all Iphone models)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}iPad 4th Generation - 2048 x 1536, Retina\
{\listtext	\uc0\u8259 	}iPad Air (next model after 4th generation) - same as 4th generation\
{\listtext	\uc0\u8259 	}iPad Air 2 - same as 4th generation\
{\listtext	\uc0\u8259 	}iPad Mini 2 (released same time as iPad Air, has same internal specs) - 2048 x 1536, Retina HD [same pixels as 4th generation but smaller and therefore more dense]\
{\listtext	\uc0\u8259 	}iPad Mini 3 = just an iPad Mini 2 w/ TouchID and more storage (hardware, resolution, etc. all same)\
{\listtext	\uc0\u8259 	}iPad Mini 4 - same as iPad Mini 2 (but hardware upgraded this time)\
{\listtext	\uc0\u8259 	}iPad Pro 12.9 Inch (released after iPad Mini 4, much better hardware and fancy new screen technologies) - 2732 x 2048, Retina (not HD!)\
{\listtext	\uc0\u8259 	}iPad Pro 9.7 Inch (released after 12.9 Inch, same specs) - same resolution as iPad 4th Generation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}iPads Supported by iOS 9\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}all the ones supported by IOS 10 except where they shipped with iOS 10\
{\listtext	\uc0\u8259 	}iPad 3rd Generation - same as 4th Generation\
{\listtext	\uc0\u8259 	}iPad 2 - 1024 x 768, non-Retina(!!!)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}TouchID Support\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}iPhone 5S and above (not the smaller 5C)\
{\listtext	\uc0\u8259 	}iPad Air 2\
{\listtext	\uc0\u8259 	}iPad Mini 3 and above\
{\listtext	\uc0\u8259 	}iPad Pro (both)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}Siri Support\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}all above devices except for iPad 2 (features depend on OS)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}File Formats\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}Image\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}png - lossless (but still compressed) w/ transparency\
{\listtext	\uc0\u8259 	}jpg - compressed w/out transparency\
{\listtext	\uc0\u8259 	}gif - compressed w/ transparency\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}Sound\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}caf - AIFF file (like wave)\
{\listtext	\uc0\u8259 	}mp3\
{\listtext	\uc0\u8259 	}m4a\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
NOTE: assets can also be text files (eg. configuration data or level data for a game), sks files, audio files, etc.\
NOTE: can often leave off the extension of an asset (saw this with at least png files in tutorials)\
NOTE: for images with transparency like png, the transparency should be respected\
NOTE: you can load copies of the same image (it might be smart enough to cache it for you)\
NOTE: you should try to have images that are only as big as you need because images take up a lot of space in memory (have to be uncompressed, etc.)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 App Icon
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\'95	}Human Interface Guidelines from Apple has size reference table\
{\listtext	\'95	}Use png to make it lossless\
{\listtext	\'95	}Need to create multiple sizes of the same image (eg. by taking a bigger (or vector) image in Photoshop or Illustrator and \'93saving for web\'94 multiple times) [also online tools to resample but not ideal]((may want to make an action or something))\
{\listtext	\'95	}Click on the AppIcon entry in the assets folder in your project and it will show you all the icons you need to add (eg. by dragging and dropping onto the squres)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}organized by the use for the icon\
{\listtext	\uc0\u8259 	}to get the sizes, multiple the \'93point\'94 value by the multiplier (eg. 2x or 3x) to get the pixel dimension (all square)\
{\listtext	\uc0\u8259 	}organized from smallest to largest, and you will get a warning if you put in the wrong size\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\'95	}Can test it in simulator (notifications, home screen, etc.)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Adding Modules
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\'95	}To add a .swift file to your project directly, drag it in and select \'93copy if needed\'94 in the popup\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Packaging
\fs24 \
	Bundle: .app file which is actually a folder with binary, assets, metadata, layouts, etc.\
	Assets: loose assets and xcassets handled same way, just refer to by image (or image set) name\
		For xcassets, 1x size is loaded for non-retina, 2x for retina, and 3x for retina HD\
		App store is able to prune off the unneeded ones before user downloads it\
	NOTE: in my experimenting xcassets are not in the package folder and cannot be loaded from the file system or enumerated (not sure what\'92s going on there)\
\

\fs36 Extensions
\fs24 \
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}must ship inside a project that has a normal app (often used for help and/or settings)\
{\listtext	\uc0\u8259 	}to create the extension part: File -> New Target -> Action Extension (under Application Extension) and give it a name (like Extension) (choose whether presents interface)\
{\listtext	\uc0\u8259 	}this creates a new target and a new scheme for that target (which you can \'93activate\'94 to make it the default for building and running) inside the same project\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls13\ilvl3\cf0 {\listtext	\uc0\u8259 	}also has its own folder in the Navigation panel\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}see Project Types above for a description of the files that you get when you create this (there is a fair amount of complex code)\
{\listtext	\uc0\u8259 	}see UIViewController.extensionContext property in cocoa Touch doc\
{\listtext	\uc0\u8259 	}default template app handles images (and has more complicated code than tutorial showed for filtering them out)\
{\listtext	\uc0\u8259 	}to change what kind of data the extension accepts, go to Info.plist and change NSExtension->NSExtensionAttributes->NsExtensionActivationRule\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls13\ilvl3\cf0 {\listtext	\uc0\u8259 	}for example, to make it accept web pages (eg. Safari extension), change NSExtensionActivationRule to dictionary and add key NSExtensionActivationSupportsWebPageWithMaxCount with value 1 (can be string)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}to have a Javascript file form your app bundle executed when the extension is called:\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls13\ilvl3\cf0 {\listtext	\uc0\u8259 	}add key 
\f2\fs32 \cf2 \expnd0\expndtw0\kerning0
NSExtensionJavaScriptPreprocessingFile 
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 to NSExtensionAttributes with a value of the name of the .js file without the extension (eg. Action for Action.js)\
{\listtext	\uc0\u8259 	}the javascript is expected to have certain stuff defined so that it is properly callable\
{\listtext	\uc0\u8259 	}WARNING: make sure the JavaScript is under Copy Bundle Resources in Build Phases tab of target (rather than Compile Resources)\
{\listtext	\uc0\u8259 	}NOTE: this is useful to have data passed into your extension (by running the javascript which sends that data in) [see JavaScriptExtension project for how]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}must call completeRequest() to end the extension and return control to the parent\
{\listtext	\uc0\u8259 	}can use things like UserDefaults as if any other app\
{\listtext	\uc0\u8259 	}\ul Running Extensions\ulnone \
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls13\ilvl3\cf0 {\listtext	\uc0\u8259 	}when you run the extension, the simulator will be launched and you\'92ll be prompted about which app to launch\
{\listtext	\uc0\u8259 	}when you launch the app and have data to send, click the action button (up arrow) and find the extension (may need to swipe and/or use More button)\
{\listtext	\uc0\u8259 	}can select Done when you are ready to dismiss the extension (although it has already executed before then)\
{\listtext	\uc0\u8259 	}anything you print will go to XCode debug console, but so will a bunch of useless warnings you don\'92t need to worry about\
{\listtext	\uc0\u8259 	}XCode will remember recent applications used for extensions and show at top\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}\ul Deploying to Devices\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls13\ilvl3\cf0 \ulnone {\listtext	\uc0\u8259 	}when you run the extension on the phone, it will be available through the app you run after you disconnect, but not other apps\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 REPL
\fs24 \
	Run \'93swift\'94 from command line to get a REPL [use ctrl-z to exit it]\
\

\fs36 Simulator\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	NOTE: Don\'92t adjust difficulty of game or usability of app purely based on simulator because physical device is very different (need to test on at least 1 physical device)\
	NOTE: even weak iPhones or iPads are much faster and smoother than simulator in terms of animations, graphics, etc. because simulating takes a lot of resources from your Mac\
	NOTE: size of simulator on screen is not 1:1 with physical devices but you can scale it integral amounts with the Window menu\
	NOTE: even if you say only iPad or only iPhone for your project, the list of simulators is always the same and it will actually run your app on unsupported hardware if you tell it to\
	WARNING: for big devices, the simulator window may need to be scrolled (if you don\'92t scale it), but there\'92s no indication of this, so if stuff appears cropped, try scrolling with two fingers\
\
	Hardware menu has all the various things you can do (and hotkeys for them)\
	Ctrl and left or right arrows to rotate the device 90 degrees\
	Even stuff like shake, matching touchid, non-matching touchid, applepay, reboot, etc.\
	if onscreen keyboard doesn\'92t show up: go to Hardware menu and disconnect hardware keyboard (can randomly happen)\
\
	Microphone: uses the Mac microphone\
	Speakers: uses the Mac speakers\
	Inspecting Files: if you obtained a file path from the system such as the Document directory for the app, try printing it and using it (without the file:// part in front) in Finder to see the files (even after Simulator quit)\
\
	To Swipe: click near edge of screen and drag across\
	Pinch Zoom: hold alt and a virtual finger moves in opposite direction of what you do with the mouse (while clicked)\
	Shake: ctrl-cmd-z\
	Lock: Cmd-L\
	Home: shift-cmd-h\
	Motion: there is currently no direct way (you have to provide a hack such as in the MarbleMaze project)\
	Biometrics/TouchID: TouchID menu of simulator Hardware menu has options to enable (toggle) TouchID support, and to give good and bad touches when prompted\
		NOTE: the system remembers whether it was enabled before, so the toggle state is not a simple enable flag (there in case you need to flip the state from where it is)\
\
	To Set State (eg. Allow or Don\'92t Allow Clicks): Reset Content and Settings (in the simulator menu)\
	SETTINGS: the settings apps on simulated devices differ from the real ones because they are meant to help with testing (check them out)\
\
	When you upgrade Xcode, it has an expectation of testing on the latest iOS version, so every time you run a simulator for the first time after upgrade, it will upgrade iOS on the simulator (can download the old one(s))\
	Each hardware/OS combination is an independent simulator with its own state\
	\ul Installing Other iOS Versions\ulnone : Under device/simulator dropdown, click \'93Download Additional Simulators\'94 (download the versions of iOS you want to test on)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 	Debugging on Other iOS Versions\ulnone : if you have the default setting in your project of the latest iOS version, you will only see one of each device, but if you support an older iOS version, you\'92ll see the combinations in the dropdown\
	\ul Device Order\ulnone : the order in the menu is mostly in spec order but not strictly so (eg. iPad Retina is below iPad Pro and iPhone SE is below iPhone 7 Plus) [probably just alphabetized]\
	\ul Launching to Home Screen\ulnone :\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls14\ilvl1\cf0 {\listtext	\uc0\u8259 	}Xcode -> Open Developer Tools -> Simulator\
{\listtext	\uc0\u8259 	}alternatively, right-click in the dock and Open Developer Tools -> Simulator [Xcode does have to be already running for this option to show up]\
{\listtext	\uc0\u8259 	}to change which device gets launched for next time (and to reload this time), once simulator is running, go to Hardware -> Device and pick the iOS/device combination you want\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	\ul Other Configuration\ulnone :\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}you can add/configure/delete simulators via menus too\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 APPLE DEVELOPER
\fs24 \
	developer.apple.com\
	ok to plug iPhone into MAC iTunes (will load it but not take control or format or anything)\
	need to register device(s) in web interface (uuid from iTunes, click on serial number and it will change to uuid)\
	to get uuid of macbook go to apple menu -> about this mac -> System Report\
	click \'93Fix\'94 under Identity provisioning error after all this is done\
\
	to run on iPhone: connect phone with usb cable and select it as the simulator target in the toolbar (the app will be installed and executed) [the app is still there and runnable after you disconnect]\
\
	Organization Identifier: usually made of your website in reverse (eg. com.jarofgoblins) [needs to be valid for shipping to app store]\
\

\fs36 CloudKit
\fs24 \
	included for free with developer account with limits:\
		10 GB assets\
		100 MB database\
		2 GB per month\
		40 requests/second\
	Not sure but tutorial seems to indicate these are PER APP\
	If you store in private CKDatabase instead of public one, the storage gets taken out of the user\'92s iCloud quota instead of your CloudKit quota\
	Once you exceed limits, you can buy more storage, transfers, etc. (so starts out free and scales as you get traffic and money)\
	Enabling in app:\
		in Capabilities tab, enable iCloud and then make sure CloudKit is checked\
		You will be assigned a container for your app\
	Enabling in device:\
		iCloud Drive needs to be enabled and user needs to be logged in (even if only writing to app\'92s CloudKit storage)\
	Dashboard:\
		Log into the CloudKit Dashboard from your developer.apple.com account (not iTunes connect) to see what data is in there (eg. for testing), quotas, etc. for each app\
		When you submit a record type for the first time, Apple automatically creates a record type in the dashboard for it\
		To see the actual records submitted, click Default Zone and you\'92ll see a list (can change type in dropdown)\
			can do things like download the binary assets and edit the fields\
			can add and delete records too\
		Can check your quotas and usage by clicking on Usage\
			solid line = actual usage, dashed line = projection\
	Adding DB Data:\
		You can see data submitted through the Dashboard and also add records manually there for testing retrieval\
	Configuring DB Field Behavior:\
		To control which fields (including the ones you added and the ones that are always there) can be used for searching and sorting, select those checkboxes for that record type in the Dashboard\
		To see and configure the built-in fields, expand the \'93Metadata Indexes\'94 down arrow\
		Don\'92t forget to click the Save button!\
	Changing Schema:\
		click X next to a row for a record type to remove it\
		click Add Field to add a field to the schema for a record type\
	Schema Suggestions:\
		Use backward references (child objects point back to the parent) instead of forward references (parent points to its children) for one-to-many relationships\
			This is because you can get conflicts on the parent which are not automatically handled by CloudKit\
\

\fs36 Looking up Constants, Enums, etc.
\fs24 \
	Right-click on an instance in the code and click Jump to Definition to see the list with comments, etc. (even in Apple library code)\
\

\fs36 Push Notifications
\fs24 \
	CloudKit handles them automatically via subscriptions\
	For everything else: ???\
\
TODO HIGH PRIORITY: learn about suppressing the \'93all interface orientations must be supported\'94 error in Info.plist\
TODO HIGH PRIORITY: {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/content/documentation/IDEs/Conceptual/iOS_Simulator_Guide/TestingontheiOSSimulator/TestingontheiOSSimulator.html#//apple_ref/doc/uid/TP40012848-CH4-SW1"}}{\fldrslt https://developer.apple.com/library/content/documentation/IDEs/Conceptual/iOS_Simulator_Guide/TestingontheiOSSimulator/TestingontheiOSSimulator.html#//apple_ref/doc/uid/TP40012848-CH4-SW1}}\
TODO: if image has even height, where is the center and how do you position it?  (SpriteKit)\
TODO: how to deploy to phone quicker (not have to run it?), how to build and test release mode?  how to deploy release mode on phone?  how to submit to app store?  (scheme checkboxes?)\
TODO: How to add tutorial/description text to playgrounds?\
TODO: watches, immediate window, data breakpoints, callstack\
TODO: figure out how to automatically load list of image sets\
TODO: see if 2x and 3x naming tricks work when drag files in directly (and also image loading)\
TODO: make a list of all the different ways you can transition from one view controller to another (purely in code, in storyboard, etc.)\
TODO: understand the Connections Inspector better (eg. polarity of what connecting to what)\
TODO: learn how to do particle effects (get to know the settings) manually\
TODO: what happens if the biggest image you have is 2x and you load on a Retina HD device?\
TODO: other project types when create new project\
TODO: learn Targets in XCode\
TODO: learn all the project settings in XCode (eg. Build Settings, phases, etc.)\
TODO: learn all the details of building, deployment, configurations, archiving, installing, etc.\
TODO: learn Swift package installation (including online package managers)\
TODO: learn the different appliation types in the New Project dialog\
TODO: learn profiling\
TODO: learn iAds (how to get money, how to incorporate into app, etc.)\
TODO: learn how in-app purchases/upgrades work\
TODO: learn how to submit free and premium versions\
TODO: figure out what the backwards url when you make a project is actually for\
TODO: see if more automatic way to import icon images\
TODO: how to select the ios version for each device (or globally)\
TODO: learn how to do splash screen (Launch Image) and observe how often apps actually use it\
TODO: find out how to build all in workspace and how to run all tests in workspace -> also how to build and test all things that refer to a library even if not in same workspace\
TODO: find out how to network between devices (eg. multiplayer game) and how to communicate with web servers\
TODO: find out how to let people create/login to accounts in your app\
TODO: settings (in system preferences and in app itself)\
TODO: notifications (and notification settings)\
TODO: reordering items within tables by sliding with hand\
TODO: slide to reveal delete button\
TODO: custom controls\
TODO: using the camera flash\
TODO: ratings control\
TODO: checkbox, radio button controls\
TODO: see games.txt on desktop for info on making games in app store\
TODO: sound effects (producing sine waves, reverb, etc.)\
TODO: how to rename files?\
TODO: making other types of extensions, installing extensions, setting icon for extensions, etc.\
TODO: look up Swift Package Manager stuff (swift build, touch Package.Swift, etc.) [end of cmdline tutorial]\
TODO: more detail about Dynamic Type: {\field{\*\fldinst{HYPERLINK "http://useyourloaf.com/blog/supporting-dynamic-type/"}}{\fldrslt http://useyourloaf.com/blog/supporting-dynamic-type/}}\
TODO: peer-to-peer network games?\
TODO: making custom control fully support IB and be in an object library?\
TODO: learn all about push notifications\
TODO: check out the Guides and Sample Code Documentation I downloaded through preferences (and document it here, and how I got it)\
TODO: check out the simulator settings apps\
}