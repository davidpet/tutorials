{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid3\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid103\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid203\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160\lin2160 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid403\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid404\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid801\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid803\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\margl1440\margr1440\vieww28600\viewh14980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Menus\
	*holding modifier while looking at menu options might show additional options that use that modifier\
\
Buttons\
	can access menus held in little arrows on buttons by hovering and holding down mouse button\
\
Jump Bar at top of editor = hierarchy down to items within files which are sorted in the order they appear\
	*can start typing when list of items in a file is dropped down and it will filter\
	*automatically shows //MARK: areas (eg. //MARK: Properties) [can put a - before or after mark name to add a separator in the Jump Bar]\
\
Assistant Editor: rings next to normal editor in top right, lets you see another file or view at the same time as the one you\'92re editing\
\
cmd-shift-o: open (quickly) a file in your project w/ fuzzy name matching [doesn\'92t navigate to it on left]\
	*can be used to look up built-in stuff too\
cmd-shift-j: jump to the current editor file in the navigator\
alt-shift-click on another file in navigator: asks you how to open the other file (eg. assistant editor, new window, new tab, etc.)\
cmd-ctrl-j: jump to definition of symbol under cursor\
cmd-j+return: jump from navigator back to file being edited (without having to mouse click)\
\
alt-click on item in text: show popup of info about it (like VS hovering)\
Quick Help Pane on right: same info as you could get by alt-clicking if you just regular click cursor into item\
can add /// comments in special form (similar to C# but won\'92t auto popup with ///) to markup your code with documentation to show up here\
\
Right-click on symbol:\
	Jump To Definition: like Go To Definition in VS (cmd-ctrl-j)\
\
cmd-[ and cmd-]: dedent and indent line(s) [like tab + shift-tab in VS, which don\'92t work here]\
ctrl-i: smartly reindent the selected code\
\
breakpoints: look like blue bookmarks in Xcode (not red dots)\
cmd-\\: set or clear breakpoint\
click in empty space in left column: set breakpoint or disable (not delete) existing one\
right-click breakpoint: options like Delete\
cmd-y: toggle all breakpoints on/off\
conditional breakpoint: right-click a breakpoint and add a condition to it just like VS\
debug output: can right-click breakpoint and tell it to do an lldb debug action (like print) when breakpoint is hit and continue (therefore don\'92t have to put prints into code)\
special breakpoints: can be created with + in Breakpoint Navigator on left (these can be enabled/disabled just like code ones)\
	error breakpoint: catches swift thrown errors\
	exception breakpoint: catches exceptions that you specify\
moving instruction pointer: little green plate when you\'92re debugging is the program counter and can be dragged to skip or rerun code\
\
cmd-b: build\
cmd-r: run\
cmd-.: stop\
cmd-shift-k: clean (current target only)\
alt-cmd-shift-k: clean build folder (all targets)\
cmd-k: clear console\
\
Red error icon can be clicked to see error (sometimes has a Fix-it button)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 File -> New -> File\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	ios/Cocoa Touch Class: can select what UI class to subclass [subclass list is scrollable even though doesn\'92t look it] ((or type in your own class))
\fs36 \
\
Interface Builder
\fs24 \
	Assistant Editor: lets you see extra information in another pane while editing (eg. controller code for storyboard so that you can drag connections)\
		Preview: in the main dropdown for the Assistant Editor, can select preview to see what the layout will look like on different devices\
			+ to add more devices for a side by side view\
			Double-Length Pseudo Language to see what interface will look like on languages with really long words\
		Manual: can select whatever file you want to see in the pane\
		Automatic: offers files based on what kind of thing you\'92re looking at (eg. controller for the storyboard)\
		Vertical vs. Horizontal: View -> Assistant Editor\
	Adding a scene: drag a view controller to an open space in the storyboard\
		give it a storyboard ID if want to load it from code\
	Adding a scene for your custom view subclass: add a view controller scene and then change the class in Identity Inspector\
	Changing view class\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	1.	}change the class you inherit from in the .swift file for the controller\
{\listtext	2.	}If the controller is all that\'92s in the scene, just delete the old one in the outline (will have empty storyboard) [have to because even if change class of existing one it will not have the right children]\
{\listtext	3.	}Drag a view controller of the type you want into the storyboard to make a new scene\
{\listtext	4.	}Change the class to your class in Identity Inspector\
{\listtext	5.	}In Attributes Inspector, set Is Initial View Controller if it is (this will set the arrow to it)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Using custom class for table view (or collection view) cell\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls2\ilvl2\cf0 {\listtext	1.	}create a new class that inherits from the cell class\
{\listtext	2.	}change the class of the cell prototype in IB with Identity Inspector\
{\listtext	3.	}declare outlets for the controls you put inside the prototype cell\
{\listtext	4.	}In Connections Inspector, drag the empty circles for the outlets onto the controls in IB (instead of to the code)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Wrapping scene in Navigation Controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	1.	}Select the scene (view controller)\
{\listtext	2.	}Editor -> Embed In -> Navigation Controller\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Wrapping scene in Tab Bar Controller\
		***same as for navigation controller (can even combine - probably do navigation controller first and then embed it) but select Tab Bar Controller\
		Select the tab item in IB to change its attributes\
	Finding Controls: object library window in lower right, search for regular name instead of class name (eg. Navigation Controller)\
	Auto Layout\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}Editor -> Resolve Auto Layout Issues -> Reset to Suggested Constraints: selected control will be set to constraints the system thinks it should (eg. image view to fill view)[pretty good at guessing - give it a try first]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 		Constraints show up in outline\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}Ctrl-drag control/view somewhere else to create constraint based on that (eg. the view controller or another control)(direction matters) and release to see menu about what constraints to create.  Shift-select if want multiple.  Click Add Constraints\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}Constraints can be found either in outline mode or (sometimes only) in Size Inspector\
{\listtext	\uc0\u8259 	}in the constraints, you can set constant offsets, ratios, etc., change comparison from equal to less than or equal, and stuff like that [useful for setting minimum spacing]\
{\listtext	\uc0\u8259 	}can also see the constraints when you click on a control (clicking the constraint will select it in the outline)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}lines with numbers for distances, ratio for aspect ratio, equality symbol for equal, etc.\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}Selecting constraint in outline allows you to view its data in the Attributes Inspector\
{\listtext	\uc0\u8259 	}too many constraints can do things like squish your images\
{\listtext	\uc0\u8259 	}another useful one is selecting \'93Equal Heights\'94 when you ctrl-drag (to specify two things should have same height)\
{\listtext	\uc0\u8259 	}drag within same object to specify things like Aspect Ratio [will default to current value]\
{\listtext	\uc0\u8259 	}constraints may cause squishing, changing of sizes, etc. of images (can control that with constraints)\
{\listtext	\uc0\u8259 	}can add constraints by diagonally dragging inside the object itself (eg. to constrain height, width, aspect ratio to their current values)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}If you don\'92t see an update, do Editor -> Resolve Auto Layout Issues -> Update Frames (with all the controls/views you want to update selected)\
{\listtext	\uc0\u8259 	}Sometimes there are constraints you can only see in Size Inspector but not in outline (eg. aspect ratio)\
{\listtext	\uc0\u8259 	}Can also add constraints by layout button in bottom right corner\
{\listtext	\uc0\u8259 	}NOTE: another thing to know for making adaptive layouts is to use view.frame.width and view.frame.height in the view controller to get the size at runtime (eg. in viewDidLoad)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Adding Outlet\
		Ctrl-drag a control onto source code where you want the outlet declaration and use the box that pops up to configure name, type, etc. (use Assistant Editor)\
		Will see a filled circle that can be clicked to see where it connects\
		Outlet can be treated like the control itself because it will be populated by the time the view loads\
		NOTE: outlets are useful outside of the class too (eg. so you can set the text label from the outside)\
	Adding Action\
		Ctrl-drag a control onto source where you want the action method and use the box that pops up to configure name, type, etc. (use Assistant Editor)\
		Can select from multiple events to wire up an action\
		Will see a filled circle like with outlets\
		To reuse the same action for other controls, ctrl drag them to the method until the whole method turns blue (not blue circle) [can use tag to distinguish]\
		In Code: call addTarget() method with a selector\
	Attributes\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}@IBOutlet: tells Interface Builder the declaration is an outlet (generally weak reference because storyboard owns the object)(generally ! because it\'92ll be there by the time the view loads)\
{\listtext	\uc0\u8259 	}@IBAction: tells Interface Builder the method is an action that responds to an event from a view in the UI\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	Copying Controls\
		cmd-c and stuff like that OR\
		alt-drag (sometimes only way that works)\
		can copy and paste groups as with other programs\
	Points\
		sizes and positions are given in points\
		points are pixels on non-retina (1x)\
		points are 2 pixels wide on retina and 3 pixels wide on retina HD\
		allows points to be about same size on all devices\
	Bypassing storyboard view (eg. in browser example)\
		override 
\i loadView
\i0  to customize which view actually gets loaded\
		set 
\i view
\i0  member of view controller instance to an instance of the view you want to attach the controller to\
		set 
\i delegate
\i0  also if applicable\
	Inspectors\
		support multi-editing (select multiple views and make a change)\
		Size Inspector: contrary to name, also does stuff like coordinates (also does stuff like cell size of UICollectionView)(margins too)\
	Placing\
		can use inspectors, mouse, or array keys\
		arrow key = 1 point (blue lines still appear to help guide as needed)\
		remember that things that hold text also have fonts, alignments, text colors, etc.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Scene Editor\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	SpriteKit equivalent of Interface Builder\
	A lot of things are very similar but a bit different (eg. inspectors are still here but they use different icons and slightly different behavior for some things)\
	\
	Coordinates/Sizes\
		Y coordinates are from bottom up instead of top down like normal\
		tutorial uses 1024x768 for an iPad app\
	Anchor Point\
		accessed via Attributes Inspector\
		???sets which point in the object is the target point for positioning (defaults to 0.5, 0.5 which means the center point.  set to 0 if want bottom left)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Particle Editor\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	Loaded when you select a .sks file representing particle effects (such as in your resources)\
	Preview of the particle animation on the left and inspectors on the right\
	Maximum Bug\
		tutorial says there may be a bug where you won\'92t see anything unless you set Maximum to 0 (then set it back when you\'92re done) -> so far I have not run into it\
	What Particle Systems Can Do (Wikipedia Quote)\
		\'93Examples of such phenomena which are commonly replicated using particle systems include fire, explosions, smoke, moving water (such as a waterfall), sparks, falling leaves, rock falls, clouds, fog, snow, dust, meteor tails, stars and galaxies, or abstract 		 visual effects like glowing trails, magic spells, etc. - these use particles that fade out quickly and are then re-emitted from the effect's source. Another technique can be used for things that contain many strands - such as fur, hair, and grass - involving 		 rendering an entire particle's lifetime at once, which can then be drawn and manipulated as a single strand of the material in question.\'94\
	Templates\
		File -> New File -> choose Resource -> SpriteKit Particle File\
		can use a built-in template as a starting point and then tweak the .sks file in Particle Editor as desired\
	Settings\
		see p. 348 of Hacking with Swift (or probably an online resource) for descriptions of the settings\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Playgrounds
\fs24 \
	Create from the start screen: creates a single folder (which acts like a file in a lot of ways)(contains xcplayground and swift file, plus a workspace file you don\'92t need to check in) (so make a folder for it if desired)\
	Like a code file that continuously runs and shows results in right pane\
	Opening from command line: open playgroundname.playground\
	Auto-saves as you go, so if you do cmd-s you\'92ll get an error about already existing\
	if red error shows up or text goes grey in output, something is wrong and the code hasn\'92t run\
	Can resize the output pane, click eye to show message in popup, click + to show output inline with code (with multiline print operations you can right-click to switch between last value and value history)\
\

\fs36 Project Types
\fs24 \
	Single View Application (UIKit app)\
		Default app just has blank white screen\
		Storyboard w/ single scene (edited by Interface Builder)\
		AppDelegate swift file\
		ViewController swift file\
		Assets folder\
		Info.plist (key-value configuration)\
		*some others?\
	Game: starting point for a game (lets you select the base technology such as SpriteKit or SceneKit)\
		Default app has grey screen with \'93Hello, World\'94 and you can click and drag to animate loopy things of different colors (frame rate in lower right corner)\
		AppDelegate swift file (basically same as regular app - still uses UIKit)\
		Storyboard w/ single scene (still)(presentation set to Full Screen)\
		GameViewController swift file (the view controller used by the storyboard)\
			unlike in ordinary apps, this view controller has a lot of code in it already\
			can take out the two lines that add the FPS and node counts in here\
		GameScene.Swift\
			also contains a lot of code (the tutorial blows it all away)\
			this is the main class to start editing (roughly equivalent to the view controller for a UIKit app even though you have one here)\
		GameScene.sks (edited by Scene Editor)\
		Actions.sks? (deleted in tutorial so not sure what it is)\
		Assets folder (pre-populated with a spaceship - you can delete it)\
		Info.plist\
		*some others same as UIKit apps?\
		Resetting to Vanilla State: delete spaceship, replace code in GameScene.Swift with just didMove and touchesBegan (empty bodies), delete Actions.sks, remove label from GameScene.sks and set Anchor Point and size attributes, remove FPS and node counts from view controller\
	Cocoa Touch Framework\
		dynamic library\
		iOS 8 onwards\
		Swift or Objective-C\
		Add .swift files to it and the ones that are public automatically become available to whoever imports the package\
	Cocoa Touch Static Library\
		iOS 6 onwards\
		Objective-C only\
		***going to ignore this for now until Swift supports it\
	Library\
		C/C++ type stuff (not Swift and Objective-C)\
\
	\ul Things to do when creating any project:\ulnone  check the output device, portrait/landscape, iOS version, device type, and Interface Builder / Scene Editor sizes\
\

\fs36 Project Settings
\fs24 \
	selected by selecting project\'92s node in Navigation area on left\
	Deployment Target: iOS version to build for\
	Device: can select whether to support iPhone, iPad, or both (Don\'92t do universal unless you are really going to deploy for iPads, because some stuff acts differently between iPad and iPhone and it adds complexity)\
	Orientation: can decide which orientations to allow\
\

\fs36 Info.plist
\fs24 \
	contains project configuration settings as key-value pairs\
	to add a setting, hover over any row in the key column and click the + icon to add a new row, then select the key from the dropdown	one useful example is \'93Privacy - Photo Library Usage Description\'94 to give user a reason you need to access the camera (without this the image picker will crash)\
	double-click in the value cell to add a value for the key\
\

\fs36 Xcode Hierarchy
\fs24 \
	Workspace = like a Visual Studio solution (contains multiple projects/apps/libraries)\
		all projects in a workspace share an output directory\
		a project can belong to multiple workspaces\
		project settings and files are independent of the workspace (eg. can remove it from workspace without affecting the project itself)\
		dependencies should be detected automatically (eg. if you refer to another project in the same workspace, it should automatically get built when you build)\
		you can have a shared library in multiple workspaces rather and the changes will be shared between them\
		an online resource claims that it doesn\'92t make sense to put unrelated projects in the same workspace even if they share common libraries\
		.xcworkspace file (don\'92t place files under this)\
	Project = a single library or app (like a Visual Studio Project)\
	Target = a build of a project (eg. can have targets for free and paid versions, Mac and iOS versions, etc.)\
		Many of the settings thought of (and described in this doc as) project settings are actually target settings\
		Scheme = all the settings like running, debugging, profiling stuff\
			can have multiple schemes in the same target\
\

\fs36 Creating/Managing Workspace
\fs24 \
	Creating a new workspace\
		File -> New -> Workspace, pick a folder (might want to make one manually if putting projects in it because this will only create .xcworkspace file) and name\
	Creating a new Project in a Workspace\
		File -> New -> Project, pick a folder (eg. the parent folder of the .xcworkspace file, it may try to trick you) and name, select the workspace in the bottom of the dialog (select the right group too as it may try to trick you)\
	Adding an existing project to a workspace\
		Within the Project Navigator (top level), right-click and select Add Files option, navigate to and select the xcodeproj file\
		This will add the project to the workspace (by reference)\
	Selecting the current project for building and debugging\
		Select the project in the toolbar to the left of where you select the device\
		hotkey: ctrl-command-[ and ctrl-command-] to cycle\
	Project Dependencies\
		If you manually build a library in the same workspace and then reference it from another project by importing and using the types, it will magically work, but it won\'92t build the dependency automatically later\
		To set up the dependency formally so building the dependency will happen automatically, go to project settings (target -> General tab), add it in linked frameworks and libraries at the bottom\
		To access the library within your module, import the library by name\
\

\fs36 Release Mode
\fs24 \
	the default for building and running is Debug mode\
	to switch to release mode without profiling or anything, select Product -> Scheme -> Edit Scheme and change the Run configuration to Release and not debug executable\
	This changes where the binaries are linked from in the project navigator (and in theory should change what\'92s deployed on devices)\
	Someone online suggested duplicating the scheme and making one be debug and the other release, so that you don\'92t have to edit the scheme to switch\
	Running in profile mode (cmd-i) also uses release, but it makes you pick a profiler and then profiles the app\
\

\fs36 Archiving
\fs24 \
	Archiving creates an app bundle (release mode, signed) that is ready for distribution\
	To archive:\
		1. set the target device to generic ios device (build only target)\
		2. click Product -> Archive\
		3. the Archives window will pop up showing the archives you have (including the one you just made)\
		4. You can deal with it now or close this window and come back later\
	To see and take action on your archives: Window -> Organizer (Archives tab)\
	From the Organizer you can export, submit to iTunes, etc.\
\

\fs36 Submitting to App Store
\fs24 \
	Guidelines: {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/app-store/review/"}}{\fldrslt https://developer.apple.com/app-store/review/}}\
	Things to Make Sure: you have signing/provisioning set up properly, you have tested on physical devices, you have tested on minimum supported things in simulator, you have app icon and splash image\
	iTunes Connect will be your portal for what\'92s happening on the app store with your stuff\
	Steps:\
		1. Create an archive ready to be released to the app store (see above)\
		2. On iTunes Connect website, click Manage Your Apps\
		3. Click \'93Add New App\'94 and fill in fields (skew is for your own purposes)\
		4. Set availability date and pricing info\
		5. Fill in all the other metadata (version should match the binary)\
		6. click the Ready for Upload blue button and answer questions (status should change from Prepare for Upload to Waiting for Upload)\
		7. Use the Upload to App Store button in Xcode Organizer, after validation/uploading, status should now be Waiting for Review\
		8. You\'92ll get an email when the app enters review (a few days to a couple of weeks)\
		9.  If it fails, fix what they tell you and submit with a new version number\
		10. If it passes, it should appear on the app store on the availability date\
		11.  Use iTunes Connect to monitor your app\'92s performance\
	Updating existing app: use iTunes Connect to add a version to the app and then go through a similar process for the rest of it\
		The update will go through a review but it should be quicker than the initial version\
\

\fs36 Line numbers
\fs24 \
	can turn on Xcode menu Preferences -> Text Editing \
\

\fs36 Adding Assets
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\'95	}Directly into project hierarchy: get built into the final .app bundle (loose files in resourcePath of bundle)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}Drag folder from desktop or Finder into Xcode and tell it to copy the files and create folders\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}*the files are tracked as assets but they don\'92t show up in the assets node in Navigation panel\
{\listtext	\uc0\u8259 	}can drag individual files, text files, etc. too (will be prompted for whether to copy the files in)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}In Assets.xcassets manually\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}right-click and crate a new image set\
{\listtext	\uc0\u8259 	}drag in an image file to the appropriate bucket (1x, 2x, 3x) [see Packaging section for explanation of sizes]\
{\listtext	\uc0\u8259 	}Refer to image by image set name in code and the right size one will automatically be used (image can still be resampled a bit based on size changes of controls)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}In Assets.xcassets automatically\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Create images where the 2x and 3x ones are exactly double and triple the dimensions and have @2x and @3x at end of filename\
{\listtext	\uc0\u8259 	}Select all the images and drag into the assets outline\
{\listtext	\uc0\u8259 	}Image sets automatically created with slots filled -> can use them in code as the image set name and right size will be used [see Packing section]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}Device Resolutions\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Retina = 200 range PPI, non-Retina = 100 range PPI, Retina HD = 300-400 range PPI (cut pixels in half for retina and in third for retina HD to get points)\
{\listtext	\uc0\u8259 	}iPad Air - 1536 x 2048, Retina\
{\listtext	\uc0\u8259 	}iPhone 6 - 1334 x 750, Retina HD\
{\listtext	\uc0\u8259 	}iPhone 6 Plus - 1920 x 1080, Retina HD\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	
\f1 \uc0\u9642 
\f0 	}File Formats\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Image\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}png - lossless (but still compressed) w/ transparency\
{\listtext	\uc0\u8259 	}jpg - compressed w/out transparency\
{\listtext	\uc0\u8259 	}gif - compressed w/ transparency\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Sound\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}caf - AIFF file (like wave)\
{\listtext	\uc0\u8259 	}mp3\
{\listtext	\uc0\u8259 	}m4a\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
NOTE: assets can also be text files (eg. configuration data or level data for a game), sks files, audio files, etc.\
NOTE: can often leave off the extension of an asset (saw this with at least png files in tutorials)\
NOTE: for images with transparency like png, the transparency should be respected\
NOTE: you can load copies of the same image\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 App Icon
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}Human Interface Guidelines from Apple has size reference table\
{\listtext	\'95	}Use png to make it lossless\
{\listtext	\'95	}Need to create multiple sizes of the same image (eg. by taking a bigger (or vector) image in Photoshop or Illustrator and \'93saving for web\'94 multiple times) [also online tools to resample but not ideal]((may want to make an action or something))\
{\listtext	\'95	}Click on the AppIcon entry in the assets folder in your project and it will show you all the icons you need to add (eg. by dragging and dropping onto the squres)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}organized by the use for the icon\
{\listtext	\uc0\u8259 	}to get the sizes, multiple the \'93point\'94 value by the multiplier (eg. 2x or 3x) to get the pixel dimension (all square)\
{\listtext	\uc0\u8259 	}organized from smallest to largest, and you will get a warning if you put in the wrong size\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}Can test it in simulator (notifications, home screen, etc.)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Adding Modules
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\'95	}To add a .swift file to your project directly, drag it in and select \'93copy if needed\'94 in the popup\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Packaging
\fs24 \
	Bundle: .app file which is actually a folder with binary, assets, metadata, layouts, etc.\
	Assets: loose assets and xcassets handled same way, just refer to by image (or image set) name\
		For xcassets, 1x size is loaded for non-retina, 2x for retina, and 3x for retina HD\
		App store is able to prune off the unneeded ones before user downloads it\
	NOTE: in my experimenting xcassets are not in the package folder and cannot be loaded from the file system or enumerated (not sure what\'92s going on there)\
\

\fs36 REPL
\fs24 \
	Run \'93swift\'94 from command line to get a REPL [use ctrl-z to exit it]\
\

\fs36 Simulator\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 	To Swipe: click near edge of screen and drag across\
	NOTE: Don\'92t adjust difficulty of game or usability of app purely based on simulator because physical device is very different (need to test on at least 1 physical device)\
	NOTE: even weak iPhones or iPads are much faster and smoother than simulator in terms of animations, graphics, etc. because simulating takes a lot of resources from your Mac\
\
	Hardware menu has all the various things you can do (and hotkeys for them)\
	Ctrl and left or right arrows to rotate the device 90 degrees\
	Even stuff like shake, matching touchid, non-matching touchid, applepay, reboot, etc.
\fs36 \
	\
APPLE DEVELOPER
\fs24 \
	developer.apple.com\
	ok to plug iPhone into MAC iTunes (will load it but not take control or format or anything)\
	need to register device(s) in web interface (uuid from iTunes, click on serial number and it will change to uuid)\
	to get uuid of macbook go to apple menu -> about this mac -> System Report\
	click \'93Fix\'94 under Identity provisioning error after all this is done\
\
	to run on iPhone: connect phone with usb cable and select it as the simulator target in the toolbar (the app will be installed and executed) [the app is still there and runnable after you disconnect]\
\
	Organization Identifier: usually made of your website in reverse (eg. com.jarofgoblins) [needs to be valid for shipping to app store]\
\
TODO: resolve the ambiguity with how he describes anchor points in Scene Editor and why we set it to 0,0\
TODO: if image has even height, where is the center and how do you position it?  (SpriteKit)\
TODO: how to deploy to phone quicker (not have to run it?), how to build and test release mode?  how to deploy release mode on phone?  how to submit to app store?  (scheme checkboxes?)\
TODO: How to add tutorial/description text to playgrounds?\
TODO: watches, immediate window, data breakpoints, callstack\
TODO: figure out how to automatically load list of image sets\
TODO: see if 2x and 3x naming tricks work when drag files in directly (and also image loading)\
TODO: make a list of all the different ways you can transition from one view controller to another (purely in code, in storyboard, etc.)\
TODO: understand the Connections Inspector better (eg. polarity of what connecting to what)\
TODO: learn how to do particle effects (get to know the settings) manually\
TODO: what happens if the biggest image you have is 2x and you load on a Retina HD device?\
TODO: other project types when create new project\
TODO: learn Targets in XCode\
TODO: learn all the project settings in XCode (eg. Build Settings, phases, etc.)\
TODO: learn all the details of building, deployment, configurations, archiving, installing, etc.\
TODO: learn Swift package installation (including online package managers)\
TODO: learn the different appliation types in the New Project dialog\
TODO: learn profiling\
TODO: learn iAds (how to get money, how to incorporate into app, etc.)\
TODO: learn how in-app purchases/upgrades work\
TODO: learn how to submit free and premium versions\
TODO: figure out what the backwards url when you make a project is actually for\
TODO: see if more automatic way to import icon images\
TODO: how to select the ios version for each device (or globally)\
TODO: learn how to do splash screen (Launch Image) and observe how often apps actually use it\
TODO: find out how to build all in workspace and how to run all tests in workspace -> also how to build and test all things that refer to a library even if not in same workspace\
}