{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}}
\margl1440\margr1440\vieww28600\viewh15100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 Shading Language Reference (GLSL) (OpenGL ES 2.0)
\fs24 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 https://developer.apple.com/reference/spritekit/skshader\
\
https://www.opengl.org/wiki/OpenGL_Shading_Language  (NOTE: the search on this wiki SUCKS but a lot of the information is there if you can dig through it)\
https://www.opengl.org/wiki/Built-in_Variable_(GLSL) (NOTE: there are multiple top-level articles on opengl.org/wiki)\
https://www.opengl.org/wiki/Main_Page (might have more luck starting here and drilling in)\
\
https://www.opengl.org/registry/doc/GLSLangSpec.3.30.6.clean.pdf (significantly newer than what iOS has - lots of \'93deprecated\'94 stuff that is the only option available)\
\
NOTE: the version used by Apple is very old (it\'92s up to like 5 or something now) so be careful about online references, even the opengl.org wiki\

\fs36 \
Shader File
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}
\i .fsh
\i0  file (create manually as empty text file in your project)\
{\listtext	\'95	}uses C syntax which gets compiled to code that runs from video memory by GPU [OpenGL ES 2.0 shader language]\
{\listtext	\'95	}
\i void main()
\i0  functions like a normal C program\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}gets run for every pixel in the image (although it seems like it may be POINTS instead of pixels based on the Apple sample code)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}possible, since coordinates are floats, that it\'92s running for every pixel but referencing as point value\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}interacting with built-in variables defines what the output of the shader is for that pixel\
{\listtext	\uc0\u8259 	}should set gl_FragColor before main returns (possibly multiplied by fragment\'92s alpha value according to Apple)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}loaded by SpriteKit as SKShader and set to 
\i shader
\i0  property of an SKNode (like a sprite)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\fs36 Performance Tips\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs24 \cf0 {\listtext	\'95	}Shader files are compiled at runtime\
{\listtext	\'95	}Create the shaders at the beginning\
{\listtext	\'95	}Do not change uniforms after creation because that causes a re-compile\
{\listtext	\'95	}Reuse shader instances for multiple sprites when possible\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\fs36 Data Types\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\fs24 \cf0 {\listtext	\'95	}\ul Declaring Variables\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}
\i vec4 v = vec4(1.0, 1.0, 1.0, 1.0);
\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\'95	}\ul Vectors\ulnone \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i vec2(float1, float2)
\i0  - gets a 2D vector\
{\listtext	\uc0\u8259 	}
\i vec3(float1, float2, float3)
\i0  - gets a 3D vector\
{\listtext	\uc0\u8259 	}
\i vec4(float1, float2, float3, float4)
\i0  - gets a 4D vector\
{\listtext	\uc0\u8259 	}
\i vec4(float1)
\i0  - any of these can be constructed with a single value to fill out all the components\
{\listtext	\uc0\u8259 	}
\i vec4(float1, vec3(float2))
\i0  - subsets can be constructed as lower-order vectors too\
{\listtext	\uc0\u8259 	}NOTE: vectors tend to be 4D vectors (R, G, B, alpha) (floats from 0 to 1.0)\
{\listtext	\uc0\u8259 	}
\i members:
\i0  can access as w, x, y, and z OR r, g, b, and a\
{\listtext	\uc0\u8259 	}
\i swizzling
\i0 : can say val.wxx, for instance, to get a 3D vector made of the 1st item and then the 2nd item twice\
{\listtext	\uc0\u8259 	}
\i multiplying
\i0 : vec * vec = memberwise multiplication (not dot product or anything like that)\
{\listtext	\uc0\u8259 	}
\i dividing:
\i0  vec / dev = memberwise\
{\listtext	\uc0\u8259 	}
\i offsets
\i0 : vec - float = memberwise subtraction of the value\
{\listtext	\uc0\u8259 	}NOTE: seems to clip properly to 0 if you go negative\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\fs36 Built-in Variables\

\fs24 http://relativity.net.au/gaming/glsl/Built-inVariables.html\

\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0
\fs24 \cf0 {\listtext	\'95	}\ul gl_FragColor\ulnone  - 4D vector (vec4d) representing the color of the 
\b output
\b0  pixel\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}does not default to input (will be unset if you don\'92t set it)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul gl_FragCoord\ulnone  - 2D coordinate vector of the fragment (the sprite?)\
{\listtext	\'95	}\ul u_texture\ulnone  - the input texture (sampler2D) (the sprite itself)\
{\listtext	\'95	}\ul v_tex_coord\ulnone  - pixel coordinates of the pixel being processed (vec2)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}components are between 0 and 1 where <1, 1> is top right corner of sprite\
{\listtext	\uc0\u8259 	}HINT: can use this to tell both ratio and actual distance at same time\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul u_time\ulnone  - time since beginning of simulation in seconds (float)\
{\listtext	\'95	}\ul u_sprite_size\ulnone  - supposed to be a vector with the dimensions of the sprite, but it has been removed (pass in your own uniform)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}you can even use the name u_sprite_size in your uniform to make old code work\
{\listtext	\uc0\u8259 	}NOTE: the apple documentation passes in sprite.frame.size dimensions directly (doesn\'92t convert to pixels - not sure why)\
{\listtext	\uc0\u8259 	}probably better to pass it in as attribute so you can use it for multiple sprites of differing sizes\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Uniforms\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0
\fs24 \cf0 {\listtext	\'95	}automatically available in your function with the names given in SpriteKit\
{\listtext	\'95	}available as the appropriate type (eg. textures can be passed into texture2D() and floats are available as float variables)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}HINT: can pass in mask of same size and use same v_text_coord on both u_texture and a uniform\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}uniforms are compiled into the GLSL code and thus are the same for all sprites using the same shader\
{\listtext	\'95	}examples use u_ in front of uniform names\
{\listtext	\'95	}many of the built-in variables (the ones with u_) are considered uniforms too\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\fs36 Attributes
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\'95	}similar to uniforms, but they are dynamically set and don\'92t require a recompile of the GLSL code\
{\listtext	\'95	}allows you to use the same shader between sprites but with different values\
{\listtext	\'95	}use a_ instead of u_ in the name\
{\listtext	\'95	}added via the sprite (instead of the shader) when the shader is already attached\
{\listtext	\'95	}otherwise read from the GLSL code exactly as if it were a uniform (by name as a global variable)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0
\fs36 \cf0 Built-in Functions
\fs24 \
{\listtext	\'95	}a lot of these work on both 
\b scalars and vectors
\b0  (memberwise)\
{\listtext	\'95	}\ul texture2D(texture ,coordinates)\ulnone  - obtain a vec4 representing the given pixel from the given texture\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}references will show it as texture() instead because it was changed in later versions of GLSL\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\'95	}\ul sin(float)\ulnone  - sine of the value (in radians)\
{\listtext	\'95	}\ul length(vec)\ulnone  - length of vector as float\
{\listtext	\'95	}\ul radians()/degrees()
\i  \ulnone - 
\i0 conversion of scalar or vector\
{\listtext	\'95	}\ul pow(), sqrt(), abs()\ulnone  - useful math operations\
{\listtext	\'95	}\ul distance(vector1, vector2)\ulnone  - distance between two points\
{\listtext	\'95	}\ul fract()/floor()\ulnone  - for getting fractional and integral part of number\
{\listtext	\'95	}\ul SKDefaultShading()\ulnone  - does default shading behavior (probably pass-through with alpha multiplication) [can be passed directly to gl_FragColor]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\

\fs36 Debugging\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}
\fs24 When you run your app with a shader, you will see compile/run errors printed in the Swift console\
{\listtext	\'95	}Shader files aren\'92t compiled until they are used at runtime\
\ls9\ilvl0
\fs36 {\listtext	\'95	}
\fs24 The only way to see values from GLSL (since it doesn\'92t run on the CPU) is to make some visual change based on it (eg. show greyscale value for floats between 0 and 1 or doing an if-else that draws different colors for different scenarios)
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Shadertoy
\fs24 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}For sharing shaders with community (can find cool stuff there)\
{\listtext	\'95	}Some of the variables there are different (left = shadertoy, right = your code)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}iGlobalTime	u_time\
{\listtext	\uc0\u8259 	}iResolution	u_sprite_size  (removed - pass in yourself, maybe as an attribute instead of uniform)\
{\listtext	\uc0\u8259 	}fragCoord.xy	gl_FragCoord.xy\
{\listtext	\uc0\u8259 	}iChannelX	SKUniform with name of \'93iChannelX\'94 containing SKTexture\
{\listtext	\uc0\u8259 	}fragColor	gl_FragColor\
}