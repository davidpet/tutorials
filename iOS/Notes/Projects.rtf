{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww28600\viewh15100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 *for functionality duplicated in multiple projects, prefer later ones for proper way to do it\
**for simple things, they are mentioned early on and not repeated later\
***all use either Single View Application or Game template (even though implement other stuff)\
\
Storm Viewer\
	basic navigation bar\
	list of images loaded from app bundle\
	table view with image names and arrow\
	detail view that shows the picture with proper aspect (and has button to go back)\
	dismissing navigation bar on tap\
	sharing to social media, text message, etc. (up arrow button)\
	\
Guess the Flag\
	some basic controls and interaction\
	CALayer to draw border around control\
	alert popup\
	loading images from app bundle\
\
FlagViewer\
	table w/ small flag thumbnails and country names in cell\
	detail view to show the full flag w/ CA border drawn\
	tap to dismiss navigation bar\
\
EasyBrowser\
	WKWebView browser\
	progress bar control in navigation bar to show page progress [bottom]\
	refresh button in navigation bar [bottom]\
	custom button in top navigation bar\
\
WordScramble\
	table view that you can add to with + button in top navigation bar\
	refresh button in top navigation bar\
\
AutoLayout\
	AutoLayout demonstration app\
\
ShoppingList\
	table view that can be dynamically configured at runtime\
	+ button in top navigation bar\
	pop up alert with text field, OK button, Cancel button\
\
WhitehousePetitions\
	tabbed interface (Most Recent and Top Rated views of data)\
	table view w/ title/subtitle cells\
	detail view\
	fetching data from the web\
\
NamesToFaces\
	using image picker (including permissions)\
	using collection view controller (showing photo gallery in grid)\
	accepting taps on images to pop up a prompt and get text to add for title in the grid\
	+ button left side of navigation bar\
\
Instafilter\
	image picker\
	CI filters to edit the image\
	slider control\
	popup action sheet with various filters\
	saving copy of altered image to camera roll\
\
Animation\
	demonstrates various animations within UIKit via a button tap\
\
JavascriptExtension\
	demonstrates a browser extension for Safari that lets you enter JavaScript and have it run\
	running the app directly does nothing (but could be used for settings and/or help)\
\
CapitalCities\
	map w/ pins at certain coordinates which popup text and an i for more information when clicked\
\
LocalNotifications\
	demonstrates how to send/receive notifications (and register permissions)\
	local notifications like calendar alerts, NOT push notifications yet\
\
SelfieShare\
	camera button in navigation bar\
	P2P sharing of images between different users on different iDevices\
	image picker, etc. to get images to share\
\
CoreGraphics\
	demonstrates various CG drawing capabilities via button tap\
\
SecretSwift\
	using keychain for secure storage (via 3rd party library)\
	authenticating with TouchID\
	decrypting text after authentication\
	re-encrypting when app loses focus\
\
MultiBrowser\
	using UIWebView (as opposed to WKWebView)\
	spawning multiple instances\
	trash can icon in navigation bar (to delete selected browser instance)\
	address bar linked to browser instances\
	selecting tapped browser by drawing line around it\
	size classes for more adaptive UI\
	gesture recognizer\
\
SwiftSearcher\
	edit mode buttons for table entries (+, -)\
	checkmark on right side of table entry\
	Delete slideover on right side\
\
WhatsThatWhistle\
	CloudKit for shared data in the cloud\
	querying and filtering data from CloudKit efficiently\
	multiple tables with different kinds of data\
	recording sound file and submitting it to cloud\
	downloading and playing audio file from cloud\
\
FourInARow\
	Connect 4 game\
	UI that works universally\
	animated chip drops (in UIKit)\
	AI handling black\
\
PsychicTester\
	communication with Apple Watch including haptic clicks\
	UIKit animation of cards flipping over, stars falling, background slowly shifting color\
	using QuartzCore to draw background gradient\
	custom control\
	3D Touch\
	background music in UIKit\
\
GitHubCommits\
	CoreData CRUD operations\
	table view w/ detail popup view\
	popup alert with various options to choose from (configuring filters for CoreData)\
\
UnitTesting\
	unit tests and UI tests in the project\
	app is just there for the benefit of the tests\
\
[SpriteKit]\
See Plachinko project for dropping balls into animated slots and having them explode with a score\
See WhackAPenguin project for wack-a-mole style game with changing penguin images/states, cropping, only being able to hit when visible, timed events that decrease the interval over time (with some variability), ending game w/ gameover, etc.\
\
See SwiftyNinja for a Fruit Ninja style game with altered physics, lives count, drawing trails on the screen in response to user swiping (2-layered trail), responding to various phases of touch lifecycle (such as tracing movement), fancy animations like fading out the touch when you lift your finger, drawing multiple segments paths with max and min size clipping, playing sound effect that does not pile on itself (swoosh when you are moving finger), random positions w/ angular velocities, etc. based on position and desired learning curve of enemies vs. good guys, syncing cleanup code to frame drawing, using enums with meanings about what kind of things to create to allow for randomization, increasing difficulty via adjusting physics and delays as game goes on, using dispatch queue to chain enemies together with delay while doing other stuff immediately, removing enemies from the game when they go offscreen and only creating more enemies when last one (or sequence) done, using swipe/slice to kill sprite, animating destruction of objects (such as making them stop moving, shrink, explode, etc. all at the same time better than Plachinko), animating and showing life loss dynamically, ending game from various causes and various ways (eg. freezing everything by slowing down the world)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 See FireworksNight project for MissileCommand like game w/ recoloring artwork at runtime, having sprites follow a path (w/ rotation included), having a sparky tail behind a sprite, changing colors dynamically (eg. to show selection), removing fireworks that make it to a certain height, exploding objects (fireworks), awarding different points based on number of objects destroyed at once, detecting device being shaken, cooperation between view controller and scene classes\
\
See SpaceRace project for moving starfield as background, pixel-by-pixel collision detection, space gravity, scoring based on time alive, building a game quickly (see check-ins for approach that was used), moving player based on touching, ending game when they try to cheat [NOTE: this project took a total of 50 minutes from start to finish even with all the reading, looking up methods, and taking notes into this doc]((possible extension = fire lasers on touchesBegan to destroy debris))\
See MarbleMaze for maze that uses tilt (accelerometer) for rolling player through maze, hack for using touch on simulator to test, swirly vortexes, maze loading from text file, tile-based game, detailed collision detection masking w/ proper enumerations, conditional compilation for simulator vs. iDevice, stopping a player dead, sucking player into vortex when hits edge, collecting stars [[several todo items in this project could do for fun/learning later]]\
See ExplodingMonkeys for custom SKSpriteNode subclass, using CoreGraphics to draw, using stride() to iterate blocks in a game sprite, drawing random buildings with lights on and off (retro style DOS looking), calling UIKit stuff from SpriteKit, using UIKit controls in SpriteKit games, communication between the SpriteKit and UIKit layers of the same app, two-player game w/ turns, texture atlas, precise collision detection option, animating player raising and lowering arm to throw spinning object, basic math/trigonometry, applying impulse vector to object (to fling bananas), starting a new game (w/ transition, etc.), deduping multiple collisions, converting coordinates between CoreGraphics, UIKit, and SpriteKit, terrain destruction [[several todo items for later]]\
\
See FourInARow project for UIKit game that uses buttons as columns, proper separation of model and view, using arrays (single and multidimensional) and tags to identify cells/buttons/chips generically, stacking chips, making UIViews into circles(chips), animating dropping a chip into a column (in UIKit), receiving taps through chips to a button column, using statics for overall game state, turn-based game w/ colored chips and UI updates, game reset, detecting four in a row straight and diagonal, AI to allow playing against the computer, implementing NSCopying and the AI protocols for GameplayKit efficiently, using activity indicator and delay for UI \'93thinking\'94\
\
See CrashyPlane for iPhone game, portrait mode, animation loop for player (propeller spinning quickly), creating layers (solid colored sky with two pieces, background image), infinitely scrolling background, parallax scrolling (different layers different speeds), objects appearing from right edge of screen and dissappearing when hit left, random rock gap selection for user to navigate through, using SKAction to automate regular creation of new rocks, adding score label that floats above other stuff, specifying a floaty gravity world (to make game easier than real gravity would be - and to make it feel like plane has propeller), using taps to keep plane from falling, animating rotation of plan in direction of movement in proportion to speed, giving a score for clearing each gap (by using a collision rectangle), exploding and stopping game when hit ground or rock, background music, Intro label w/ plane physics starting when you tap screen (and label going away), Game Over when you die (w/ stopping music and scrolling), restarting on tap in GameOver (via scene transition to new instance), confining to the screen without changing position from bounce (my own solution)\
\
See PsychicTester for doing SpriteKit-like operations in UIKit (eg. particles [stars], flipping cards, detecting touches, etc.)\
\
See Hangman (in OSX folder) for cmdline game (and example of printing full state between each round) [doesn\'92t involve SpriteKit]\
}