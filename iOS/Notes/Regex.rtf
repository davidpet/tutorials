{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\margl1440\margr1440\vieww28600\viewh15040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i\fs24 \cf0 www.regex101.com
\i0 : website for practicing different flavors with comprehensive reference of operators, etc. [best way to practice when learning][[also has a reference for looking up & learning, a regex debugger, etc.]]((shows capture groups, etc. too))[substitution box at bottom)\
\
Raw Text\
	cat		matches the text cat literally (even if surrounded by other letters)\
	a cat		literal matches can include whitespace like this\
Character Clases\
	[abc]at	matches a OR b OR c followed by at\
	[cC]		c or C\
\
	[a-z]at		matches any lowercase english letter followed by at\
	[d-g]at		matches d OR e OR f OR g followed by at\
	[0-9]		any digit\
\
	[Ca-z]		capital C or any lowercase letter\
	[A-Za-f]	matches uppercase letter or a,b,c,d,e, or f\
	[0-9a-fA-F]	any hex digit (case insensitive)\
\
	[^abc]		any character that is not a, b, or c\
	[^a-z]		any character that is not a lowercase letter\
\
	NOTE: characters that normally have significance outside of character classes do not inside them (and thus do not need to be escaped)\
\
	NOTE:	uppercase character class metacharacters negate lowercase ones\
	\\w		any word character (alphanumeric or _)\
	\\W		opposite of \\w\
	\\d		any digit\
	\\D		any non-digit\
	\\s		whitespace character\
	\\S		non-whitespace character\
	\\b		matches word boundaries (not a character but beginning or end of word)\
	\\B		matches non-word boundaries\
Quantifiers\
	NOTE: these all match the class of the previous item, not the specific item (eg. matching 3 digits means match any 3 digits, not the same digit 3 times) [use backreferences if want that]\
\
	*		0 or more of previous item\
	+		1 or more of previous item\
	?		0 or 1 of previous item\
	\{n\}		match exactly n of the previous item\
	\{n,m\}		match n to m (inclusive) of previous item\
	\{n,\}		match at least n of the previous item (the other unbounded doesn\'92t work)\
Meta Characters\
	.		match any single character other than line break (often with a quantifier coming next)\
\
	^		beginning of line anchor\
	$		end of line anchor\
	NOTE: these anchors can only be at beginning of end if you are not in multiline mode\
Grouping\
	Apr(il)				matches April (grouping has no effect here)\
	(abc)*d			matches the sequence abc 0 or more times followed by d\
	(paintings|sculpture)		matches paintings or sculptures (providing alternatives inside group)\
	NOTE: regexes use eager matching (not related to greedy) which means they match the 1st thing they can (eg. the first group alternative)\
	NOTE: can be nested\
Capture Groups\
	NOTE: capture groups are numbered (1-based) in ( order for retrieving submatches in programming languages (like modifiers, the specific way to get them is specific to the language/framework)\
\
	(abc(def))		abcdef = group 1, def = group 2\
	(abc(?:def))		group 1 = abcdef, there is no group 2 (the ?: turns off capturing) [[NOTE: it is good to use non-capturing groups when possible to reduce the amount of data processed]]\
\
	(?<firstgroup>text)	like having (text) but now the group has name \'91firstgroup\'92 [it still gets its number as normal but not recommended because not same behavior on all platforms]\
Escaping\
	\\.		escape metacharacters with \\\
	\'93\\\\.\'94		in programming languages that use \\ as escape, you have to double escape (languages with raw strings can get around this)\
	\'93\\\\\\\\\'94		to match a single backslash in a language that uses \\ to escape, you need 4 backslashes (escaping in language and then escaping in regex)\
	NOTE: what needs to be escaped inside [] is different from outside\
	NOTE: since regex101 uses // for regex (as languages like Perl do), you need to escape / with \\ if use it (eg. \\/)\
Back References\
	NOTE: These are computationally very expensive and should only be used if needed\
	\
	\\n (n is number)		match nth group in the regex (the text that matched) [left parenthesis order]\
	(\\w)\\1				match two of the same word character in a row\
\
	\\k<groupname>		backreference to a named capture group called groupname\
	\\k\'92groupname\'92		same as above\
Lookahead\
	NOTE: These are computationally very expensive and should only be used if needed\
\
	a(?=b)		matches a if followed by b (but b is not included in match)\
	a(?!b)		matches a if not followed by b (the thing following not being included in the match)\
Modifiers\
	NOTE: How you use these modifiers depending on how you\'92re using regexes (eg. in Perl /regex/ig, in Swift and C# using enum options in the flags params)\
	NOTE: these are all not present by default (which means their behavior is off)\
\
	g		global (search for all matches in string) (first match is default)\
	i		case insensitive (sensitive is the default)\
	m		multiline mode (match across multiple lines) (default is to match only within 1 line)\
	s		single line (. includes newline) (default is for it not to) (NOTE: this sounds like opposite of m but it is not)\
	U (capital)	ungreedy (non-greedy matching) (default is greedy, meaning quantifiers match the longest string possible)\
Examples\
	colou?r		match color or colour\
	\\d\{3\}-\\d\{4\}	match 7-digit phone number (in exact xxx-xxxx format)\
Replacements\
	NOTE: the mechanism differs significantly by language\
	NOTE: in general, the full text matching your regex is replaced with the replacement string you give (this section shows syntax for replacement strings)\
	NOTE: will often have things like \\b in the regex which won\'92t mean much in the replacement\
\
	cat			replace the matched text with the literal word cat\
	$0			whole matched text\
	$1, $2, etc.		matched capture groups\
	$\{name\}		using named capture group\
	NOTE: regexes are very tolerant when it comes to mixing $ syntax with other things (eg. if there is no $12, then $12 will mean $1 followed by 2, but putting a letter after it is pretty unambiguous)\
Things to Check when Learning New Framework\
	*are raw strings available?\
	*how does it do modifiers?\
	*how does it do capture groups (numbered and named)?\
	*how does it do lookahead and backreferences?\
	*does it support the standard metacharacters and character classes?\
	*how does it to replacements?\
	*compiling vs. running on the fly\
\
TODO: watch Regular Expressions Videos in Beyond Code (except grep)\
TODO: can you mix ^ and not ^ in same []?\
TODO: bring in notes from Anki, etc.\
TODO: possibly some notes on PCRE vs. JavaScript vs. Python, etc.\
}