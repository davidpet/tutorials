{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red92\green38\blue153;\red92\green38\blue153;\red0\green0\blue0;
\red196\green26\blue22;\red170\green13\blue145;\red170\green13\blue145;\red63\green110\blue116;\red46\green13\blue110;
}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c36078\c14902\c60000;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c66667\c5098\c56863;\csgenericrgb\c24706\c43137\c45490;\csgenericrgb\c18039\c5098\c43137;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid103\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid204\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid205\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid301\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid303\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid304\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid403\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid404\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid405\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid703\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid704\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid803\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1002\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1003\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}}
\margl1440\margr1440\vieww28600\viewh15040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Cocoa Touch is the collection of libraries that help build applications\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Foundation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 basic stuff used by the rest of the frameworks\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul NSObject\ulnone  - basic object for Cocoa Touch framework and Objective-C (but not for all of Swift)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}consider inheriting class from this if going to use certain functionality from Cocoa Touch on that class\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}addObserver(observer, keyPath, options, context)
\i0 : use #keyPath() format to choose property chain, use context if need to identify origin points\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i observeValue
\i0  is called on the observer when the property is changed\
{\listtext	\uc0\u8259 	}usually should be matched with 
\i removeObserver
\i0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i observeValue
\i0 : called for KVO (key-value observing) changes\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSRange\ulnone  - basic range object used in apple frameworks\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}create using 
\i NSMakeRange
\i0  function (most likely will want to use utf16.count instead of characters.count if using in a Cocoa Touch object) [due to Objective-C compatibility]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}location
\i0  - start position of the range (
\i NSNotFound
\i0  if range not present in text)\
{\listtext	\uc0\u8259 	}
\i length
\i0  - length of the range\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul Data\ulnone  - mutable collection with copy-on-write behavior (used by many Cocoa Touch calls to represent raw data)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(contentsOf: url)
\i0  - loads data from url (can throw) [blocking call]\
{\listtext	\uc0\u8259 	}
\i write(to:)
\i0  - write the contents to a file\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul UUID\ulnone  - unique identifier\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init()
\i0  - create a new identifier\
{\listtext	\uc0\u8259 	}
\i uuidString
\i0  - string property to get text representation of the UUID\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul URL\ulnone  - struct representing URL used by many Cocoa Touch calls\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i appendingPathComponent()
\i0  - adds a component to the url path\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul UserDefaults\ulnone  - data store where you can place key-value data as long as the app is installed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}this store is 
\b not safe for private data
\b0 \
{\listtext	\uc0\u8259 	}
\i standard
\i0  - property that represents the UserDefaults instance you should normally use\
{\listtext	\uc0\u8259 	}don\'92t put more than about 100 KB of data in here or it will slow down your app loading\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}if you use 
\i NSCoding
\i0  to transform the object to 
\i Data
\i0 , you can read/write directly to disk if too big for the 100 KB limit\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}supports a huge range of types by default (Int, Bool, arrays, dictionaries, URL, Date, etc.)\
{\listtext	\uc0\u8259 	}
\i set(value, forKey: keyname)
\i0  - create or update a value in the defaults with a given keyname\
{\listtext	\uc0\u8259 	}retrieval methods look like this: bool(forKey:), object(forKey:), etc.\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}return default values instead of optionals\
{\listtext	\uc0\u8259 	}object() returns Any? instead of a default (should use ?? operator)\
{\listtext	\uc0\u8259 	}the examples use object() to get arrays and dictionaries\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}if working with custom types, you have to conform to 
\i NSCoding
\i0  protocol and use 
\i NSKeyedArchiver
\i0  and 
\i NSKeyedUnarchiver
\i0  classes to get and set a 
\i Data
\i0 , which you can then write with 
\i set\
\ls1\ilvl1
\i0 {\listtext	\uc0\u8259 	}NOTE: the tutorial shows resaving the whole array instead of just the pieces that changed (or instead of making a key for each person or whatever)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSKeyedArchiver\ulnone  - static class for transforming an object graph (object and all the objects it references, etc.) into a 
\i Data
\i0  for use with 
\i UserDefaults
\i0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i archivedData(withRootObject:)
\i0  - static method to obtain a 
\i Data
\i0  for an object graph\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}the object must be either one of the built-in types automatically supported, or implement NSCoding protocol\
{\listtext	\uc0\u8259 	}if an array or dictionary, all members must be one of the built-in types or implement NSCoding\
{\listtext	\uc0\u8259 	}can archive and unarchive arrays and dictionaries of NSCoding types and the array/dictionary portion will be handled transparently\
{\listtext	\uc0\u8259 	}NOTE: you can read/write the 
\i Data
\i0  object directly to disk if it\'92s too big to put in 
\i UserDefaults
\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSKeyedUnarchiver\ulnone  - static class for transforming a 
\i Data
\i0  into an object (assuming it was transformed originally using 
\i NSKeyedArchiver
\i0 )\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i unarchiveObject(with:)
\i0  - takes the 
\i Data
\i0  object (eg. from 
\i UserDefaults
\i0 ) and transforms it back to the original object using NSCoding protocol\
{\listtext	\uc0\u8259 	}you must cast the object from Any?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSCoding\ulnone  - protocol to allow for serializing object graph as 
\i Data
\i0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}many of Apple\'92s library types in UIKit, SpriteKit, etc. conform to this protocol\
{\listtext	\uc0\u8259 	}WARNING: you also have to inherit from NSObject or your app will crash\
{\listtext	\uc0\u8259 	}
\i required init(NSCoder)
\i0  for creating an instance of the class from a coder\
{\listtext	\uc0\u8259 	}
\i encode(NSCoder) 
\i0 for creating a 
\i Data
\i0  from a coder\
{\listtext	\uc0\u8259 	}both the init and encode methods use methods of the coder to serialize/deserialize members of the class (don\'92t need to add a header for the class or anything like that)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSCoder\ulnone  - a type that is passed into 
\i init
\i0  and 
\i encode
\i0  methods for NSCoding protocol\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i decodeObject(forKey:)
\i0  - get an object with the given key as Any? (which you can cast - safe if you are the one who did it)\
{\listtext	\uc0\u8259 	}
\i encodeObject(_:forKey:)
\i0  - add a value with a keyname to the storage for the class\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul pow()\ulnone  - raise a number to a power\
{\listtext	\'95	}\ul performSelector(inBackground:)\ulnone  - runs a method in a background thread\
{\listtext	\'95	}\ul performSelector(onMainThread:)\ulnone  - runs a method in the main UI thread\
{\listtext	\'95	}\ul arc4random()\ulnone  - random integer over the whole range (C standard lib) [not sure if this is actually in Foundation or just always in Swift]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}to get a random float, divide by Float(UInt32.max)\
{\listtext	\uc0\u8259 	}to get a random float in a range, do the same but multiply by the size of the range and add to minimum\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul arc4random_uniform(_:)\ulnone  - same thing but more uniform?  takes an upper bound\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: the arc4random functions take UInt32 instead of Int\
{\listtext	\uc0\u8259 	}to pick a number from a to b inclusive, can use arc4random_uniform of the difference plus 1, then add to a\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Dispatch\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 GCD (Grand Central Dispatch): multithreading and task queue functionality\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul DispatchQueue\ulnone  - work management queue (like a prioritized thread pool)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}like many Cocoa Touch classes, you can use static methods to get existing instances\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}global()
\i0 : get default queue (middle QoS priority in between .userInitiated and .utility)\
{\listtext	\uc0\u8259 	}
\i global(qos:)
\i0 : get queue with specified QoS priority (quality of service - used to determine CPU allocation)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}.userInteractive = UI (highest priority)\
{\listtext	\uc0\u8259 	}.userInitiated = user is waiting but it is not UI\
{\listtext	\uc0\u8259 	}.utility = user is aware of it but not waiting for it (long-running background tasks)\
{\listtext	\uc0\u8259 	}.background = lowest priority\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i main
\i0  - static queue instance representing the main application thread (use this to dispatch UI changes)\
{\listtext	\uc0\u8259 	}
\i async()
\i0 : dispatch a closure to the queue and return immediately\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls2\ilvl2\cf0 {\listtext	\uc0\u8259 	}probably want to use [unowned self] unless dispatching to main thread\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: it is NEVER ok to do UI changes in a background thread: to do that you need to dispatch a task to the 
\i main
\i0  queue\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\'95	}\ul performSelector\ulnone  - as an alternative if you just want to run a whole method in the simplest way, use performSelector function overloads (see Foundation)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}advantage of not having to worry about closure capturing\
{\listtext	\uc0\u8259 	}have to use #selector() syntax and pass in a method name\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 UIKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Interface stuff like buttons, text boxes, etc.\
\
Controls/views start with UI\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul UIView
\i \ulnone  - 
\i0 base class of views/controllers\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}you can use it directly on a view in Interface Builder (eg. to frame other views) [dragging to it does not make it a parent though]\
{\listtext	\uc0\u8259 	}\ul layer
\i \ulnone  - 
\i0 instance of CALayer representing the view at a low level (see 
\b Core Animation Framework
\b0 ) [this is the way to do things like borders at runtime]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}try to check for properties of view itself first (like backgroundColor)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul backgroundColor\ulnone  - background color of the control (UIColor)\
{\listtext	\uc0\u8259 	}\ul tag\ulnone  - integer that you can set to whatever you want (defaults to 0) (good way to distinguish controls of same type in an action)[can duplicate same value if want]\
{\listtext	\uc0\u8259 	}\ul isHidden
\i \ulnone  - 
\i0 used for hiding a view\
{\listtext	\uc0\u8259 	}\ul toolbarItems\ulnone  - array of 
\i UIToolBarItem
\i0  to load as the bottom toolbar when active in a navigation controller (separate from rightToolBarItem)\
{\listtext	\uc0\u8259 	}\ul rightBarButtonItem\ulnone  - the rightmost navigation bar button automatically used\
{\listtext	\uc0\u8259 	}\ul isToolBarHidden\ulnone  - for showing the toolbar\
{\listtext	\uc0\u8259 	}\ul sizeToFit\ulnone  - resize view to fit its container (useful for creating programmatically)\
{\listtext	\uc0\u8259 	}\ul addSubview\ulnone  - add a view (eg. a control like UILabel) to the view (if didn\'92t specify position, etc. it will go at top left on top of other subviews)[constraints generated as appropriate]\
{\listtext	\uc0\u8259 	}\ul translatesAutoresizingMaskIntoConstraints\ulnone  - set to false to disable automatic generation of constraints (if you want to do auto layout yourself in code)\
{\listtext	\uc0\u8259 	}\ul addConstraints\ulnone  - add array of Auto Layout constraints (NSLayoutConstraint) to the view\
{\listtext	\uc0\u8259 	}\ul UIViewController\ulnone  - base class for view controllers (code behind scenes)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i tabBarItem
\i0  - the tab bar icon representing the view controller if added to a tab bar controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 title
\i0 : has to be set at runtime (not same one in IB) - sets the navigation bar title (if have one) and the Back button text if have a back button in bar\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls3\ilvl3\cf0 {\listtext	\uc0\u8259 	}since it\'92s optional, you can assign an optional to it without unwrapping\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i subviews
\i0  - views that are inside the view (child controls)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls3\ilvl3\cf0 {\listtext	\uc0\u8259 	}hint: use tags to distinguish ones that you want to be able to find this way (such as when too many to make outlets one by one)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}viewDidLoad: called after UI loaded from storyboard but before displayed\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls3\ilvl3\cf0 {\listtext	\uc0\u8259 	}used to do extra setup before the scene is shown\
{\listtext	\uc0\u8259 	}can instantiate classes directly (eg. UILabel) and insert via methods like view.addSubview()\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}can set presentation to Full Screen\
{\listtext	\uc0\u8259 	}viewDidAppear, viewWillAppear, viewDidDissappear, viewWillDissappear: more life cycle hooks (make sure to call base with params)\
{\listtext	\uc0\u8259 	}loadView: for customizing which view to load (eg. to bypass storyboard and instantiate your own)[set 
\i view
\i0  member]((can still have navigation controller from storyboard))\
{\listtext	\uc0\u8259 	}storyboard: optional property UIStoryboard? (should use optional chaining just in case) representing the parent storyboard\
{\listtext	\uc0\u8259 	}view: the view instance that the controller represents\
{\listtext	\uc0\u8259 	}navigationController: optional property UINavigationController? representing the parent navigation controller if is one\
{\listtext	\uc0\u8259 	}navigationItem: for interacting with the navigation bar (such as adding buttons on view load)\
{\listtext	\uc0\u8259 	}
\i present
\i0 : call to present another view view controller (such as a UIAlertViewController to show a message)\
{\listtext	\uc0\u8259 	}
\i dismiss
\i0 : dismisses a view controller presented modally by this view controller (eg. UIImagePickerController) if it doesn\'92t do so itself (like UIAlertController does)\
{\listtext	\uc0\u8259 	}
\i prefersStatusBarHidden
\i0 : boolean computed property (readonly) you can override (defaults to false) [if true, the bar with clock, battery, etc. will be hidden when possible]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}anchors for Auto Layout: widthAnchor, heightAnchor, topAnchor, bottomAnchor, leftAnchor, rightAnchor, leadingAnchor, trailingAnchor, centerXAnchor, and centerYAnchor\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}note that anchors aren\'92t necessarily points (eg. height and width)\
{\listtext	\uc0\u8259 	}meaning of leading and trailing are swapped in right-to-left languages\
{\listtext	\uc0\u8259 	}call 
\i constraint
\i0  method of anchor, various named overloads to add different kinds of constraints\
{\listtext	\uc0\u8259 	}for example, you can addConstraint(equalTo: someothercontrol.widthAnchor) [constrain anchor equal to another anchor]((use actual view references here))\
{\listtext	\uc0\u8259 	}addConstraint(equalToConstant:) for something like setting a height\
{\listtext	\uc0\u8259 	}weird part is you have to do .isActive = true at end\
{\listtext	\uc0\u8259 	}
\i example
\i0 : label.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true\
{\listtext	\uc0\u8259 	}remember to disable translatesAutoresizingMaskIntoConstraints if needed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UITableViewController\ulnone  - view that has rows of data that can be populated at runtime\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i tableView
\i0  - the table view this table view controller represents\
{\listtext	\uc0\u8259 	}navigate down to the cell (prototype) in outline and set it up to look like what each cell will look like (use Identifier field for each prototypical cell type)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls3\ilvl3\cf0 {\listtext	\uc0\u8259 	}set \'93Accessory\'94 for things you want to show up in the cell (eg. Disclosure Indicator for grey arrow to tell you there is a detail view)\
{\listtext	\uc0\u8259 	}cell can be set to custom and either designed or set certain magic properties (eg. imageView.image) to make something automatically appear (can do multiple such as image and text)\
{\listtext	\uc0\u8259 	}can also subclass the cell class and change the prototype in IB to be of that type -> then you can have code behind the cell with a custom design in IB\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}have to override tableView() methods to implement cell loading behavior\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls3\ilvl3\cf0 {\listtext	\uc0\u8259 	}tableView(_:numberOfRowsInSection:) needed to say how many rows you have\
{\listtext	\uc0\u8259 	}tableView(_:cellForRowAt:) needed to create a cell based on a row number (probably want to obtain cell from 
\i dequeueResuableCell
\i0  and populate it)(use indexPath.row)\
{\listtext	\uc0\u8259 	}tableView(_:didSelectRowAt:) for responding to select (tapping) a cell\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls3\ilvl4\cf0 {\listtext	\uc0\u8259 	}WARNING: autocomplete will do didDeselectRowAt first which can be horribly confusing\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i dequeueResuableCell()
\i0  can be used to create or reuse an already-created cell\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UICollectionViewController\ulnone  - very similar to UITableViewController but displays grid instead of list\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}see UITableviewController (most of what worked there works here)\
{\listtext	\uc0\u8259 	}replace \'93tableView\'94 with \'93collectionView\'94 when translating instructions to collection views (eg. the view class, the cell class, etc.)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul \ulc0 UIAlertController\ulnone  - equivalent of MsgBox in the iOS world\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}instantiate with options like title, message, etc. (use .alert for informing and .actionSheet for selecting options)\
{\listtext	\uc0\u8259 	}
\i addAction
\i0  to add buttons (takes closure so you can say what to do when button pressed)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}can also take UIAlertAction instance that you can create locally\
\ls4\ilvl3{\listtext	\uc0\u8259 	}the title of the action is readable in the handler\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i addTextField
\i0  to add an input text box for the user to enter something (access via 
\i textFields
\i0  array)[can leave out the handler]\
{\listtext	\uc0\u8259 	}
\i textFields
\i0  - array of text fields that you added (so that you can read the value)\
{\listtext	\uc0\u8259 	}use 
\i present
\i0  in the view controller to pop it up\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UIAlertAction\ulnone  - custom action for UIAlertController buttons\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}takes a closure of code to run when the button is pushed (but can commit that for something simple like OK button to dismiss)\
{\listtext	\uc0\u8259 	}good idea to capture the UIAlertController and view controller (self) as unowned\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UIActivityViewController\ulnone  - lets you popup menu that lets you share content (eg. images to Facebook, etc.) [options depend on what you have installed]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}initialize with list of items and optional list of services (empty if none)\
{\listtext	\uc0\u8259 	}set 
\f1\fs22 \cf2 \CocoaLigature0 popoverPresentationController\cf0 ?.\cf2 barButtonItem 
\f0\fs28 \cf0 \CocoaLigature1 to anchor the popover to a button on iPad (ignored on iPhone)\
{\listtext	\uc0\u8259 	}use 
\i present
\i0  to pop up as normal\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul SLComposeViewController\ulnone  - (import Social package) alternative to UIActivityViewController (the full popup with album description, etc.)\
{\listtext	\uc0\u8259 	}\ul UIImagePickerController\ulnone  - can instantiate to let you pick images from camera roll, take pictures with camera, etc. (by default does not give you camera option)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i allowsEditing
\i0  - if true, user can do things like crop, etc.\
{\listtext	\uc0\u8259 	}
\i delegate
\i0  - in order to react to the result of the user selection, you need to set delegate to a class that conforms to UIImagePickerControllerDelegate and UINavigationControllerDelegate\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}all methods of these protocols are optional, so just declaring them makes the project build\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}use 
\i present
\i0  in the view controller just like you do for UIAlertController (the delegate class, usually the view controller, will be called as appropriate)\
{\listtext	\uc0\u8259 	}NOTE: you will need to set \'93Privacy - Photo Library Usage Description\'94 key in Info.plist or this will crash\
{\listtext	\uc0\u8259 	}
\i sourceType
\i0  - can set to .camera to specify to take from camera\
{\listtext	\uc0\u8259 	}
\i isSourceTypeAvailable
\i0  - call to check whether a source type such as .camera is available before setting it (eg. not available on simulator)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UIImagePickerControllerDelegate\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 \ulnone {\listtext	\uc0\u8259 	}
\i imagePickerController(_, didFinishPickingMediaWithInfo) - 
\i0 for responding to user selecting an image\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i info
\i0  parameter is dictionary of values about the image that was picked\
{\listtext	\uc0\u8259 	}can use global variables from UIKit as keys (eg. UIImagePickerControllerEditedImage to represent either original or edited if editing enabled)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIStoryboard\ulnone  - storyboard type\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}instantiate as 
\f1\fs22 \cf3 \CocoaLigature0 UIStoryboard\cf4 (name: \cf5 "Main"\cf4 , bundle: \cf6 nil\cf4 ) 
\f0\fs28 \cf0 \CocoaLigature1 to get access to storyboard (eg. from AppDelegate) [nil = current app bundle]\
{\listtext	\uc0\u8259 	}instantiateViewController: can instantiate another view in the storyboard by storyboard ID string (identity inspector of view controllers)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}can instantiate multiple of same and they will have their own separate state but same behavior\
{\listtext	\uc0\u8259 	}can instantiate things like nav controllers (and duplicate them) as well\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UINavigationController\ulnone  - wraps navigation between scenes in storyboard and adds navigation bar to the scenes\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}pushViewController() to push an instantiated view controller onto stack and display it [instantiated directly or with storyboard methods]\
{\listtext	\uc0\u8259 	}has a stack of scenes that can be layered and unwound\
{\listtext	\uc0\u8259 	}by default, newly stacked scenes will get a bar with a Back button and also support swiping back\
{\listtext	\uc0\u8259 	}to allow for tapping to go to full screen, set 
\i hidesBarsOnTap
\i0  property\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}generally only want for certain views, so do it in code in viewWillAppear and viewWillDissappear\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}set 
\i title
\i0  property of navigation controller in viewDidLoad() after super to have title show up in navigation bar (and as back button if next view on stack)[NOTE: can have back button and title in same view nav bar]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UINavigationItem\ulnone  - navigation bar functionality at runtime (eg. in viewDidLoad)\ul \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}
\i rightBarButtonItem
\i0  = UIBarButtonItem instance representing right button for the navigation bar\
{\listtext	\uc0\u8259 	}
\i leftBarButtonItem
\i0  = same but on left side\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIBarButtonItem\ulnone  - navigation bar button items (created to be passed into members of UINavigationItem)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}initialization requires old #selector syntax instead of closure\
{\listtext	\uc0\u8259 	}different styles such as .add, .refresh, .flexibleSpace (for pushing other buttons as it fills up) [can be used in between buttons to align one to left and one to right], etc.\
{\listtext	\uc0\u8259 	}can also use 
\i customView
\i0  initializer to create a view (eg. UIProgressView) to use as the button\
{\listtext	\uc0\u8259 	}can use built-in ones (eg. + and refresh icons) or provide own text, image, etc.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UITabBarController\ulnone  - wraps tab bar functionality (tab bar at bottom of screen)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}manages an array of view controllers that user can tap between\
{\listtext	\uc0\u8259 	}can do it all in Interface Builder but often better to do 1 controller in IB and then leverage in multiple tabs via code (eg. instantiate more copies of storyboard view controller to dynamically insert)\
{\listtext	\uc0\u8259 	}select the items in IB by clicking on them (eg. the default)\
{\listtext	\uc0\u8259 	}\ul UITabBarItem\ulnone  - a single icon in the tab bar\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}can set System Item to various things like \'93Most Recent\'94 which have special icons associated with them (if you change the text, the icon will go away)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}can configure tab bar items in storyboard\
{\listtext	\uc0\u8259 	}to add tabs programatically, set view controller\'92s tabBarItem to a UITabBarItem, and then use tabBarController?.viewControllers?.append(viewController)\
{\listtext	\uc0\u8259 	}to check which tab you\'92re in from viewdidLoad(), get tabBarItem.tag\
{\listtext	\uc0\u8259 	}if you add enough tabs, eventually the extras will get wrapped with a \'93More\'94 button by iOS\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UITableView\ulnone  - actual table view represented by table view controller\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i reloadData
\i0 : reloads the table content (eg. if you just swapped out the storage behind it) [can be called from viewDidLoad]\
{\listtext	\uc0\u8259 	}
\i insertRows
\i0 : for adding individual rows without the need to do a full reload (with animation) [.automatic is a good animation option to use]\
{\listtext	\uc0\u8259 	}NOTE: make sure you add to the data that your table view loads from before calling a method like insertRows\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UITableViewCell\ulnone  - a cell in a table view (create dynamically for cellForRowAt method in table view controller)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i textLabel
\i0  - for changing text in cell (custom or one that includes text) [overflow text automatically replaced with \'85]\
{\listtext	\uc0\u8259 	}
\i detailTextLabel
\i0  - secondary text label you can set (eg. with subtitle cell type) [overflow text automatically replaced with \'85]\
{\listtext	\uc0\u8259 	}
\i imageView
\i0  - for setting an image (can use with custom, etc.)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIProgressView\ulnone  - progress bar\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i progress
\i0  - float from 0 to 1 representing the progress\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIImageView\ulnone  - for displaying images\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i image
\i0  property set to a UIImage instance to display\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIImage
\i \ulnone  - 
\i0 actual image object\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}use the initializer with 
\i named
\i0  to load an image with the given name from your app bundle\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}can initialize form a CGImage as well\
{\listtext	\uc0\u8259 	}Content Mode: Aspect Fit = show whole image with correct aspectt ratio, Aspect Fill = fill whole space without distorting (some will get cropped off - but may need to tell it to clip in AI)\
{\listtext	\uc0\u8259 	}
\i setImage(_:for:)
\i0  = change button image to a UIImage for given state(s) (.normal is good default)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIButton
\i \ulnone  -
\i0  button the user can click (looks like flat text with colored background by default)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}can set to an image (named image resource)\
{\listtext	\uc0\u8259 	}
\i Events: 
\i0 touchUpInside = user tapped and released (clicked)\
{\listtext	\uc0\u8259 	}by default, has border in IB but not at runtime\
{\listtext	\uc0\u8259 	}disable default animation (and showing of text) by giving it Custom type\
{\listtext	\uc0\u8259 	}Hint: if set type to custom and set a size, it will be respected at runtime\
{\listtext	\uc0\u8259 	}
\i addTarget
\i0  - for adding a method to handle taps at runtime (.touchUpInside is normal option to use)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: this might be a method of UIView instead of UIButton (move later if is)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UISlider\ulnone  - slider control\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}useful events like value changed\
{\listtext	\uc0\u8259 	}
\i value
\i0  - float value of the slider (can get it directly after value changed event triggered, etc.) (defaults to 0.5)\
{\listtext	\uc0\u8259 	}
\i minimum
\i0  and 
\i maximum
\i0  - the range of the slider (defaults to 0 and 1)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UILabel\ulnone  - text label\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i text
\i0  property for setting text at design time or runtime\
{\listtext	\uc0\u8259 	}by default no border at runtime (but there is in IB)\
{\listtext	\uc0\u8259 	}set lines to 0 to let text go over as many lines as needed\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UITextField\ulnone  - editable text field\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i text
\i0  property representing the actual text\
{\listtext	\uc0\u8259 	}by default can\'92t change the height (need to change the border style from the rounded one)\
{\listtext	\uc0\u8259 	}placeholder text in IB sets initial text that will go away when user clicks into the field\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UITextChecker\ulnone  - for spell checking text (eg. user input)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}instantiate in code with default initializer\
{\listtext	\uc0\u8259 	}
\i rangeOfMisspelledWord
\i0 : get first misspelling in a string range as an NSRange (can call again with next offset to continue search)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIColor\ulnone  - represent colors in the UIKit layer\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}static properties (of type UIColor) with names of standard colors\
{\listtext	\uc0\u8259 	}
\i cgColor
\i0  property to read the color as a 
\i CGColor
\i0  (see Core Animation) [NOTE: can use for your own custom UIColor too]\
{\listtext	\uc0\u8259 	}initializer that takes red, green, blue, alpha as CGFloat from 0 to 1.0 for custom color [can use cgColor to pass to CA layer]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}alpha 1.0 = fully opaque\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul FileManager\ulnone  - helps deal with file system\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}default: static instance to help manage the system\
{\listtext	\uc0\u8259 	}contentsOfDirectory: list of filenames (shallow) in the given directory\
{\listtext	\uc0\u8259 	}urls: get URL instances representing given paths (for instance use urls(for: .documentDirectory, in: .userDomainMask) to get documents directory for app(array of 1 URL))\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}this directory is private to the app and synced with iCloud for the user\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul Bundle\ulnone  - helps deal with resources inside your app bundle\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}main: static instance to manage your main app bundle at runtime\
{\listtext	\uc0\u8259 	}resourcePath: path to resources in your bundle such as images or text files\
{\listtext	\uc0\u8259 	}path(forResource:ofType:): for getting path of a specific file in your application (eg. path(forResource: \'93myfile\'94, ofType: \'93txt\'94) to find myfile.txt dragged into project)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul IndexPath
\i \ulnone  - 
\i0 row and section number (or item number for collection view) for table view operations and things like that\
{\listtext	\'95	}\ul NSLayoutConstraint\ulnone  - an Auto Layout constraint [in UIKit even though starts with NS]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i constraints
\i0 (withVisualFormat:) - static method for generating an array of constraints based on Auto Layout Visual Format Language (VFL)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}VFL = string that specifies your layout (knowing it can help understand constraints better even if use Interface Builder)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}start with H: for horizontal layout, V: for vertical layout (space after : not allowed)\
{\listtext	\uc0\u8259 	}| and | represent edges of container (the view you\'92re adding the layout to)\
{\listtext	\uc0\u8259 	}[ and ] represent edges of view within the container\
{\listtext	\uc0\u8259 	}name of view goes in between the [ and ]\
{\listtext	\uc0\u8259 	}can ommit edges when obvious and not part of constraint (eg. everything comes after |), layout flows in the natural direction (left-right, top-bottom)\
{\listtext	\uc0\u8259 	}- means space (10 points by default)\
{\listtext	\uc0\u8259 	}() after name provides a place to specify constraints in this direction (eg. ==88 to mean equals 88 points, >= 10 to mean at least 10 points)\
{\listtext	\uc0\u8259 	}to override the default 10 points for spacing with a dash, use -()- where the () contains the condition as above\
{\listtext	\uc0\u8259 	}provide NAME instead of SIZE in () to use a \'93metric\'94 from the metrics dictionary (don\'92t need the == anymore in this case)\
{\listtext	\uc0\u8259 	}a NAME can also be used instead of SIZE to specify equality to another view within the same VFL\
{\listtext	\uc0\u8259 	}put @N with a priority number as N (1 to 1000) after the condition in () to give priority of that condition [1000 = must have (default)] (all constraints considered but priority taken into account for CONFLICTS)\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls5\ilvl4\cf0 {\listtext	\uc0\u8259 	}even if a constraint can\'92t be satisifed, Auto Layout will get as close as it can given the priority and other constraints\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}Examples\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls5\ilvl4\cf0 {\listtext	\uc0\u8259 	}H:|[label1]|					horizontal layout, label1 fills the width of the container\
{\listtext	\uc0\u8259 	}V:|[label1]-[label2]-[label3]		vertical layout, label1 top = top of container, other labels follow with 10 points space between them [NOTE: no | at end]\
{\listtext	\uc0\u8259 	}V:|[label1(==88)]-(>=10)-]|		vertical layout, label1 is at top, then 88 points tall, and there is at least 10 points more of space to the bottom\
{\listtext	\uc0\u8259 	}V:|[label1(labelHeight)]]|		shows using a metric\
{\listtext	\uc0\u8259 	}V:|[label1(labelHeight@999)]-[label2(label1)]|            label1\'92s height set at 999 priority, label2 equal to label1 height (with 1000 priority)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}also takes a dictionary of name to UIView so that it can find your views by name from the VFL\
{\listtext	\uc0\u8259 	}also takes a dictionary of optional metrics to pass in (a metric is a named size that can be referred to within the VFL)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul Auto Layout\ulnone  - for adapting layout to different sized devices\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}2 rules your layout rules must follow\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}must be complete (can\'92t specify x without y)\
{\listtext	\uc0\u8259 	}must not contradict each other (eg. items overlap coordinates)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}If your layout contradicts itself, you will get unpredictable results (eg. one of the constraints violated, views smushed, etc.)\
{\listtext	\uc0\u8259 	}To do in code instead of in Interface Builder, do (for example) view.addConstraints() in viewDidLoad() and use VFL to constrain all the controls\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}just keep adding horizontal and vertical constraints as desired until done\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}Another way to do it in code is to use the anchor properties of UIView instances (accomplishes same thing but in a different way)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}good to understand this one because it deals with the anchors which show up in IB\
{\listtext	\uc0\u8259 	}see UIView above for explanation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}Recommended to do as much as you can in IB and mix in anchors and/or VFL when it helps to make it easier, cleaner, etc.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul MVC\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}storyboard scene is 
\i view
\i0 \
{\listtext	\uc0\u8259 	}controller is 
\i controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2
\i0 \cf0 {\listtext	\uc0\u8259 	}own the models\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}data classes are 
\i models\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2
\i0 \cf0 {\listtext	\uc0\u8259 	}populated on child views when created (sometimes directly)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul Delegation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}an object (such as a view) has a member of a type of a given protocol\
{\listtext	\uc0\u8259 	}often in examples the delegate object is the view controller\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul AppDelegate\ulnone  - main application object (implements certain protocols and has a reference to the main window)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i application(_, didFinishLaunchingWithOptions:)
\i0  - called when application is ready to run (window.rootViewController and things like that are set)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}good place to do things like inject view controllers into tabs at the top level (so that you don\'92t have to duplicate in storyboard)\
{\listtext	\uc0\u8259 	}UIStoryBoard can be instantiated to get access to the storyboard\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i window
\i0  - a UIWindow instance representing the application window (container for the top-level view controller(s))\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIWindow\ulnone  - a window (container for view controllers)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i rootViewController
\i0  - the top-level view controller of the storyboard (eg. tab bar or nav bar or main view)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UITouch\ulnone  - information about screen touches (used by UIKit and SpriteKit)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i location(in:)
\i0  - CGPoint representing the location of the touch relative to the given container\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIImageJPEGRepresentation()\ulnone  - function to create a 
\i Data
\i0  containing a UIImage (input) compressed to jpeg (quality in input as well)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls5\ilvl0\cf0 {\listtext	\'95	}\ul UIImageWriteToSavedPhotosAlbum()\ulnone  - write a UIImage (including a UIImageView.image for instance) to the user\'92s photo library (camera roll if has camera, else saved photos) and call method (selector syntax) when done\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: even if this is a filtered version of an existing image, it should end up as a copy\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
Core Animation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Animation - imported via UIKit
\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CALayer\ulnone  - drawing layer below UIKit views in terms of abstraction (pointed to by member of UIVIew)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 borderWidth
\i0 : for setting thickness of border in points (default black)\
{\listtext	\uc0\u8259 	}
\i borderColor
\i0 : for setting a color other than black on the border of a view\
{\listtext	\uc0\u8259 	}
\i cornerRadius
\i0 : for creating rounded corners\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0
\fs36 \cf0 {\listtext	\'95	}
\fs28 \ul CGColor\ulnone  - color in the Core Animation layer (lower level than UIColor although UIColor can convert to CGColor)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\fs28 to make your own color, make UIColor and use cgColor magic property
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
GameplayKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 General functionality that can be used for games or apps (always installed anyway).
\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul GKRandomSource\ulnone  - random number functionality\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 sharedRandom()
\i0  - static method to get shared random number generator of the system (as an instance of 
\i GKRandomSource
\i0 )\
\ls7\ilvl1
\fs36 {\listtext	\uc0\u8259 	}
\i\fs28 arrayByShufflingObjects(in:)
\i0  - instance method to return a shuffled version of an array\
\ls7\ilvl1
\fs36 {\listtext	\uc0\u8259 	}
\i\fs28 nextInt(upperBound:)
\i0  - next integer from 0 to upperBound, exclusive\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0
\fs36 \cf0 {\listtext	\'95	}
\fs28 \ul GKRandomDistribution\ulnone  - random number distribution functionality\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 init(lowestValue:highestValue:)
\i0  - gets a distribution between two inclusive endpoints\
{\listtext	\uc0\u8259 	}
\i nextInt()
\i0  - a number from the random distribution instance
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
WebKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Web browsing and HTML functionality.
\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul WKWebView\ulnone  - web browser view (render web page or raw html content)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}can set 
\i view
\i0  of view controller object to an instance of it and set the controller as the delegate (bypassing having to use that view in the storyboard)\
{\listtext	\uc0\u8259 	}
\i navigationDelegate
\i0 : set to class (eg. view controller) that will handle browsing actions for the view [must implement 
\f1\fs22 \cf2 \CocoaLigature0 WKNavigationDelegate protocol]\
\ls8\ilvl1
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}\ul WKNavigationDelegate\ulnone  - protocol that implements navigation functions for WKWebView\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls8\ilvl2\cf0 {\listtext	\uc0\u8259 	}all methods are optional\
{\listtext	\uc0\u8259 	}methods start with 
\i web\
\ls8\ilvl2
\i0 {\listtext	\uc0\u8259 	}
\i webView(_:didFinishNavigation)
\i0 : for responding to navigation to a url (eg. to set title)\
{\listtext	\uc0\u8259 	}
\f1\fs22 \CocoaLigature0 webView(\cf7 _\cf0  webView: \cf2 WKWebView\cf0 , decidePolicyFor navigationAction: \cf2 WKNavigationAction\cf0 , decisionHandler: \cf7 @escaping\cf0  (\cf2 WKNavigationActionPolicy\cf0 ) -> \cf2 Void\cf0 )\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls8\ilvl3
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}for deciding whether to allow navigation to a given url\
{\listtext	\uc0\u8259 	}see example in Project 4 if need to use this (it\'92s a little complicated and weird)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i load
\i0 : for loading a web page (eg. 
\f1\fs22 \cf8 \CocoaLigature0 webView\cf0 .\cf9 load\cf0 (\cf2 URLRequest\cf0 (url: url)))\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls8\ilvl2\cf0 \CocoaLigature1 {\listtext	
\f2 \uc0\u8259 
\f1 	}NOTE: it has to be https and not http because of security reasons (ignores you for http)\CocoaLigature0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}
\i loadHtmlString
\i0 : for loading HTML content directly (instead of from the web)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}reload
\i0 : for refreshing\
\ls8\ilvl1
\i {\listtext	\uc0\u8259 	}allowsBackForwardNavigationGestures
\i0  - set to true to support swiping back and forth to navigate\
{\listtext	\uc0\u8259 	}
\i title
\i0 : can be retrieved after navigating to a web page (eg. to set the navigation bar title)\
{\listtext	\uc0\u8259 	}
\i estimatedProgress
\i0 : from 0 to 1, but delegate doesn\'92t tell you when it changes, so use KVO\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
SpriteKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 2d Games (inc. sprites, fonts, physics, particle effects, etc.)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul Coordinates\ulnone  \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}Y axis is flipped from normal (0 is bottom of screen)\
{\listtext	\uc0\u8259 	}Coordinates of an object are coordinates of the center\
{\listtext	\uc0\u8259 	}Angles are in radians, not degrees (true in UIKit too) [CGFloat.pi for 180 degrees]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul FPS\ulnone  - displayed by default until you turn it off in scene editor -> aiming for 60 FPS for games\
{\listtext	\'95	}\ul SKScene\ulnone  - represents a scene in SpriteKit\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}roughly equivalent to an app controller in UIKit in terms of importance and position in the program\
{\listtext	\uc0\u8259 	}
\i didMove(to:)
\i0  - sort of equivalent to 
\i viewDidLoad
\i0  from UIKIt (the place to do initialization)\
{\listtext	\uc0\u8259 	}
\i touchesBegan()
\i0  - override this to handle when the user touches the screen\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}you get a set of UITouch (from UIKit) describing the places that are being touched\
{\listtext	\uc0\u8259 	}use 
\i self
\i0  (the scene) as the reference point for locations\
{\listtext	\uc0\u8259 	}good place to detect label/button taps as well\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i addChild()
\i0  - add a node (such as SKSpriteNode, SKLabelNode, etc.) to the scene\
{\listtext	\uc0\u8259 	}
\i physicsBody
\i0  - set this to an SKPhysicsBody if you want to have physics act on it (eg. have SKSpriteNodes inside react with the edges)\
{\listtext	\uc0\u8259 	}
\i physicsWorld
\i0  - SKPhysicsWorld representing overall physics behavior that affects all the bodies, such as gravity and collision detection\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}to make the scene detect its own collisions, set physicsWorld.contactDelegate to self\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i frame
\i0  - CGRect describing the rectangle containing the scene\'92s content\
{\listtext	\uc0\u8259 	}
\i nodes(atLocation:)
\i0  - get an array of nodes at a given position (eg. when detected a tap)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKSpriteNode\ulnone  - main image/sprite class\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}most of the methods below are actually on SKNode (refactor this later)\
{\listtext	\uc0\u8259 	}
\i init(imageNamed:)
\i0  - load an image from the assets by name and wrap it in an SKSpriteNode\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}probably will want to change other properties like position once you have instance\
{\listtext	\uc0\u8259 	}size will already be set for you\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(color:size:)
\i0  - load a rectangle with the given color (UIColor) and size (CGSize)\
{\listtext	\uc0\u8259 	}
\i size
\i0  - CGSize with size information for the node\
{\listtext	\uc0\u8259 	}
\i position
\i0  - CGPoint representing the position of the center of the image in its container\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}it\'92s ok to have it go off screen\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i blendMode
\i0  - how the image combines with other images at the same positions (like in Photoshop)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}.replace = simple pixel override (fastest way) [definitely use this for background][don\'92t usually have to set if using physics]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i zPosition
\i0  - the z-order number of the item (use -1 for background)(don\'92t usually HAVE to set if using physics)\
{\listtext	\uc0\u8259 	}
\i zRotation
\i0  - rotation about the z-axis in radians (counterclockwise on the screen)\
{\listtext	\uc0\u8259 	}
\i physicsBody
\i0  - set this to an SKPhysicsBody if you want it to have physics act on it instead of it being static on the screen\
{\listtext	\uc0\u8259 	}
\i name
\i0  - optionally set this to a string that will be used to identify the object (for instance in collision detection) [can give multiple objects same name to name them by type]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: this is the preferred way rather than storing references to objects or whatever\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i run()
\i0  - add an SKAction to the execution list for the node\
{\listtext	\uc0\u8259 	}
\i collisionBitMask
\i0  - which nodes this thing can collide with (defaults to everything)\
{\listtext	\uc0\u8259 	}
\i contactTestBitMask
\i0  - which collisions should the contact delegate be notified about (defaults to none)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: setting it to collsionBitMask makes it notify of everything (hack for now)\
{\listtext	\uc0\u8259 	}make sure to set it on both objects of the collision\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i removeFromParent()
\i0  - removes the node from its parent node (eg. remove a sprite from a scene after the character dies)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKPhysicsBody\ulnone  - representation of physics properties within SpriteKit (set as properties of nodes)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}once you set a node to have a physics body, the behavior is handled automatically including gravity, animation, collision reaction, etc.\
{\listtext	\uc0\u8259 	}by default, things will accelerate with gravity to the bottom of the screen, bounce off each other, stack, tip each other over, etc.\
{\listtext	\uc0\u8259 	}balls will even roll!\
{\listtext	\uc0\u8259 	}HINT: if you set node to a picture of a ball with a transparent background and give it a circular physics body of the right radius, it will make a bouncing ball (but no smushing)\
{\listtext	\uc0\u8259 	}
\i init(rectangeOf:)
\i0  - simple initializer to set a rectangular physics body (eg. set to the same size as your SKSpriteNode)\
{\listtext	\uc0\u8259 	}
\i init(edgeLoopFrom:)
\i0  - initialize an edge loop (something that just bounces things off - for instance set to frame member of scene to contain things inside the scene)\
{\listtext	\uc0\u8259 	}
\i init(circleOfRadius:)
\i0  - initialize a circular physics body\
{\listtext	\uc0\u8259 	}
\i restitution
\i0  - how bouncy the item is (from 0 bounciest to 1 no bounce) [default seems to be 1]\
{\listtext	\uc0\u8259 	}
\i isDynamic
\i0  - if true (the default) object will be moved by gravity and other objects (set to false to make it stationary and then it will just affect objects that hit it)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKPhysicsWorld\ulnone  - an overall physics world (eg. gravity, collision detection, etc.)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i contactDelegate
\i0  - set to something that conforms to SKPhysicsContactDelegate protocol in order to enable collision detection\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}remember to also set the nodes\'92 collisionBitMask and contactTestBitMask as needed\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKPhysicsContactDelegate\ulnone  - protocol to conform to in order to detect collisions (eg. conform your scene to this)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}for just having objects bounce off each other, you don\'92t need collision detection, but for detecting when collisions happen you do\
{\listtext	\uc0\u8259 	}
\i didBegin(_ contact: SKPhysicsContact)
\i0  - implement this to detect collisions between two objects\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2\cf0 {\listtext	\uc0\u8259 	}use contact.bodyA.node and contact.bodyB.node to know which nodes were involved (could come in either order)\
{\listtext	\uc0\u8259 	}use node names to determine types of objects\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKAction\ulnone  - represents an action such as a movement or rotation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i rotate(byAngle:duration:)
\i0  - factory method to create an SKAction that represents a rotation (radians and seconds)\
{\listtext	\uc0\u8259 	}
\i repeatForever(action)
\i0  - factory method that takes an SKAction instance and gives an SKAction that repeats that action forever in a loop (eg. rotate a circle forever)\
{\listtext	\uc0\u8259 	}the action is executed by putting it into the execution list for a node (such as SKSpriteNode)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKLabelNode\ulnone  - the SpriteKit equivalent of UILabel (can also be used as a button by detecting tap)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(fontNamed:)
\i0  - create a label with a given font (eg. Chalkduster)\
{\listtext	\uc0\u8259 	}
\i text
\i0  -  the text of the label (you can update it after added to scene to keep it up to date)\
{\listtext	\uc0\u8259 	}
\i position
\i0  -  CGPoint saying where it goes\
{\listtext	\uc0\u8259 	}
\i horizontalAlignmentMode
\i0  - the alignment of the text within the label\
{\listtext	\uc0\u8259 	}
\i fontSize
\i0 : can use this as a surrogate for height (since 
\i size
\i0  property isn\'92t present)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls9\ilvl0\cf0 {\listtext	\'95	}\ul SKEmitterNode\ulnone  - particle effects node (such as explosion)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls9\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(fileNamed:)
\i0  - create an emitter node from a file in the resources (.sks file, don\'92t need the extension in the call)\
{\listtext	\uc0\u8259 	}
\i position
\i0  - like all other nodes, you can position it (eg. to where your object to get blown up is/was)\
{\listtext	\uc0\u8259 	}just use addChild() and then remove the child it\'92s replacing and it will look like the object is being blown up (or whatever)\
{\listtext	\uc0\u8259 	}animation happens automatically and then node goes away\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
SceneKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 3D Games
\fs36 \
\
MapKit\

\fs24 Maps
\fs36 \
\
Core Graphics\

\fs24 Drawing
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CGPoint\ulnone  - struct representing a point in space\
{\listtext	\'95	}\ul CGSize\ulnone  - size information (width and height) [stored as CGFloat]\
{\listtext	\'95	}\ul CGRect\ulnone  - a rectangle\
{\listtext	\'95	}\ul CGFloat\ulnone  - a floating point number (interopable with regular floats/doubles)(floats and doubles often accepted by functions that take CGFloat)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}easy to cast other things like ints, floats, etc. just by using CGFloat(value)\
{\listtext	\uc0\u8259 	}
\i pi
\i0 : static member, the value of pi (also available as members of Double and Float)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}\ul CGImage
\i \ulnone  - 
\i0 an image\ul \ulc0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
CoreImage\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Image filtering functionality (not pure pixel filters - things like gaussian blur, distortion, and vignette as well)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CIContext\ulnone  - handles rendering\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}want to create once and use throughout app because creating one is expensive\
{\listtext	\uc0\u8259 	}default empty initializer\
{\listtext	\uc0\u8259 	}
\i createCGImage(_:from:)
\i0  - create a CGImage instance by passing image through filter\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls11\ilvl2\cf0 {\listtext	\uc0\u8259 	}parameters are CIImag (probably obtained by filter.outputImage!) and a rectangle (probably outputImage.extent to render whole thing)\
{\listtext	\uc0\u8259 	}this method is what does the actual work of applying the filter and creating a new image\
{\listtext	\uc0\u8259 	}the new image is independent of the original\
{\listtext	\uc0\u8259 	}will often want to construct a new UIImage from the CGImage\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}it is possible to chain filters together too for complex processing\
{\listtext	\uc0\u8259 	}NOTE: sometimes filters will run slowly in simulator, but always quickly on devices because CoreImage is very FAST\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0
\fs36 \cf0 {\listtext	\'95	}
\fs28 \ul \ulc0 CIFilter\ulnone  - an image filter (takes input image and some filter settings and creates output image)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(name:)
\i0  - create a new filter of a given name (certain built-in names that must be spelled correctly)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls11\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i CISepiaTone\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}setValue(value, forKey: constant)
\i0  - set a value in the filter using predefined key that expects certain values\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls11\ilvl2
\i \cf0 {\listtext	\uc0\u8259 	}setValue(image, forKey: kCIInputImageKey) 
\i0 will add a CIImage as the input image for the filter\
\ls11\ilvl2
\i {\listtext	\uc0\u8259 	}setValue(float, forKey: kCIInputIntensityKey)
\i0  will set the intensity of the filter (0 to 1) [like Photoshop opacity]\
{\listtext	\uc0\u8259 	}WARNING: if you set a key that the filter doesn\'92t support, it will crash (use 
\i inputKeys
\i0  to check, or specifically code for each filter)\
{\listtext	\uc0\u8259 	}see Apple documentation for supported keys by filter\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}outputImage
\i0  - property that gives you a CIImage which represents the output image of the filter (but the work isn\'92t done just yet when you get it)\
\ls11\ilvl1
\i {\listtext	\uc0\u8259 	}inputKeys
\i0  - array of string keys supported by the current filter
\i \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0
\i0 \cf0 {\listtext	\'95	}\ul CIImage\ulnone  - an image in the CoreImage library\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(image:)
\i0  - create a CIImage based on a UIImage instance\
{\listtext	\uc0\u8259 	}
\i extent
\i0  - CGRect representing the size of the image\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 SwiftyJSON\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 3rd party library for handling Json on GitHub (not a Cocoa Touch Library) [several ways to install - the tutorial uses dragging the .swift file into your project directly, which is one of the official ways]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul JSON\ulnone  - struct that represents json data\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls12\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(data:)
\i0  - can be initialized with a Data object (from Foundation) containing json data\
{\listtext	\uc0\u8259 	}can parse by chain of dictionaries (eg. json[\'93a\'94][\'93b\'94] to get member b of member a)\
{\listtext	\uc0\u8259 	}to get value of a member, use the .intValue or .stringValue properties\
{\listtext	\uc0\u8259 	}missing values are treated safely here without you having to check each one (missing string will be empty string and stuff like that)\
{\listtext	\uc0\u8259 	}to iterate an array member with \'93for\'94 use .arrayValue property (empty array if not there)\
{\listtext	\uc0\u8259 	}to parse json object as dictionary, pull out the values manually and make your own (at least that\'92s what the tutorial does)\
{\listtext	\uc0\u8259 	}conversions are done automatically (eg. if you read an int field with the .stringValue property)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 TODO: Learn more VFL (eg. percentages, aspect ratio, margin vs. absolute, etc.)\
TODO: Get better at Auto Layout in IB (via Attributes Inspector, popups, outline, etc.)\
TODO: Understand the correlation of features between IB and VFL for Auto Layout\
TODO: How to do offsets/ratios/etc with anchors\
TODO: How to add spacing between things using anchors, minimum space, etc.\
TODO: be able to translate anything from anchors method into VFL and IB methods\
TODO: clarify and document .alert vs. .actionSheet in UIAlertController\
TODO: how to prevent user from entering text into text edit while still using it for display\
TODO: create a URL\
TODO: What are the defaults for SKSpriteNodes and physics bodies?\
TODO: can you run multiple actions for the same node simultaneously or is it a synchronous list?  (what happens if one repeats forever?)\
TODO: learn about the node tree nature of SKNode (will sprites be bound to each other\'92s movements?)\
TODO: learn about particle effects (smoke, explosions, etc.)\
TODO: learn about multiple frame sprites, how to better interleave the explosions with the sprites, etc.\
TODO: find out about autolayout, adaptive layouts, etc. for SpriteKit apps\
TODO: learn about arc4random and arc4random_uniform (and what Darwin is and different ways of doing random numbers in Swift)\
TODO: find out if names/paths are case sensitive (eg. with assets)\
TODO: what happens if you create an object over another object when using dynamic physics on both or either?\
TODO: is there a quick way to get nodes in their z-order instead of added order?\
TODO: clarify interchangeability of NSString and other objective-C types with Swift counterparts\
}