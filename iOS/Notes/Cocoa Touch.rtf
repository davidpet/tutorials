{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Monaco;
\f3\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red92\green38\blue153;\red92\green38\blue153;
\red196\green26\blue22;\red170\green13\blue145;\red170\green13\blue145;\red63\green110\blue116;\red46\green13\blue110;
\red0\green0\blue0;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c36078\c14902\c60000;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c66667\c5098\c56863;\csgenericrgb\c24706\c43137\c45490;\csgenericrgb\c18039\c5098\c43137;
\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid3\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid4\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid5\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid204\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid303\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid304\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid305\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid306\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li4320\lin4320 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{square\}}{\leveltext\leveltemplateid401\'01\uc0\u9642 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid403\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid404\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid503\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid504\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid505\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid603\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid703\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid704\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid803\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid804\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid805\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li3600\lin3600 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid903\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid904\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1002\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1003\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1004\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1103\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1303\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1403\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1404\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1503\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1603\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1703\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1704\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1803\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1902\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1903\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1904\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2002\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2003\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2004\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2102\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2103\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2104\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2202\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2203\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2204\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2302\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2303\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2402\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2502\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2503\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2602\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2603\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2160\lin2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2604\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li2880\lin2880 }{\listname ;}\listid27}
{\list\listtemplateid28\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2702\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid28}
{\list\listtemplateid29\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2802\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid29}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}{\listoverride\listid28\listoverridecount0\ls28}{\listoverride\listid29\listoverridecount0\ls29}}
\margl1440\margr1440\vieww28600\viewh15040\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Cocoa Touch is the collection of libraries that help build applications\
NOTE: many of them, such as Foundation, are universal while some, such as UIKit, depend on the OS\
	\'97Cocoa is the name for the set that is available on MacOS which includes many of these but uses AppKit instead of UIKit\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 Foundation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 basic stuff used by the rest of the frameworks\
Foundation is included by the other frameworks so you can usually just use it\
Foundation also includes Darwin, which imports functions from the C library, so some of the functions below may be from Darwin\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul NSObject\ulnone  - basic object for Cocoa Touch framework and Objective-C (but not for all of Swift)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}consider inheriting class from this if going to use certain functionality from Cocoa Touch on that class\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}addObserver(observer, keyPath, options, context)
\i0 : use #keyPath() format to choose property chain, use context if need to identify origin points\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i observeValue
\i0  is called on the observer when the property is changed\
{\listtext	\uc0\u8259 	}usually should be matched with 
\i removeObserver
\i0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i observeValue
\i0 : called for KVO (key-value observing) changes\
{\listtext	\uc0\u8259 	}
\i init()
\i0  - should call the base init in your override init if you have one\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSRange\ulnone  - basic range object used in apple frameworks\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}create using 
\i NSMakeRange
\i0  function (most likely will want to use utf16.count instead of characters.count if using in a Cocoa Touch object) [due to Objective-C compatibility]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}also has an initializer with the same params - not sure what the difference is\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}location
\i0  - start position of the range (
\i NSNotFound
\i0  if range not present in text)\
{\listtext	\uc0\u8259 	}
\i length
\i0  - length of the range\
{\listtext	\uc0\u8259 	}see SwiftStrings playground for how to use with a Swift string\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul Data\ulnone  - mutable collection with copy-on-write behavior (used by many Cocoa Touch calls to represent raw data)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(contentsOf: url)
\i0  - loads data from url (can throw) [blocking call]\
{\listtext	\uc0\u8259 	}
\i write(to:)
\i0  - write the contents to a file\
{\listtext	\uc0\u8259 	}can obtain from a string with mystring.data(using: String.Encoding.utf8)\
{\listtext	\uc0\u8259 	}can obtain from UIImage with functions like UIImageJPEGRepresentation\
{\listtext	\uc0\u8259 	}many objects that can be serialized as Data have initializers that take a Data\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul DateComponents\ulnone  - date wrapper\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i hour/minute/day/etc.
\i0  - fields that you can set for what kinds of fields are to be included in the date\
{\listtext	\uc0\u8259 	}in general can represent a specific date/time or a span depending on how it\'92s used (only what you specify is part of it)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul UUID\ulnone  - unique identifier\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init()
\i0  - create a new identifier\
{\listtext	\uc0\u8259 	}
\i init(uuidString:)
\i0  - create a new identifier from a string (eg. as obtained from uuidgen in terminal)\
{\listtext	\uc0\u8259 	}
\i uuidString
\i0  - string property to get text representation of the UUID\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul URL\ulnone  - struct representing URL used by many Cocoa Touch calls\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i appendingPathComponent()
\i0  - adds a component to the url path\
{\listtext	\uc0\u8259 	}
\i init(fileURLWithPath:)
\i0  - for creating a URL based on a filesystem path\
{\listtext	\uc0\u8259 	}
\i init(string:)
\i0  - create a url from a literal url string\
{\listtext	\uc0\u8259 	}
\i absoluteString
\i0  - the string representation of the url\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul UserDefaults\ulnone  - data store where you can place key-value data as long as the app is installed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}this store is 
\b not safe for private data
\b0 \
{\listtext	\uc0\u8259 	}
\i standard
\i0  - property that represents the UserDefaults instance you should normally use\
{\listtext	\uc0\u8259 	}don\'92t put more than about 100 KB of data in here or it will slow down your app loading\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}if you use 
\i NSCoding
\i0  to transform the object to 
\i Data
\i0 , you can read/write directly to disk if too big for the 100 KB limit\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}supports a huge range of types by default (Int, Bool, arrays, dictionaries, URL, Date, etc.)\
{\listtext	\uc0\u8259 	}
\i set(value, forKey: keyname)
\i0  - create or update a value in the defaults with a given keyname\
{\listtext	\uc0\u8259 	}retrieval methods look like this: bool(forKey:), object(forKey:), etc.\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}return default values instead of optionals\
{\listtext	\uc0\u8259 	}object() returns Any? instead of a default (should use ?? operator)\
{\listtext	\uc0\u8259 	}the examples use object() to get arrays and dictionaries\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}if working with custom types, you have to conform to 
\i NSCoding
\i0  protocol and use 
\i NSKeyedArchiver
\i0  and 
\i NSKeyedUnarchiver
\i0  classes to get and set a 
\i Data
\i0 , which you can then write with 
\i set\
\ls1\ilvl1
\i0 {\listtext	\uc0\u8259 	}NOTE: the tutorial shows resaving the whole array instead of just the pieces that changed (or instead of making a key for each person or whatever)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSKeyedArchiver\ulnone  - static class for transforming an object graph (object and all the objects it references, etc.) into a 
\i Data
\i0  for use with 
\i UserDefaults
\i0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i archivedData(withRootObject:)
\i0  - static method to obtain a 
\i Data
\i0  for an object graph\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}the object must be either one of the built-in types automatically supported, or implement NSCoding protocol\
{\listtext	\uc0\u8259 	}if an array or dictionary, all members must be one of the built-in types or implement NSCoding\
{\listtext	\uc0\u8259 	}can archive and unarchive arrays and dictionaries of NSCoding types and the array/dictionary portion will be handled transparently\
{\listtext	\uc0\u8259 	}NOTE: you can read/write the 
\i Data
\i0  object directly to disk if it\'92s too big to put in 
\i UserDefaults
\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSKeyedUnarchiver\ulnone  - static class for transforming a 
\i Data
\i0  into an object (assuming it was transformed originally using 
\i NSKeyedArchiver
\i0 )\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i unarchiveObject(with:)
\i0  - takes the 
\i Data
\i0  object (eg. from 
\i UserDefaults
\i0 ) and transforms it back to the original object using NSCoding protocol\
{\listtext	\uc0\u8259 	}you must cast the object from Any?\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSCoding\ulnone  - protocol to allow for serializing object graph as 
\i Data
\i0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}many of Apple\'92s library types in UIKit, SpriteKit, etc. conform to this protocol\
{\listtext	\uc0\u8259 	}WARNING: you also have to inherit from NSObject or your app will crash\
{\listtext	\uc0\u8259 	}
\i required init(NSCoder)
\i0  for creating an instance of the class from a coder\
{\listtext	\uc0\u8259 	}
\i encode(NSCoder) 
\i0 for creating a 
\i Data
\i0  from a coder\
{\listtext	\uc0\u8259 	}both the init and encode methods use methods of the coder to serialize/deserialize members of the class (don\'92t need to add a header for the class or anything like that)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSCoder\ulnone  - a type that is passed into 
\i init
\i0  and 
\i encode
\i0  methods for NSCoding protocol\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i decodeObject(forKey:)
\i0  - get an object with the given key as Any? (which you can cast - safe if you are the one who did it)\
{\listtext	\uc0\u8259 	}
\i encodeObject(_:forKey:)
\i0  - add a value with a keyname to the storage for the class\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSCopying\ulnone  - protocol for deep-copyable (clonable) objects\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i copy(with:)
\i0  - the only method you have to implement to support this protocol\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}the with zone parameter has been ignored for years (it\'92s a holdover from an older time)\
{\listtext	\uc0\u8259 	}return type is Any but it should return the new copy of your object\
{\listtext	\uc0\u8259 	}HINT: remember that a lot of things in Swift that are reference types in other languages are value types (so copying is simply by assignment)\
{\listtext	\uc0\u8259 	}USAGE: let myperson = person.copy() as! Person\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSRegularExpression\ulnone  - instance of compiled regular expression object (some notes in SwiftStrings playground)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(pattern:options:)
\i0  - compile a regex with options for use in searching\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i options
\i0  = equivalent of flags in PCRE\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}since regexes are already done for all matches by default, there is no equivalent of the 
\i g
\i0  flag in PCRE\
{\listtext	\uc0\u8259 	}since regexes are already multiline by default, there is no equivalent of the 
\i m
\i0  flag in PCRE\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls1\ilvl4\cf0 {\listtext	\uc0\u8259 	}$ and ^ match beginning and end of whole string by default: can use 
\i .anchorMatchLines
\i0  to make the anchors work line by line\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i .caseInsensitive
\i0  - equivalent of 
\i i
\i0  flag in PCRE\
{\listtext	\uc0\u8259 	}
\i .ignoreMetacharacters
\i0  - make this a literal text search\
{\listtext	\uc0\u8259 	}
\i .dotMatchesLineSeparator - 
\i0 equivalent of 
\i s
\i0  flag in PCRE\
{\listtext	\uc0\u8259 	}there is no flag to make all quantifiers non-greedy - just use ? after them in the regex itself\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}this throws in case the regex is badly formatted, so have to use try, try?, or try!\
{\listtext	\uc0\u8259 	}NOTE: there is no regex literal - you have to deal with double and quadruple backslashes\
{\listtext	\uc0\u8259 	}see NSRegularExpression documentation for things like metacharacter table\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i matches(text:options:range:)
\i0  - search for all matches of the regex within range of text (using NSRange)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i options
\i0  are not regex options, will probably be leaving them empty\
{\listtext	\uc0\u8259 	}returns an array of NSTextCheckingResult\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i stringByReplacingMatches()
\i0  - get a new string containing the original string with all matches replaced using regex replacement syntax ($0, $1, etc. for capture groups)\
{\listtext	\uc0\u8259 	}There is no equivalent of on the fly static regex matching like in other languages (you always create a compiled instance)\
{\listtext	\uc0\u8259 	}NOTE: You can assume most regex operators and metacharacters will work as described in regex rtf document\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSTextCheckingResult\ulnone  - result of a text match (eg. regex or spellcheck)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}returned by 
\i matches
\i0  method of 
\i NSRegularExpression\
\ls1\ilvl1
\i0 {\listtext	\uc0\u8259 	}
\i range
\i0  - NSRange representing the whole match\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}numberOfRanges
\i0  - how many ranges are included in the match (for regex means number of groups, including 0 = the whole match)\
{\listtext	\uc0\u8259 	}
\i rangeAt()
\i0  - get NSRange describing group with given index number (for regex, 0 = whole match)\
{\listtext	\uc0\u8259 	}returns ranges instead of strings (use the range on the original string to extract the text)\
{\listtext	\uc0\u8259 	}NOTE: named capture groups not supported by iOS regexes\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSExtensionContext\ulnone  - container for extension behavior\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i inputItems
\i0  - [Any] that contains inputs to the extension from the parent app (empty if none) [parent app = the app you\'92re extending, not the one in your project]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}try casting to 
\i NSExtensionItem\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1
\i0 \cf0 {\listtext	\uc0\u8259 	}
\i completeRequest(returningItems:)
\i0  - return control to the parent application and end the extension\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}the array of items you pass back can be, for instance, sent into the preprocessing .js file you may have configured\
{\listtext	\uc0\u8259 	}returningItems should be an array of NSExtensionItem\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSExtensionItem\ulnone  - an item sent to or from an extension (data exchange with host app)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i attachments
\i0  - [Any]? of attachments given to the item (always can be casted to NSItemProvider)\
{\listtext	\uc0\u8259 	}can create with default initializer and populate 
\i attachments
\i0  (items should be NSItemProvider)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSItemProvider\ulnone  - asynchronous data provider\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i loadItem(forTypeIdentifier:)
\i0  - takes a type and a closure (which takes an object and an error) to act on the result asynchronously\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}type identifier is a String (can use constants like 
\f1\fs22 \cf2 \CocoaLigature0 kUTTypePropertyList 
\f0\fs28 \cf0 \CocoaLigature1 from MobileCoreServices package (may have to declare)\
{\listtext	\uc0\u8259 	}if you choose property list, the object can be casted to NSDictionary (the objective-c (Foundation) version of dictionary)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}more or less can be treated like a dictionary of string to NSObject (or fundamental object like String)\
{\listtext	\uc0\u8259 	}use constants from within Foundation (such as 
\fs22 \expnd0\expndtw0\kerning0
NSExtensionJavaScriptPreprocessingResultsKey 
\fs28 \kerning1\expnd0\expndtw0 for getting javascript passed into an extension via preprocessing as an NSDictionary)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init
\i0 (item:typeIdentifier)
\i  - 
\i0 similar in reverse (for passing data back)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}can populate NSDictionary just like a normal dictionary (same literal), with same constants as the other direction\
{\listtext	\uc0\u8259 	}whatever you pass back should be understood by the app (or by preprocessing javascript or whatever)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSAttributedString\ulnone  - attributed (formatted) string\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul NSMutableAttributedString\ulnone  - specialized attributed string that can be modified\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i append()
\i0  - append an NSAttributedString to the end of this mutable attributed string (inc. attributes)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}NOTE: if the two strings have different formats this will be respected automatically\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: can be passed as an NSAttributedString since it\'92s a subclass\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(string:attributes:)
\i0  - create a new instance from a plain text string and a dictionary of attributes\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}attributes is [String: Any] and generally has keys from constants and values as defined in documentation for \'93Character Attributes\'94\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}attributes can be global or can be more specific such as affecting certain ranges within the text (see the documentation)\
{\listtext	\uc0\u8259 	}NSFontAttributeName: UIFont to use for the text\
{\listtext	\uc0\u8259 	}NSForegroundColorAttributeName: UIColor to use for the text\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSPredicate\ulnone  - for determining what records to return for queries, in-memory searches, etc.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(value:)
\i0  - create a predicate that always returns the given boolean value (true means return the record)\
{\listtext	\uc0\u8259 	}
\i init(format:\'85)
\i0  - crate a predict with a given condition format string\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}eg. \'93owningWhistle == %@\'93, reference\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NSSortDescriptor\ulnone  - sorting behavior for queries\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(key:ascending:)
\i0  - which key to sort on (actual value depends on the thing being queried) and whether to sort ascending (probably optional)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul NotificationCenter\ulnone  - a notification dispatch object for subscribing to and receiving notifcations (and publishing if you want)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}for some reason no NS in front\
{\listtext	\uc0\u8259 	}
\i default
\i0  - static instance representing main application notifications that you can subscribe to\
{\listtext	\uc0\u8259 	}
\i addObserver()
\i0  - similar to KVO but picking a notification name to invoke a method (by selector)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}use constants from Notification.Name\
{\listtext	\uc0\u8259 	}the method invoked takes a 
\i Notification
\i0  object\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i post(name:object:)
\i0  - post a notification (which can be observed) using a name (constant or custom one from 
\i Notification
\i0 ) (object can be nil or some object)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul Notification\ulnone  - a notification for use in NotificationCenter (eg. accepted by observers)\ul \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}
\i Name
\i0  - wraps constants to pass into addObserver() of NotificationCenter\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i UIKeyboardWillHide
\i0  - keyboard has finished hiding (despite name)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}will catch physical keyboard insertion\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i UIKeyboardWillChangeFrame
\i0  - keyboard showing/hiding, orientation changing, quicktype, etc. (but not physical keyboard insertion)\
{\listtext	\uc0\u8259 	}
\i UIApplicationWillResignActive
\i0  - app is losing focus (lock, double-tap away, etc.)\
{\listtext	\uc0\u8259 	}
\i UIContentSizeCategoryDidChange
\i0  - user has changed their font size preferences\
{\listtext	\uc0\u8259 	}
\i init(string)
\i0  - can make a name out of a string to pass into NotificationCenter\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i userInfo
\i0  - dictionary of notification-specific data\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}keyboard-related notification keys present in userInfo (values tend to be NSValue which has members like intValue and cgRectValue to get the right type)((because objective-c couldn\'92t have structs as array elements))\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls1\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i UIKeyboardFrameEndUserInfoKey
\i0  - frame of the keyboard after animation (NSValue containing CGRect)\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls1\ilvl4\cf0 {\listtext	\uc0\u8259 	}doesn\'92t account for rotation of the device, so have to run the CGRect through view.convert w/ view.window as 2nd parameter to adjust\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i name
\i0  - name of the notification sent (compare with members of Name member)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul Timer\ulnone  - wrapper for timing and calling things on a delay\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i scheduledTimer(timeInterval:target:selector:userInfo:repeats:)
\i0  - factory method to get Timer instance that will start calling a method at a given interval (once or repeated)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls1\ilvl2\cf0 {\listtext	\uc0\u8259 	}timeInterval is in seconds\
{\listtext	\uc0\u8259 	}target and selector are class and method (() -> Void) that will be called at interval\
{\listtext	\uc0\u8259 	}userInfo is some context you want to send (can be nil)\
{\listtext	\uc0\u8259 	}repeats should be true if you want it to fire more than once\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i invalidate()
\i0  - stops the timer from being triggered anymore\
{\listtext	\uc0\u8259 	}NOTE: only approximate (if ask for 6s might get 5.95s)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul pow()\ulnone  - raise a number to a power\
{\listtext	\'95	}\ul performSelector(inBackground:)\ulnone  - runs a method in a background thread\
{\listtext	\'95	}\ul performSelector(onMainThread:)\ulnone  - runs a method in the main UI thread\
{\listtext	\'95	}\ul arc4random()\ulnone  - random unsigned integer over the whole range (C standard lib)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}no seeding needed\
{\listtext	\uc0\u8259 	}arc4 is an encryption standard or something like that (this is a newer better randomizer available in C than the old random() function)\
{\listtext	\uc0\u8259 	}to get a random float, divide by Float(UInt32.max)\
{\listtext	\uc0\u8259 	}to get a random float in a range, do the same but multiply by the size of the range and add to minimum\
{\listtext	\uc0\u8259 	}WARNING: don\'92t use modulo to confine this to a range (due to 
\b modulo bias
\b0 ) [use arc4random_uniform instead]\
{\listtext	\uc0\u8259 	}NOTE: see notes in arcrandom_uniform for more info\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul arc4random_uniform(_:)\ulnone  - random unsigned integer from 0 (inclusive) to given value (exclusive)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}avoids the modulo bias of arc4random()\
{\listtext	\uc0\u8259 	}no seeding needed\
{\listtext	\uc0\u8259 	}to pick a number from 
\i a
\i0  to 
\i b
\i0  inclusive, can use arc4random_uniform of the difference plus 1, then add to 
\i a\
\ls1\ilvl1
\i0 {\listtext	\uc0\u8259 	}NOTE: there convenience wrappers for randomizing different data types in the Helper.Swift file that comes in the Hacking with Swift projects (find out source before using in production)\
{\listtext	\uc0\u8259 	}NOTE: see GameplayKit for newer/better random number generation (may not be available on opensource Swift on Linux though)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul sin() & cos()\ulnone  - built-in trigonometric functions (Double -> Double)\
{\listtext	\'95	}\ul abs()\ulnone  - absolute value\
{\listtext	\'95	}\ul min()/max()\ulnone  - get smallest or largest of 2 values\
{\listtext	\'95	}\ul sleep()\ulnone  - sleep for a given number of (whole) 
\b seconds
\b0  (int not float)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}WARNING: do not use this in the main thread (use Dispatch instead)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\'95	}\ul usleep()\ulnone  - sleep for a given number of (whole) 
\b microseconds
\b0  (uint not float)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls1\ilvl1\cf0 {\listtext	\uc0\u8259 	}WARNING: do not use this in the main thread (use Dispatch instead)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 CoreFoundation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Some low-level types (lower than Foundation) [actually included implicitly by Foundation so you don\'92t have to import it]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul CFAbsoluteTimeGetCurrent()\ulnone  - get CFAbsoluteTime representing the current time (for storage)\
{\listtext	\'95	}\ul CFAbsoluteTime\ulnone  - typedef of CFTimeInterval which is meant to be seconds since beginning of 2001\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls2\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: since this is eventually just a Double, you can do straight math on it\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	\'95	}\ul CFTimeInterval\ulnone  - typedef of Double representing seconds elapsed\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
Dispatch\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 GCD (Grand Central Dispatch): multithreading and task queue functionality\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul DispatchQueue\ulnone  - work management queue (like a prioritized thread pool)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}like many Cocoa Touch classes, you can use static methods to get existing instances\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}global()
\i0 : get default queue (middle QoS priority in between .userInitiated and .utility)\
{\listtext	\uc0\u8259 	}
\i global(qos:)
\i0 : get queue with specified QoS priority (quality of service - used to determine CPU allocation)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}.userInteractive = UI (highest priority)\
{\listtext	\uc0\u8259 	}.userInitiated = user is waiting but it is not UI\
{\listtext	\uc0\u8259 	}.utility = user is aware of it but not waiting for it (long-running background tasks)\
{\listtext	\uc0\u8259 	}.background = lowest priority\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i main
\i0  - static queue instance representing the main application thread (use this to dispatch UI changes)\
{\listtext	\uc0\u8259 	}
\i async()
\i0 : dispatch a closure to the queue and return immediately\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}probably want to use [unowned self] unless dispatching to main thread\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i asyncAfter(deadline:closure:)
\i0  - execute a closure at a certain time (or after a delay)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}to execute 1 second from now, use 
\i .now() + 1
\i0  as the deadline\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls3\ilvl3\cf0 {\listtext	\uc0\u8259 	}can use any number including CFTimeInterval or Double to add to .now()\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls3\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: queue up a method and then have that method queue itself up again when done (or something like that)\
{\listtext	\uc0\u8259 	}HINT: to figure out timings, experiment to find usability/playability thresholds and set up app/game in such a way that it never violates them (eg. game over after certain number of rounds if game gets faster)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: it is NEVER ok to do UI changes in a background thread: to do that you need to dispatch a task to the 
\i main
\i0  queue\
{\listtext	\uc0\u8259 	}NOTE: it\'92s ok to manipulate SKNode objects in a background thread (not the same as UI objects)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls3\ilvl0\cf0 {\listtext	\'95	}\ul performSelector\ulnone  - as an alternative if you just want to run a whole method in the simplest way, use performSelector function overloads (see Foundation)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls3\ilvl1\cf0 {\listtext	\uc0\u8259 	}advantage of not having to worry about closure capturing\
{\listtext	\uc0\u8259 	}have to use #selector() syntax and pass in a method name\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 UIKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Interface stuff like buttons, text boxes, etc.\
\
WARNING: never change properties of UI objects unless you\'92re sure you\'92re on the main thread (eg. if you do it from a closure you can\'92t be sure) (dispatch to main thread if not sure)\
TIP: animations are important (not just silly) because they make it clear what is changing and what the state is (eg. a panel sliding over existing one tells them the other one is still there underneath when they\'92re done)\
TIP: you don\'92t have to do animations yourself by manipulating attributes -> use methods like 
\i animate()
\i0  that figure it all out for you and are easy to reset\
NOTE: coordinates are the usual for computers (0,0 = top left) [unlike SpriteKit] ((clipping offscreen and negative coordinates allowed))\
TIP: if you have a problem with a control dissappearing under other controls (eg. text view), it is probably a constraint problem\
TIP: You can import SpriteKit and UIKit in the same file (eg. to use UIKit classes to help in a game)\
\
Controls/views start with UI\
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul UIApplicationDelegate\ulnone  - main application delegate (implemented by AppDelegate, which the templates create for you)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}AppDelegate is also declared to have a 
\i window
\i0  member that you can use to get to your view controllers, etc. (UIWindow)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}application(_:continue:restorationHandler:)
\i0  - called when app is launched from a Spotlight result (after loaded)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}tutorial ignores 1st and 3rd parameters\
{\listtext	\uc0\u8259 	}
\i continue
\i0  parameter is NSUserActivity with the following properties\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i activityType
\i0  = 
\f1\fs22 \cf3 \CocoaLigature0 CSSearchableItemActionType\
\ls4\ilvl3
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}
\i userInfo
\i0  = dictionary where key 
\f1\fs22 \cf3 \CocoaLigature0 CSSearchableItemActivityIdentifier 
\f0\fs28 \cf0 \CocoaLigature1 will map to the uniqueIdentifier of the search item\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls4\ilvl0\cf0 {\listtext	\'95	}\ul UIView
\i \ulnone  - 
\i0 base class of views/controllers\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}you can use it directly on a view in Interface Builder (eg. to frame other views) [dragging to it does not make it a parent though]\
{\listtext	\uc0\u8259 	}can also instantiate (default initializer) in code and set properties to make it do stuff\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}good things to do if you set one up this way:\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}set the frame\
{\listtext	\uc0\u8259 	}set isUserInteractionEnabled\
{\listtext	\uc0\u8259 	}appearance and position information\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul isUserInteractionEnabled\ulnone  - can set to false so the view doesn\'92t receive events like taps\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: when false it seems to allow objects behind to receive the interaction (see FourInARow game where background buttons receive taps through chips)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul layer
\i \ulnone  - 
\i0 instance of CALayer representing the view at a low level (see 
\b Core Animation Framework
\b0 ) [this is the way to do things like borders at runtime]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}try to check for properties of view itself first (like backgroundColor)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul backgroundColor\ulnone  - background color of the control (UIColor)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}defaults different for different things (eg. for UIImage and UIImageView it\'92s 
\i clear
\i0  for transparent)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul tintColor\ulnone  - the color used to represent that the item is active (highlight color) [eg. for bar button items]\
{\listtext	\uc0\u8259 	}\ul alpha
\i \ulnone  - 
\i0 0 = transparent, 1 = normal (floating point value)\
{\listtext	\uc0\u8259 	}\ul tag\ulnone  - integer that you can set to whatever you want (defaults to 0) (good way to distinguish controls of same type in an action)[can duplicate same value if want]\
{\listtext	\uc0\u8259 	}\ul center\ulnone  - a CGPoint representing the center coordinates of the view within its superview\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}WARNING: if the orientation of the device changes, this stays locked into hard coordinates (which can have really weird effects)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul frame\ulnone  - CGRect describing the view\'92s rectangle within its parent coordinate system\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}this is a good way to determine the size of the display you\'92re working with at runtime - within viewController (eg. viewDidLoad) use view.frame.height and view.frame.width\
{\listtext	\uc0\u8259 	}also 
\b settable
\b0  (eg. if you instantiate UIView in code)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul window\ulnone  - UIWindow belonging to the view\
{\listtext	\uc0\u8259 	}\ul isHidden
\i \ulnone  - 
\i0 used for hiding a view\
{\listtext	\uc0\u8259 	}\ul isEnabled\ulnone  - used for greying out view (eg. a button)\
{\listtext	\uc0\u8259 	}\ul toolbarItems\ulnone  - array of 
\i UIToolBarItem
\i0  to load as the bottom toolbar when active in a navigation controller (separate from rightToolBarItem)\
{\listtext	\uc0\u8259 	}\ul rightBarButtonItem\ulnone  - the rightmost navigation bar button automatically used\
{\listtext	\uc0\u8259 	}\ul isToolBarHidden\ulnone  - for showing the toolbar\
{\listtext	\uc0\u8259 	}\ul sizeToFit\ulnone  - resize view to fit its container (useful for creating programmatically)\
{\listtext	\uc0\u8259 	}\ul addSubview\ulnone  - add a view (eg. a control like UILabel) to the view (if didn\'92t specify position, etc. it will go at top left on top of other subviews)[constraints generated as appropriate]\
{\listtext	\uc0\u8259 	}\ul translatesAutoresizingMaskIntoConstraints\ulnone  - set to false to disable automatic generation of constraints (if you want to do auto layout yourself in code)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}automatically set to false for IB but true for programmatic creation\
{\listtext	\uc0\u8259 	}consider setting it on any view (including subviews) you create in code\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul addConstraints\ulnone  - add array of Auto Layout constraints (NSLayoutConstraint) to the view\
{\listtext	\uc0\u8259 	}\ul animate()\ulnone  - perform an animation on the view (lots of options like duration (in float seconds), delay, closure with what animations to perform, and closure to call when done)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}if you don\'92t perform any animation, UIKit detects it and calls the completion closure right away despite your duration setting (keep this in mind when iteratively coding)\
{\listtext	\uc0\u8259 	}within the closure for what animations to perform, you set properties on the view such as 
\i transform
\i0  which give instructions for what kind of operation to perform over the timeframe given in 
\i animate()\
\ls4\ilvl2
\i0 {\listtext	\uc0\u8259 	}by default, UIKit animations have an \'93ease in ease out\'94 curve (starts slow, gets faster, slows down at end, rather than straight linear timing)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}to use other curves (eg. springs), just use other overloads of 
\i animate
\i0  (eg. the one with 
\i initialSpringVelocity
\i0  to have it behave like a spring that overshoots and comes back)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}if you apply an identical transformation to what\'92s already applied, UIKit knows it and goes straight to the completion closure\
{\listtext	\uc0\u8259 	}to transform back to normal, use CGAffineTransform.identity\
{\listtext	\uc0\u8259 	}in addition to transforms, you can change properties of the view (like background color, etc.) as you normally would and UIKIt is smart enough to animate it\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}obviously when you do this, you won\'92t have the benefit of using the 
\i identity
\i0  transform to put it back\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}user interaction is disabled during the animation\
{\listtext	\uc0\u8259 	}TIP: can set a transform and then set the identity transform in animate (eg. to drop something from offscreen)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i animate()
\i0  - static version available too\
{\listtext	\uc0\u8259 	}
\i transform
\i0  - property containing a CGAffineTransform value for use with animations (eg. set from within the animation closure of 
\i animate()
\i0 )\
{\listtext	\uc0\u8259 	}
\i convert(_:from:)
\i0  - convert one CGRect to another (from coordinate system of 
\i from
\i0  to coordinate system of this view\
{\listtext	\uc0\u8259 	}
\i viewWithTag()
\i0  - gets first view matching given tag contained within the view and its child views\
{\listtext	\uc0\u8259 	}
\i resignFirstResponder()
\i0  - give up first responder (input focus [eg. keyboard popup]) status\
{\listtext	\uc0\u8259 	}
\i addGestureRecognizer()
\i0  - add your own gesture recognizer (in addition to the normal ones the view already/always has)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}the coexistence between the new one and existing ones should be specified in the delegate of the gesture recognizer\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i removeFromSuperview()
\i0  - remove the view from its parent\
{\listtext	\uc0\u8259 	}\ul UIViewController\ulnone  - base class for view controllers (code behind scenes)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i tabBarItem
\i0  - the tab bar icon representing the view controller if added to a tab bar controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 title
\i0 : has to be set at runtime (not same one in IB) - sets the navigation bar title (if have one) and the Back button text if have a back button in bar\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}since it\'92s optional, you can assign an optional to it without unwrapping\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i subviews
\i0  - views that are inside the view (child controls)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}hint: use tags to distinguish ones that you want to be able to find this way (such as when too many to make outlets one by one)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i viewDidLoad
\i0 : called after UI loaded from storyboard but before displayed\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}used to do extra setup before the scene is shown\
{\listtext	\uc0\u8259 	}can instantiate classes directly (eg. UILabel) and insert via methods like view.addSubview()\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i motionBegan
\i0 : called when the user shakes the device\
{\listtext	\uc0\u8259 	}can set presentation to Full Screen\
{\listtext	\uc0\u8259 	}viewDidAppear, viewWillAppear, viewDidDissappear, viewWillDissappear: more life cycle hooks (make sure to call base with params)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}view can appear multiple times (eg. transitioned away to another view and transitioned back)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i traitCollectionDidChange()
\i0  - implement if you want to provide adaptive UI based on layout changes\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}gets called when user switches between portrait and landscape, when user multitasks w/ another app on iPad, etc.\
{\listtext	\uc0\u8259 	}also called at the beginning when orientation set up so that you can centralize your adaptive UI code\
{\listtext	\uc0\u8259 	}the parameter that gets passed in has members like 
\i horizontalSizeClass
\i0  and 
\i verticalSizeClass
\i0  (enum values like .compact and .regular)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}loadView: for customizing which view to load (eg. to bypass storyboard and instantiate your own)[set 
\i view
\i0  member]((can still have navigation controller from storyboard))\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}NOTE: can also just use the 
\i view
\i0  member as a default UIView is available for you to populate with stuff\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}storyboard: optional property UIStoryboard? (should use optional chaining just in case) representing the parent storyboard\
{\listtext	\uc0\u8259 	}view: the view instance that the controller represents\
{\listtext	\uc0\u8259 	}navigationController: optional property UINavigationController? representing the parent navigation controller if is one\
{\listtext	\uc0\u8259 	}navigationItem: for interacting with the navigation bar (such as adding buttons on view load)\
{\listtext	\uc0\u8259 	}
\i present
\i0 : call to present another view view controller (such as a UIAlertViewController to show a message)\
{\listtext	\uc0\u8259 	}
\i dismiss
\i0 : dismisses a view controller presented modally by this view controller (eg. UIImagePickerController) if it doesn\'92t do so itself (like UIAlertController does)\
{\listtext	\uc0\u8259 	}
\i prefersStatusBarHidden
\i0 : boolean computed property (readonly) you can override (defaults to false) [if true, the bar with clock, battery, etc. will be hidden when possible]\
{\listtext	\uc0\u8259 	}
\i extensionContext
\i0 : NSExtensionContext member used to control extension behavior for a view controller for an extension target within a project\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}safe to use ! if you know your app is an extension\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}anchors for Auto Layout: widthAnchor, heightAnchor, topAnchor, bottomAnchor, leftAnchor, rightAnchor, leadingAnchor, trailingAnchor, centerXAnchor, and centerYAnchor\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}note that anchors aren\'92t necessarily points (eg. height and width)\
{\listtext	\uc0\u8259 	}meaning of leading and trailing are swapped in right-to-left languages\
{\listtext	\uc0\u8259 	}call 
\i constraint
\i0  method of anchor, various named overloads to add different kinds of constraints\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls4\ilvl4\cf0 {\listtext	\uc0\u8259 	}for example, you can addConstraint(equalTo: someothercontrol.widthAnchor) [constrain anchor equal to another anchor]((use actual view references here))\
{\listtext	\uc0\u8259 	}addConstraint(equalToConstant:) for something like setting a height\
{\listtext	\uc0\u8259 	}weird part is you have to do .isActive = true at end\
\pard\tx3820\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li4320\fi-4320\pardirnatural\partightenfactor0
\ls4\ilvl5\cf0 {\listtext	\uc0\u8259 	}
\i example
\i0 : label.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}remember to disable translatesAutoresizingMaskIntoConstraints if needed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UITableViewController\ulnone  - view that has rows of data that can be populated at runtime\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i tableView
\i0  - the table view this table view controller represents\
{\listtext	\uc0\u8259 	}navigate down to the cell (prototype) in outline and set it up to look like what each cell will look like (use Identifier field for each prototypical cell type)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}set \'93Accessory\'94 for things you want to show up in the cell (eg. Disclosure Indicator for grey arrow to tell you there is a detail view)\
{\listtext	\uc0\u8259 	}cell can be set to custom and either designed or set certain magic properties (eg. imageView.image) to make something automatically appear (can do multiple such as image and text)\
{\listtext	\uc0\u8259 	}can also subclass the cell class and change the prototype in IB to be of that type -> then you can have code behind the cell with a custom design in IB\
{\listtext	\uc0\u8259 	}to make multiline, change the UILabel inside the cell (may also need to implement the 
\i heightForRowAt
\i0  and 
\i estimatedHeightForRowAt
\i0  controller methods if lines being truncated\
{\listtext	\uc0\u8259 	}to get rid of the prototype cell (eg. to do it purely in code), change Prototype Cells to 0 in Attributes Inspector\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}have to override tableView() methods to implement cell loading behavior\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}tableView(_:numberOfRowsInSection:) needed to say how many rows you have in each section\
{\listtext	\uc0\u8259 	}tableView(_:cellForRowAt:) needed to create a cell based on a row number (probably want to obtain cell from 
\i dequeueResuableCell
\i0  and populate it)(use indexPath.row)\
{\listtext	\uc0\u8259 	}tableView(_:didSelectRowAt:) for responding to select (tapping) a cell\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls4\ilvl4\cf0 {\listtext	\uc0\u8259 	}WARNING: autocomplete will do didDeselectRowAt first which can be horribly confusing\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i tableView(_:heightForRowAt:)
\i0  - if you need to specify how a cell\'92s height will be determined\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls4\ilvl4\cf0 {\listtext	\uc0\u8259 	}use UITableViewAutomaticDimension constant if you want it to just magically fit the contents (eg. multiline label)\
{\listtext	\uc0\u8259 	}should do the same thing in 
\i estimatedHeightForRowAt
\i0  below\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i tableView(_:estimatedHeightForRowAt:)
\i0  - basically same as above and should probably do same thing\
{\listtext	\uc0\u8259 	}
\i tableView(_:editingStyleForRowAt:)
\i0  - lets you select what editing style (left-hand icon) to use in edit mode for a given row\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls4\ilvl4\cf0 {\listtext	\uc0\u8259 	}enum values like .insert, .delete\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i tableView(_:commit:forRowAt:)
\i0  - called to handle user clicking lefthand button (delete, insert, etc.) in editing mode\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls4\ilvl4\cf0 {\listtext	\uc0\u8259 	}commit = enum value (like .insert, .delete) to tell you what button they clicked\
{\listtext	\uc0\u8259 	}rowRowAt = the indexPath of the row that you are to operate on\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i numberOfSections(in:)
\i0  - if creating own table view, specify the number of sections in the table by returning from this method\
{\listtext	\uc0\u8259 	}
\i tableView(_:titleForHeadersInSection:)
\i0  - lets you provide titles for sections within the table\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls4\ilvl4\cf0 {\listtext	\uc0\u8259 	}return a string or nil if no header for that section\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i dequeueResuableCell()
\i0  can be used to create or reuse an already-created cell\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls4\ilvl3\cf0 {\listtext	\uc0\u8259 	}if using prototype cell from storyboard, this will just work\
{\listtext	\uc0\u8259 	}if creating cells strictly in code, this will return nil if not created yet (extra complications with registering, etc.)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: to create your own in pure code, need to do numberOfSections(in:), register(), and the normal stuff\
{\listtext	\uc0\u8259 	}NOTE: since the cell creation is entirely customized by row and section number, you can easily wire multiple cells (even in different sections) to different aspects of 1 object (and even make the whole table about 1 object)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls4\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UICollectionViewController\ulnone  - very similar to UITableViewController but displays grid instead of list\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls4\ilvl2\cf0 {\listtext	\uc0\u8259 	}see UITableviewController (most of what worked there works here)\
{\listtext	\uc0\u8259 	}replace \'93tableView\'94 with \'93collectionView\'94 when translating instructions to collection views (eg. the view class, the cell class, etc.)\
{\listtext	\uc0\u8259 	}can set properties on the UICollectionView in IB such as cell size, insets, etc.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul \ulc0 UIAlertController\ulnone  - equivalent of MsgBox in the iOS world\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}instantiate with options like title, message, etc. (use .alert for informing and .actionSheet for selecting options)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}message can be nil\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i addAction
\i0  to add buttons (takes closure so you can say what to do when button pressed)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}can also take UIAlertAction instance that you can create locally\
{\listtext	\uc0\u8259 	}the title of the action is readable in the handler\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i addTextField
\i0  to add an input text box for the user to enter something (access via 
\i textFields
\i0  array)[can leave out the handler]\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}optional closure to configure the text field properties (eg. to make it mask passwords)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i textFields
\i0  - array of text fields that you added (so that you can read the value)\
{\listtext	\uc0\u8259 	}use 
\i present
\i0  in the view controller to pop it up\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UIAlertAction\ulnone  - custom action for UIAlertController buttons\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}takes a closure of code to run when the button is pushed (but can commit that for something simple like OK button to dismiss)\
{\listtext	\uc0\u8259 	}good idea to capture the UIAlertController and view controller (self) as unowned\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UIActivityViewController\ulnone  - lets you popup menu that lets you share content (eg. images to Facebook, etc.) [options depend on what you have installed]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}initialize with list of items and optional list of services (empty if none)\
{\listtext	\uc0\u8259 	}set 
\f1\fs22 \cf4 \CocoaLigature0 popoverPresentationController\cf0 ?.\cf4 barButtonItem 
\f0\fs28 \cf0 \CocoaLigature1 to anchor the popover to a button on iPad (ignored on iPhone)\
{\listtext	\uc0\u8259 	}use 
\i present
\i0  to pop up as normal\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul SLComposeViewController\ulnone  - (import Social package) alternative to UIActivityViewController (the full popup with album description, etc.)\
{\listtext	\uc0\u8259 	}\ul UIImagePickerController\ulnone  - can instantiate to let you pick images from camera roll, take pictures with camera, etc. (by default does not give you camera option)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i allowsEditing
\i0  - if true, user can do things like crop, etc.\
{\listtext	\uc0\u8259 	}
\i delegate
\i0  - in order to react to the result of the user selection, you need to set delegate to a class that conforms to UIImagePickerControllerDelegate and UINavigationControllerDelegate\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}all methods of these protocols are optional, so just declaring them makes the project build\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 {\listtext	\uc0\u8259 	}use 
\i present
\i0  in the view controller just like you do for UIAlertController (the delegate class, usually the view controller, will be called as appropriate)\
{\listtext	\uc0\u8259 	}NOTE: you will need to set \'93Privacy - Photo Library Usage Description\'94 key in Info.plist or this will crash\
{\listtext	\uc0\u8259 	}
\i sourceType
\i0  - can set to .camera to specify to take from camera\
{\listtext	\uc0\u8259 	}
\i isSourceTypeAvailable
\i0  - call to check whether a source type such as .camera is available before setting it (eg. not available on simulator)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls5\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UIImagePickerControllerDelegate\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls5\ilvl2\cf0 \ulnone {\listtext	\uc0\u8259 	}
\i imagePickerController(_, didFinishPickingMediaWithInfo) - 
\i0 for responding to user selecting an image\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls5\ilvl3\cf0 {\listtext	\uc0\u8259 	}
\i info
\i0  parameter is dictionary of values about the image that was picked\
{\listtext	\uc0\u8259 	}can use global variables from UIKit as keys (eg. UIImagePickerControllerEditedImage to represent either original or edited if editing enabled)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIStoryboard\ulnone  - storyboard type\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}instantiate as 
\f1\fs22 \cf3 \CocoaLigature0 UIStoryboard\cf2 (name: \cf5 "Main"\cf2 , bundle: \cf6 nil\cf2 ) 
\f0\fs28 \cf0 \CocoaLigature1 to get access to storyboard (eg. from AppDelegate) [nil = current app bundle]\
{\listtext	\uc0\u8259 	}instantiateViewController: can instantiate another view in the storyboard by storyboard ID string (identity inspector of view controllers)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can instantiate multiple of same and they will have their own separate state but same behavior\
{\listtext	\uc0\u8259 	}can instantiate things like nav controllers (and duplicate them) as well\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UINavigationController\ulnone  - wraps navigation between scenes in storyboard and adds navigation bar to the scenes\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}can customize the properties of the navigation bar in the navigation controller to set the appearance of the bar in the whole app (eg. translucence, etc.)\
{\listtext	\uc0\u8259 	}pushViewController() to push an instantiated view controller onto stack and display it [instantiated directly or with storyboard methods]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: view controllers can be instantiated directly in code and set up their UI in code (storyboard doesn\'92t have to be involved)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}has a stack of scenes that can be layered and unwound\
{\listtext	\uc0\u8259 	}by default, newly stacked scenes will get a bar with a Back button and also support swiping back\
{\listtext	\uc0\u8259 	}to allow for tapping to go to full screen, set 
\i hidesBarsOnTap
\i0  property\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}generally only want for certain views, so do it in code in viewWillAppear and viewWillDissappear\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}set 
\i title
\i0  property of navigation controller in viewDidLoad() after super to have title show up in navigation bar (and as back button if next view on stack)[NOTE: can have back button and title in same view nav bar]\
{\listtext	\uc0\u8259 	}
\i topViewController
\i0  - view controller at top of navigation stack\
{\listtext	\uc0\u8259 	}
\i popToRootViewController
\i0  - unwinds the view stack back to the origin (eg. to dismiss a chain of subviews that made each other - like a Finish button)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UINavigationItem\ulnone  - navigation bar functionality at runtime (eg. in viewDidLoad)\ul \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}
\i rightBarButtonItem
\i0  = UIBarButtonItem instance representing right button for the navigation bar\
{\listtext	\uc0\u8259 	}
\i leftBarButtonItem
\i0  = same but on left side\
{\listtext	\uc0\u8259 	}
\i backBarButtonItem
\i0  = replacement for default back button that just shows the title (when you pop up other views)\
{\listtext	\uc0\u8259 	}plural versions (rightBarButtonItems) are arrays if you want multiple buttons on one side (check the order when you run)\
{\listtext	\uc0\u8259 	}
\i hidesBackButton
\i0  - used to hide/show the back button of the navigation bar (eg. while doing a task)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: can set any of these to nil to get rid of it when you don\'92t need it anymore\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIBarButtonItem\ulnone  - navigation bar button items (created to be passed into members of UINavigationItem)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}initialization requires old #selector syntax instead of closure\
{\listtext	\uc0\u8259 	}different styles such as .add, .refresh, .flexibleSpace (for pushing other buttons as it fills up) [can be used in between buttons to align one to left and one to right], etc.\
{\listtext	\uc0\u8259 	}can initialize with 
\i title
\i0  in situations like when setting a backBarButtonItem\
{\listtext	\uc0\u8259 	}can also use 
\i customView
\i0  initializer to create a view (eg. UIProgressView or UIActivityIndicatorView) to use as the button (unclickable)\
{\listtext	\uc0\u8259 	}can use built-in ones (eg. + and refresh icons) or provide own text, image, etc.\
{\listtext	\uc0\u8259 	}different initializers (eg. barButtonSystemItem which can be set to different things like add, edit, done, camera)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITabBarController\ulnone  - wraps tab bar functionality (tab bar at bottom of screen)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}manages an array of view controllers that user can tap between\
{\listtext	\uc0\u8259 	}can do it all in Interface Builder but often better to do 1 controller in IB and then leverage in multiple tabs via code (eg. instantiate more copies of storyboard view controller to dynamically insert)\
{\listtext	\uc0\u8259 	}select the items in IB by clicking on them (eg. the default)\
{\listtext	\uc0\u8259 	}\ul UITabBarItem\ulnone  - a single icon in the tab bar\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can set System Item to various things like \'93Most Recent\'94 which have special icons associated with them (if you change the text, the icon will go away)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}can configure tab bar items in storyboard\
{\listtext	\uc0\u8259 	}to add tabs programatically, set view controller\'92s tabBarItem to a UITabBarItem, and then use tabBarController?.viewControllers?.append(viewController)\
{\listtext	\uc0\u8259 	}to check which tab you\'92re in from viewdidLoad(), get tabBarItem.tag\
{\listtext	\uc0\u8259 	}if you add enough tabs, eventually the extras will get wrapped with a \'93More\'94 button by iOS\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITableView\ulnone  - actual table view represented by table view controller\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i reloadData
\i0 : reloads the table content (eg. if you just swapped out the storage behind it) [can be called from viewDidLoad]\
{\listtext	\uc0\u8259 	}
\i reloadRows:
\i0  for reloading only specific row(s)\
{\listtext	\uc0\u8259 	}
\i insertRows
\i0 : for adding individual rows without the need to do a full reload (with animation) [.automatic is a good animation option to use]\
{\listtext	\uc0\u8259 	}NOTE: make sure you add to the data that your table view loads from before calling a method like insertRows\
{\listtext	\uc0\u8259 	}
\i isEditing
\i0  - set to true to bring up delete button, accessories, reordering support, etc.\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}only one that shows up by default is the delete button which doesn\'92t actually delete anything yet\
{\listtext	\uc0\u8259 	}add editingAccessoryType on UITableViewCell to add more\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls6\ilvl3\cf0 {\listtext	\uc0\u8259 	}implement behavior with methods of table view controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}default icon on left is delete one that slides out Delete button on right side -> can override with editingStyleForRowAt method of table view controller\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i allowsSelectionDuringEditing
\i0  - by default you can\'92t select during editing but you can override it with this\
{\listtext	\uc0\u8259 	}
\i register(_:forCellReuseIdentifier:)
\i0  - add a registration for type to reuse identifier in code (alternative to doing it in IB)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can even just register UITableViewCell.self\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i cellForRow(at:)
\i0  - cell for a given row (eg. to use when tapped to find the cell that was tapped)\
{\listtext	\uc0\u8259 	}
\i indexPathForSelectedRow()
\i0  - the currently selected row\'92s index path (or nil)\
{\listtext	\uc0\u8259 	}
\i deselectRow()
\i0  - for deselecting a row\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITableViewCell\ulnone  - a cell in a table view (create dynamically for cellForRowAt method in table view controller)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i textLabel
\i0  - for changing text in cell (custom or one that includes text) [overflow text automatically replaced with \'85]\
{\listtext	\uc0\u8259 	}
\i detailTextLabel
\i0  - secondary text label you can set (eg. with subtitle cell type) [overflow text automatically replaced with \'85]\
{\listtext	\uc0\u8259 	}
\i imageView
\i0  - for setting an image (can use with custom, etc.)\
{\listtext	\uc0\u8259 	}
\i editingAccessoryType
\i0  - type of accessory to use on editing (.checkmark, .none, etc.)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can set for prototype or for individual cell instances (eg. checkmark for favorites)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i accessoryType
\i0  - type of accessory to show on right side normally (eg. .disclosureIndicator)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can use .checkmark and .none to flip something on and off by tapping on a cell\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i selectionStyle
\i0  - what color to make a selected row (default is blue, can set to .none for not highlighting)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIProgressView\ulnone  - progress bar\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i progress
\i0  - float from 0 to 1 representing the progress\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIImageView\ulnone  - for displaying images\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(image:)
\i0  - create an instance from a UIImage instance (eg. in viewDidLoad when you don\'92t have in storyboard)\
{\listtext	\uc0\u8259 	}
\i image
\i0  property set to a UIImage instance to display\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIStackView\ulnone  - auto-layout powered view for stacking horizontally and vertically to make adaptive layouts easier [introduced in iOS 9]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}HINT: very useful for iPad multitasking apps where your app\'92s space can change while running due to other apps sliding or splitting\
{\listtext	\uc0\u8259 	}can nest stack views inside each other to create table layouts\
{\listtext	\uc0\u8259 	}to add one to your storyboard, drag either a Horizontal Stack View or Vertical Stack View from object library\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: these are both just UIStackView but with a different 
\i axis
\i0  property which is dynamically changeable at runtime\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: you can use auto layout constraints on the stack view itself and also put other controls/views that aren\'92t in the stack view (can also make it an outlet)\
{\listtext	\uc0\u8259 	}NOTE: hidden views don\'92t take up space, but non-hidden ones with alpha 0 do (so if you want to animate alpha, may want to set both properties)\
{\listtext	\uc0\u8259 	}NOTE: animating a control inside a UIStackView with UIView.animate() has some special behavior\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i isHidden
\i0  - if you animate it becoming true of false over time, the control will be shown sliding in/out (can change alpha at same time for added effect)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}WARNING: stack view doesn\'92t do any of its own drawing so setting something like background color is useless (have to set it on the parent view)\
{\listtext	\uc0\u8259 	}can set Distribution, Spacing, etc. in Attributes Inspector\
{\listtext	\uc0\u8259 	}Distribution Types (assuming 4 items)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}Fill (3 items normal size and 1 stretched (chosen by content hugging priority))\
{\listtext	\uc0\u8259 	}Fill equally (all 4 same size)\
{\listtext	\uc0\u8259 	}Fill Proportionally (intrinsic size used to size the elements proportional to each other)\
{\listtext	\uc0\u8259 	}Equal Spacing (instead of resizing elements, add spacing in between items to fill out the space)\
{\listtext	\uc0\u8259 	}Equal Centering (center of each element is equally spaced)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init()
\i0  - default initializer\
{\listtext	\uc0\u8259 	}
\i distribution
\i0  - the distribution type in code\
{\listtext	\uc0\u8259 	}
\i addArrangedSubview()
\i0  - add an item to the stack view at runtime\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: 
\b do not 
\b0 use addSubview() like you normally would with other stuff (the stack view maintain its own subcontrols and you shouldn\'92t mess with it)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i arrangedSubviews
\i0  - stacked child views as array\
{\listtext	\uc0\u8259 	}
\i removeArrangedSubview()
\i0  - remove a given view from the stack (and of course update the other views accordingly)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: you have to also call removeFromSuperview() on the view afterwards\
{\listtext	\uc0\u8259 	}if you don\'92t remote from superview afterwards, you can add it back again later efficiently (it\'92s only hidden for now)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i axis
\i0  - whether the stack view is .vertical or .horizontal\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}set depending on which type of stack view you drag in from object library, and then can be dynamically changed (eg. when size class changes)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i alignment
\i0  - the alignment in the other axis of the objects (eg. if vertical stack view, this is horizontal alignment)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}default = Fill (the objects will fill the other axis)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIImage
\i \ulnone  - 
\i0 actual image object\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}use the initializer with 
\i named
\i0  to load an image with the given name from your app bundle (with caching in case loaded again)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}the cache could cause lots of memory usage but it will clear itself as needed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}can use the initializer with contentsOfFile to load directly from a file (without caching)\
{\listtext	\uc0\u8259 	}can initialize form a CGImage as well\
{\listtext	\uc0\u8259 	}i
\i nit(data:)
\i0  - create an image from a Data object that wraps a UIImage object (autodetects the format (jpg, png, etc.))\
{\listtext	\uc0\u8259 	}Content Mode: Aspect Fit = show whole image with correct aspect ratio, Aspect Fill = fill whole space without distorting (some will get cropped off - but may need to tell it to clip in AI)\
{\listtext	\uc0\u8259 	}
\i setImage(_:for:)
\i0  = change button image to a UIImage for given state(s) (.normal is good default)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIButton
\i \ulnone  -
\i0  button the user can click (looks like flat text with colored background by default)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(type)
\i0  - overload that lets you initialize different types of buttons\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i detailDisclosure
\i0  - \'93i\'94 button for information\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}can set to an image (named image resource)\
{\listtext	\uc0\u8259 	}
\i Events: 
\i0 touchUpInside = user tapped and released (clicked)\
{\listtext	\uc0\u8259 	}by default, has border in IB but not at runtime\
{\listtext	\uc0\u8259 	}disable default animation (and showing of text) by giving it Custom type\
{\listtext	\uc0\u8259 	}Hint: if set type to custom and set a size, it will be respected at runtime\
{\listtext	\uc0\u8259 	}
\i addTarget
\i0  - for adding a method to handle taps at runtime (.touchUpInside is normal option to use)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: this might be a method of UIView instead of UIButton (move later if is)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i setTitle(_:for:)
\i0  - set a title for a given button state\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}set for .normal state to have it apply to all unspecified states\
{\listtext	\uc0\u8259 	}this is what you use instead of 
\i text
\i0  for buttons\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i titleLabel
\i0  - the internal label of the button\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}use this for things like changing the font\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: it is possible to clear the text of a button and use it as just a big colored region that responds to taps (even without border)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}remember that in iOS the norm for buttons is not to depress on click like in Windows (so they are pure tap regions)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}HINT: having spacing between buttons and background color on the parent view is a good way to distinguish large regions that are buttons\
{\listtext	\uc0\u8259 	}HINT: use tags to identify which button tapped if have a bunch of identical ones\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UISlider\ulnone  - slider control\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}useful events like value changed\
{\listtext	\uc0\u8259 	}
\i value
\i0  - float value of the slider (can get it directly after value changed event triggered, etc.) (defaults to 0.5)\
{\listtext	\uc0\u8259 	}
\i minimum
\i0  and 
\i maximum
\i0  - the range of the slider (defaults to 0 and 1)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UILabel\ulnone  - text label\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i text
\i0  property for setting text at design time or runtime\
{\listtext	\uc0\u8259 	}
\i attributedtext
\i0  property for setting NSAttributedString (formatted text instead of plain text)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: attributed strings can have different formatting internally\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}by default no border at runtime (but there is in IB)\
{\listtext	\uc0\u8259 	}
\i numberOfLines
\i0  - set lines to 0 to let text go over as many lines as needed to represent the whole string\
{\listtext	\uc0\u8259 	}
\i font
\i0  - UIFont for the label text\
{\listtext	\uc0\u8259 	}
\i textColor
\i0  - the color of the text\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITextField\ulnone  - editable text field\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i text
\i0  property representing the actual text\
{\listtext	\uc0\u8259 	}
\i isSecureTextEntry
\i0  - set to true to mask what the user is typing (eg. password)\
{\listtext	\uc0\u8259 	}by default can\'92t change the height (need to change the border style from the rounded one)\
{\listtext	\uc0\u8259 	}placeholder text in IB sets initial text that will go away when user clicks into the field\
{\listtext	\uc0\u8259 	}
\i delegate
\i0  - you can assign a UITextFieldDelegate to handle keypresses and things like that\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITextFieldDelegate\ulnone  - responds to keypresses, enter, etc. in a text field\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i textFieldShouldReturn()
\i0  - called when Return is pressed in the text field (return true to signal the keyboard can dismiss)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIWebView\ulnone  - a webpage view (browser)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}there is a much better version (WKWebView) in the WebKit library\
{\listtext	\uc0\u8259 	}has default initializer\
{\listtext	\uc0\u8259 	}
\i delegate
\i0  - UIWebViewDelegate\
{\listtext	\uc0\u8259 	}
\i loadRequest()
\i0  - for loading a web page by url\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}eg. loadRequest(URLRequest(url: \'93https://www.hackingwithswift.com\'94))\
{\listtext	\uc0\u8259 	}NOTE: can only use https by default (same issue as with WKWebView, see below)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i stringByEvaluatingJavaScript(from:)
\i0  - for evaluating a JavaScript to get a string from the page\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}in WKWebView where you would just use 
\i title
\i0 , here you have to do this: webView.stringByEvaluatingJavaScript(from: \'93document.title\'94)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i request
\i0  - the original request\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can get url by doing request?.url?.absoluteString ?? \'93\'94\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIWebViewDelegate
\i \ulnone  - 
\i0 delegate for a UIWebView instance\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i webViewDidFinishLoad()
\i0  - implement to catch web page changes\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITextView\ulnone  - multiline editable text field\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}acts like UITextField (see above)\
{\listtext	\uc0\u8259 	}WARNING: the text you enter will go underneath the keyboard by default: you have to add special code as follows (see JavaScriptExtension project)[main complication is dealing with hardware keyboards]:\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}add observers to default NotificationCenter for UIKeyboardWillHide and UIKeyboardWillChangeFrame (can be same method)\
{\listtext	\uc0\u8259 	}get the frame (converted) of the keyboard rectangle\
{\listtext	\uc0\u8259 	}set the insets (content and scroll) of the text view (all 4 edges 0 except in UIKeyboardWillHide the bottom should be keyboard frame height)\
{\listtext	\uc0\u8259 	}scroll selected range to visible (in case keyboard came up over text you\'92re typing)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i contentInset
\i0  - UIEdgeInsets (struct) describing how far from enclosing scroll bars the editable text area should be\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}use a single static value from the struct like 
\i zero
\i0  or initialize an instance with top, left, bottom, and right\
{\listtext	\uc0\u8259 	}TIP: use this from a keyboard notification to inset the text box to adjust for the keyboard popping up\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i scrollIndicatorInsets
\i0  - insets for the scroll indicators in the scrolling edges (see contentInset) (can set it equal to contentInset)\
{\listtext	\uc0\u8259 	}
\i selectedRange
\i0  - NSRange for whatever is selected (or current cursor)\
{\listtext	\uc0\u8259 	}
\i scrollRangeToVisible()
\i0  - scroll until the given NSRange (eg. selectedRange) is visible\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}accounts for contentInset and stuff like that\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i delegate
\i0  - UITextViewDelegate\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITextViewDelegate\ulnone  - delegate for UITextView\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}probably similar to UITextFieldDelegate above\
{\listtext	\uc0\u8259 	}
\i textViewdidBeginEditing()
\i0  - called when user starts editing\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}can do things like clear the text if it\'92s equal to the placeholder\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITextChecker\ulnone  - for spell checking text (eg. user input)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}instantiate in code with default initializer\
{\listtext	\uc0\u8259 	}
\i rangeOfMisspelledWord
\i0 : get first misspelling in a string range as an NSRange (can call again with next offset to continue search)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIColor\ulnone  - represent colors in the UIKit layer\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}static properties (of type UIColor) with names of standard colors\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i clear
\i0  = transparent\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i cgColor
\i0  property to read the color as a 
\i CGColor
\i0  (see Core Animation) [NOTE: can use for your own custom UIColor too]\
{\listtext	\uc0\u8259 	}initializer that takes red, green, blue, alpha as CGFloat from 0 to 1.0 for custom color [can use cgColor to pass to CA layer]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}alpha 1.0 = fully opaque\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}initializer that takes huse, saturation, brightness (and possibly alpha) also available\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIFont\ulnone  - basic font object\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i preferredFont(forTextStyle:)
\i0  - static, gets the Dynamic Type font (as UIFont) for the given style\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}enum values like .headline, .subheadline, etc.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIBezierPath\ulnone  - a path between points with connections (can be straight lines, bezier curves, etc.)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i cgPath
\i0  - for obtaining the path as a CGPath (eg. to pass into SpriteKit)\
{\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i move
\i0  - sets the current point that the path will operate on in future calls (internal state)\
{\listtext	\uc0\u8259 	}
\i addLine
\i0  - adds a straight line from the current point (eg. in the last 
\i move
\i0  call) to the given point\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIDevice\ulnone  - information about the device\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i current
\i0  - property that gives you instance of UIDevice for the current device\
{\listtext	\uc0\u8259 	}
\i name
\i0  - the display name of the device (like you would see in WiFi discovery)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIGraphicsImageRenderer\ulnone  - wraps rendering contexts for using CoreGraphics to render at a low level\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(size:)
\i0  - create a new instance with a given size and default values for everything else\
{\listtext	\uc0\u8259 	}
\i image()
\i0  - creates rendering context, passes it into a closure, and returns results as UIImage instance representing the new image\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}closure takes a UIGraphicsImageRendererContext as its parameter and returns nothing\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIGraphicsImageRendererContext\ulnone  - rendering context that you can use CoreGraphics on for fast drawing\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}obtain from UIGraphicsImageRenderer and draw within closure\
{\listtext	\uc0\u8259 	}wrapper for CGContext, which is what you\'92d use within CoreGraphics\
{\listtext	\uc0\u8259 	}use cgContext member for CoreGraphics stuff\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIGestureRecognizer
\i \ulnone  - 
\i0 base for objects that recognize gestures and call selector methods in response\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}can be set on any view via UIView.addGestureRecognizer and implement delegate to specify how it coexists\
{\listtext	\uc0\u8259 	}
\i view
\i0  - the view the gesture recognizer is attached to\
{\listtext	\uc0\u8259 	}HINT: the tutorial shows putting a separate gesture recognizer to each instance of a type of view\
{\listtext	\uc0\u8259 	}\ul UITapGestureRecognizer\ulnone  - gesture recognizer that looks for taps\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i init(target:action:)
\i0  - create a new instance using a given handler method (selector)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIGestureRecognizerDelegate\ulnone  - delegate for gesture recognizers to call for behavior\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}gestureRecognizer(_:
\i shouldRecognizeSimultaneouslyWith:)
\i0  - specify how the recognizer will coexist with others\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}return true to work simultaneously\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIActivityIndicatorView
\i \ulnone  
\i0 - spinning gear to show when a task is running and when it\'92s complete (actual object on page)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(activityIndicatorStyle:)
\i0  - create a new instance with a given style\
{\listtext	\uc0\u8259 	}if create in code, should still set the \'93translate mask into constraints\'94 thing to false\
{\listtext	\uc0\u8259 	}
\i hidesWhenStopped
\i0  - whether or not to make the indicator invisible when animation is stopped\
{\listtext	\uc0\u8259 	}
\i startAnimating()
\i0  - begins the animation indicating activity\
{\listtext	\uc0\u8259 	}
\i stopAnimating()
\i0  - stop the animation (indicating activity paused or done)\
{\listtext	\uc0\u8259 	}HINT: can put it into a stack view or replace a bar button with it temporarily, etc.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul FileManager\ulnone  - helps deal with file system\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}default: static instance to help manage the system\
{\listtext	\uc0\u8259 	}contentsOfDirectory: list of filenames (shallow) in the given directory\
{\listtext	\uc0\u8259 	}urls: get URL instances representing given paths (for instance use urls(for: .documentDirectory, in: .userDomainMask) to get documents directory for app(array of 1 URL))\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}this directory is private to the app and synced with iCloud for the user\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul Bundle\ulnone  - helps deal with resources inside your app bundle\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}main: static instance to manage your main app bundle at runtime\
{\listtext	\uc0\u8259 	}resourcePath: path to resources in your bundle such as images or text files\
{\listtext	\uc0\u8259 	}path(forResource:ofType:): for getting path of a specific file in your application (eg. path(forResource: \'93myfile\'94, ofType: \'93txt\'94) to find myfile.txt dragged into project)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul IndexPath
\i \ulnone  - 
\i0 row and section number (or item number for collection view) for table view operations and things like that\
{\listtext	\'95	}\ul NSLayoutConstraint\ulnone  - an Auto Layout constraint [in UIKit even though starts with NS]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i constraints
\i0 (withVisualFormat:) - static method for generating an array of constraints based on Auto Layout Visual Format Language (VFL)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}VFL = string that specifies your layout (knowing it can help understand constraints better even if use Interface Builder)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls6\ilvl3\cf0 {\listtext	\uc0\u8259 	}start with H: for horizontal layout, V: for vertical layout (space after : not allowed)\
{\listtext	\uc0\u8259 	}| and | represent edges of container (the view you\'92re adding the layout to)\
{\listtext	\uc0\u8259 	}[ and ] represent edges of view within the container\
{\listtext	\uc0\u8259 	}name of view goes in between the [ and ]\
{\listtext	\uc0\u8259 	}can ommit edges when obvious and not part of constraint (eg. everything comes after |), layout flows in the natural direction (left-right, top-bottom)\
{\listtext	\uc0\u8259 	}- means space (10 points by default)\
{\listtext	\uc0\u8259 	}() after name provides a place to specify constraints in this direction (eg. ==88 to mean equals 88 points, >= 10 to mean at least 10 points)\
{\listtext	\uc0\u8259 	}to override the default 10 points for spacing with a dash, use -()- where the () contains the condition as above\
{\listtext	\uc0\u8259 	}provide NAME instead of SIZE in () to use a \'93metric\'94 from the metrics dictionary (don\'92t need the == anymore in this case)\
{\listtext	\uc0\u8259 	}a NAME can also be used instead of SIZE to specify equality to another view within the same VFL\
{\listtext	\uc0\u8259 	}put @N with a priority number as N (1 to 1000) after the condition in () to give priority of that condition [1000 = must have (default)] (all constraints considered but priority taken into account for CONFLICTS)\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls6\ilvl4\cf0 {\listtext	\uc0\u8259 	}even if a constraint can\'92t be satisifed, Auto Layout will get as close as it can given the priority and other constraints\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls6\ilvl3\cf0 {\listtext	\uc0\u8259 	}Examples\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls6\ilvl4\cf0 {\listtext	\uc0\u8259 	}H:|[label1]|					horizontal layout, label1 fills the width of the container\
{\listtext	\uc0\u8259 	}V:|[label1]-[label2]-[label3]		vertical layout, label1 top = top of container, other labels follow with 10 points space between them [NOTE: no | at end]\
{\listtext	\uc0\u8259 	}V:|[label1(==88)]-(>=10)-]|		vertical layout, label1 is at top, then 88 points tall, and there is at least 10 points more of space to the bottom\
{\listtext	\uc0\u8259 	}V:|[label1(labelHeight)]]|		shows using a metric\
{\listtext	\uc0\u8259 	}V:|[label1(labelHeight@999)]-[label2(label1)]|            label1\'92s height set at 999 priority, label2 equal to label1 height (with 1000 priority)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}also takes a dictionary of name to UIView so that it can find your views by name from the VFL\
{\listtext	\uc0\u8259 	}also takes a dictionary of optional metrics to pass in (a metric is a named size that can be referred to within the VFL)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul Auto Layout\ulnone  - for adapting layout to different sized devices\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}2 rules your layout rules must follow\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}must be complete (can\'92t specify x without y)\
{\listtext	\uc0\u8259 	}must not contradict each other (eg. items overlap coordinates)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}If your layout contradicts itself, you will get unpredictable results (eg. one of the constraints violated, views smushed, etc.)\
{\listtext	\uc0\u8259 	}To do in code instead of in Interface Builder, do (for example) view.addConstraints() in viewDidLoad() and use VFL to constrain all the controls\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}just keep adding horizontal and vertical constraints as desired until done\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}Another way to do it in code is to use the anchor properties of UIView instances (accomplishes same thing but in a different way)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}good to understand this one because it deals with the anchors which show up in IB\
{\listtext	\uc0\u8259 	}see UIView above for explanation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}Recommended to do as much as you can in IB and mix in anchors and/or VFL when it helps to make it easier, cleaner, etc.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul MVC\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}storyboard scene is 
\i view
\i0 \
{\listtext	\uc0\u8259 	}controller is 
\i controller\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2
\i0 \cf0 {\listtext	\uc0\u8259 	}own the models\
{\listtext	\uc0\u8259 	}tend to have a lot of the code in iOS, and sometimes given too much code that could go in view or model instead\
{\listtext	\uc0\u8259 	}Tips for reducing Fat Controller Syndrome:\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls6\ilvl3\cf0 {\listtext	\uc0\u8259 	}make delegate objects instead of just passing in self for all delegates\
{\listtext	\uc0\u8259 	}move more code into either IB or into separate classes (eg. layout stuff)\
{\listtext	\uc0\u8259 	}push logic and formatting into model\
{\listtext	\uc0\u8259 	}switch to MVVM\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}data classes are 
\i models\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2
\i0 \cf0 {\listtext	\uc0\u8259 	}populated on child views when created (sometimes directly)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul Delegation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 \ulnone {\listtext	\uc0\u8259 	}an object (such as a view) has a member of a type of a given protocol\
{\listtext	\uc0\u8259 	}often in examples the delegate object is the view controller\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul AppDelegate\ulnone  - main application object (implements certain protocols and has a reference to the main window)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i application(_, didFinishLaunchingWithOptions:)
\i0  - called when application is ready to run (window.rootViewController and things like that are set)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls6\ilvl2\cf0 {\listtext	\uc0\u8259 	}good place to do things like inject view controllers into tabs at the top level (so that you don\'92t have to duplicate in storyboard)\
{\listtext	\uc0\u8259 	}UIStoryBoard can be instantiated to get access to the storyboard\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i window
\i0  - a UIWindow instance representing the application window (container for the top-level view controller(s))\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIWindow\ulnone  - a window (container for view controllers)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i rootViewController
\i0  - the top-level view controller of the storyboard (eg. tab bar or nav bar or main view)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UITouch\ulnone  - information about screen touches (used by UIKit and SpriteKit)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i location(in:)
\i0  - CGPoint representing the location of the touch relative to the given container\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls6\ilvl0\cf0 {\listtext	\'95	}\ul UIImageJPEGRepresentation()\ulnone  - function to create a 
\i Data
\i0  containing a UIImage (input) compressed to jpeg (quality in input as well)\
{\listtext	\'95	}\ul UIImagePNGReprsentation()
\i \ulnone  - function to create a 
\i0 Data
\i  
\i0 containing a 
\i UIImage
\i0  represented in png format\
{\listtext	\'95	}\ul UIImageWriteToSavedPhotosAlbum()\ulnone  - write a UIImage (including a UIImageView.image for instance) to the user\'92s photo library (camera roll if has camera, else saved photos) and call method (selector syntax) when done\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls6\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: even if this is a filtered version of an existing image, it should end up as a copy\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
Core Animation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Animation - imported via UIKit
\fs28 \

\fs24 UIKit uses CoreAnimation internally for its animations.
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls7\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CALayer\ulnone  - drawing layer below UIKit views in terms of abstraction (pointed to by member of UIVIew)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 borderWidth
\i0 : for setting thickness of border in points (default 0)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls7\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: can draw borders around multiple controls (with default 0 meaning not visible) and then set width to 1 when that control is \'93selected\'94 (in conjunction with gesture recognizer)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i borderColor
\i0 : for setting a color other than black on the border of a view (default black)\
{\listtext	\uc0\u8259 	}
\i cornerRadius
\i0 : for creating rounded corners\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls7\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 shadow*
\i0 : for configuring drop shadows (can be taxing on the system if transparency involved)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
GameplayKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 General non-media functionality that can be used for games or apps (eg. randomization, AI)\
NOTE: even though it\'92s called GameplayKit, it\'92s always available even for normal apps and you should not be afraid to use it if useful.\
\
Random Numbers: create a source or distribution object (or get one with a static method) and call the GKRandom methods on it [in addition for shuffling arrays there is a method on the random source (not distribution) itself]\
AI: to enable AI in your app, you need to implement the 3 protocols GKGameModel, GKGameModelPlayer, and GKGameModelUpdate, and create an instance of a strategist to use to pick moves\
	NOTE: there are other strategists besides GKMinmaxStrategist\
	NOTE: even though it\'92s made for games, you could try to make use of it in other apps if you wanted
\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul \ulc0 GKRandom\ulnone  - protocol for getting random numbers (adopted by sources and distributions)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i nextInt(upperBound:)
\i0  - next integer from 0, inclusive, to upperBound, exclusive [signed even though never negative]\
{\listtext	\uc0\u8259 	}
\i nextInt()
\i0  - next signed integer over the whole range (not unsigned like arc4random)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls8\ilvl2\cf0 {\listtext	\uc0\u8259 	}WARNING: according to the tutorial, this is less reliable than the bounded version and the other next* methods in some scenarios\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i nextBool()
\i0  - random boolean\
{\listtext	\uc0\u8259 	}
\i nextUniform()
\i0  - random floating point value from 0.0 to 1.0 (inclusive)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	\'95	}\ul \ulc0 GKRandomSource\ulnone  - random number generator\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 sharedRandom()
\i0  - static method to get shared random number generator of the system (as an instance of 
\i GKRandomSource
\i0 )\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls8\ilvl2\cf0 {\listtext	\uc0\u8259 	}no explicit seeding required\
{\listtext	\uc0\u8259 	}
\b nondeterministic
\b0  (won\'92t work for scenarios where you need it synchronized in multiple devices, like a network game)\
{\listtext	\uc0\u8259 	}since it\'92s shared, it\'92s 
\b not independent
\b0  (shared with C library arc4random and stuff like that)\
{\listtext	\uc0\u8259 	}only for quick, easy random number generation (much to easy to figure out the seed and things like that for important things)\
{\listtext	\uc0\u8259 	}similar algorithm to arc4random\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\fs28 supports all methods in 
\i GKRandom
\i0  protocol
\fs36 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\i\fs28 \cf0 {\listtext	\uc0\u8259 	}arrayByShufflingObjects(in:)
\i0  - instance method to return a shuffled version of an array\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls8\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: even this would be deterministic if called in a deterministic subclass\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls8\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\fs28 NOTE: subclasses available in GameplayKit, once instantiated and set up, can be called as GKRandomSource (or GKRandom)\
{\listtext	\uc0\u8259 	}\ul GKARC4RandomSource\ulnone  - subclass of GKRandomSource that uses arc4random functions but is 
\b independent
\b0 \
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls8\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i init()
\i0  - create an instance with 
\b nondeterministic
\b0  seed\
{\listtext	\uc0\u8259 	}
\i init(seed:)
\i0  - create an instance with a given seed\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls8\ilvl3\cf0 {\listtext	\uc0\u8259 	}by using the same seed on multiple instances, you can guarantee the sequence is 
\b deterministic
\b0  (eg. networked games in parallel)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls9\ilvl2
\i \cf0 {\listtext	\uc0\u8259 	}dropValues(_)
\i0  - skip the specified number of values in the sequence (eg. if someone might be able to figure out the next number for some reason)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls9\ilvl3\cf0 {\listtext	\uc0\u8259 	}this method is unique to this source (not on the base or on the other subclasses)\
{\listtext	\uc0\u8259 	}Apple recommends you drop 769 or more values (can round to 1024 if want) before doing anything important with this particular generator\
\pard\tx3100\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li3600\fi-3600\pardirnatural\partightenfactor0
\ls9\ilvl4\cf0 {\listtext	\uc0\u8259 	}the reason for this is the arc4 algorithm is prone to certain patterns that can allow the seed to be guessed within 768 values\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}RANDOMNESS: good\
{\listtext	\uc0\u8259 	}PERFORMANCE: good\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul GKLinearCongruentialRandomSource\ulnone  - another random source (see GKARC4RandomSource for members and purpose)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}RANDOMNESS: lowest\
{\listtext	\uc0\u8259 	}PERFORMANCE: fastest\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul GKMersenneTwisterRandomSource\ulnone  - another random source (see GKARC4RandomSource for members and purpose)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}RANDOMNESS: highest\
{\listtext	\uc0\u8259 	}PERFORMANCE: slowest\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: performance difference between the sources only matters if generating a large quantity of numbers\
{\listtext	\uc0\u8259 	}NOTE: higher randomness matters if using for cryptography (WARNING: Apple actually does not recommend any of these for cryptography)\
{\listtext	\uc0\u8259 	}NOTE: for ranges that aren\'92t covered within the GKRandom methods, use GKRandomDistribution instead\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0
\fs36 \cf0 {\listtext	
\fs28 \'95	}\ul GKRandomDistribution\ulnone  - random number generator for values within a certain range with a certain distribution\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}like having pure random number generator and applying a shape to it (in the case of this base class it\'92s 
\b uniform
\b0 )\
{\listtext	\uc0\u8259 	}supports all methods of 
\i GKRandom
\i0  protocol\
{\listtext	\uc0\u8259 	}
\i d6()
\i0  - static, gets a distribution for 6-sided die (1 to 6 inclusive)\
\ls10\ilvl1{\listtext	\uc0\u8259 	}
\i d20()
\i0  - static, gets a distribution for 20-sided die (1 to 20 inclusive)\
\ls10\ilvl1
\i {\listtext	\uc0\u8259 	}init(lowestValue:highestValue:)
\i0  - gets a uniform distribution between two inclusive endpoints using arc4 randomizer\
\ls10\ilvl1{\listtext	\uc0\u8259 	}
\i init(randomSource:lowestValue:highestValue:)
\i0  - gets a uniform distribution between two inclusive endpoints using given GKRandom (not GKRandomSource for some reason)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: since this takes a GKRandom instead of GKRandomSource, you could in theory create distributions upon distributions (eg. if you want to tighten up the bell curve, etc.)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(forDieWithSideCount:)
\i0  - gets a uniform distribution between 1 and the side count (inclusive)\
{\listtext	\uc0\u8259 	}\ul GKShuffledDistribution\ulnone  - subclass of GKRandomDistribution that guarantees each value is only seen once until all have been used (and then does it again)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}supports all methods of GKRandomDistribution including its own implementations of the static ones (they\'92re actually class methods that can be overridden)\
{\listtext	\uc0\u8259 	}HINT: roll a dice (d6) 6 times and get a different side each time\
{\listtext	\uc0\u8259 	}HINT: alternative to shuffling array if just want to get random numbers without repeats\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul GKGaussianDistribution\ulnone  - subclass of GKRandomDistribution that creates a bell curve\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}supports all methods of GKRandomDistribution including the static ones (which are actually class methods that can be overridden)\
{\listtext	\uc0\u8259 	}HINT: when you want random numbers that have some sense of averageness\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}\ul GKMinmaxStrategist\ulnone  - strategist that tries to minimize losses and maximize gains\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}since a strategist makes decisions based on a given board, it can be used across game resets with no problem\
{\listtext	\uc0\u8259 	}default 
\i init
\i0 \
{\listtext	\uc0\u8259 	}
\i maxLookAheadDepth
\i0  - integer representing how many moves ahead the strategist should look\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}probably need to test on lowest spec device to find a value that works (each move depth can be explosively more memory and CPU required)\
{\listtext	\uc0\u8259 	}could use this to create Easy, Medium, Hard difficulties for game\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i randomSource
\i0  - optional GKRandom to use for random behavior as needed\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}tutorial just sets it to nil (explicitly since apparently there is a default)\
{\listtext	\uc0\u8259 	}even when randomness is not requested, if two moves have the same score, randomSource will be used\
{\listtext	\uc0\u8259 	}nil randomSource means pick the first\
{\listtext	\uc0\u8259 	}HINT: there are plenty of random sources in GameplayKit to choose from if nil isn\'92t good enough\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}HINT: tutorial sets maxLookAheadDepth and randomSource (so those are probably the required things)\
{\listtext	\uc0\u8259 	}
\i gameModel
\i0  - GKGameModel to be set by your application to give it access to your game model\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}set this when the model is created (and if you reset and make a new one, reset it)\
{\listtext	\uc0\u8259 	}does not need to be set for every move calculation - the reference will be kept\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i bestMove(for:)
\i0  - calculate the best move for a given player (as a GKGameModelUpdate which can be casted to your move class)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}you should call this in a 
\b background thread
\b0  so it doesn\'92t lock up the UI\
{\listtext	\uc0\u8259 	}you should introduce a delay so the user doesn\'92t get confused (eg. 1 second minus the amount of time it takes to do the calculation)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}\ul \ulc0 GKGameModel\ulnone  - protocol that represents overall game state in a strategy-based game (for AI) [LOTS of required members]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}whatever object implements this protocol, it must implement NSCopying because GameplayKit AI copies the game model (explosively) to make a branch decision\
{\listtext	\uc0\u8259 	}because of the copying, you should keep your game model as small as you can, even if it means duplicating a bit in the view (see FourInARow game for example)\
{\listtext	\uc0\u8259 	}must also be an NSObject\
{\listtext	\uc0\u8259 	}NOTE: in all the protocol methods, you can safely cast to your game\'92s types because they will have come from your game in some way\
{\listtext	\uc0\u8259 	}Overall Strategy Algorithm (used by GameplayKit internally to pick next move for a player)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}copies the current game state (NSCopying and/or setGameModel\
{\listtext	\uc0\u8259 	}gets all possible moves the player can make (gameModelUpdates) and makes copies of the model with those moves applied (NSCopying, setGameModel, apply)\
{\listtext	\uc0\u8259 	}checks if it\'92s a win, loss, or a score (isWin, isLoss, score) to rate the desirability of that state\
{\listtext	\uc0\u8259 	}if doing more branches, repeats this process (provided nobody has won or lost in this state) for the other player and keeps going\
{\listtext	\uc0\u8259 	}the internal algorithm (eg. minimax) with whatever depth limit you specify will then figure out which move is best based on the scores on the branches\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i players
\i0  - optional array of GKGameModelPlayer that gets all players in the game\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}required member - can be stored property or computed getter property\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i activePlayer
\i0  - optional GKGameModelPlayer that gets the current player in the game model state (one making next move)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}required member - can be stored property or computed getter property\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}setGameModel(_)
\i0  - set the state of the model based on an existing model\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: can leverage this in your NSCopying implementation too\
{\listtext	\uc0\u8259 	}NOTE: the reason this exists in addition to NSCopying is because GameplayKit will keep copies around and apply new state to them to try to be more efficient when the branches explode\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}gameModelUpdates(for:)
\i0  - for the current game model state and the given player (GKGameModelPlayer), return all possible next moves (array of GKGameModelUpdate) [nil if none]\
{\listtext	\uc0\u8259 	}
\i apply(_:)
\i0  - update the game model state based on a move passed in\
{\listtext	\uc0\u8259 	}
\i score(for:)
\i0  - get an integer (negative allowed) of how desirable the state is for the given player [OPTIONAL]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}in some cases this may be somewhat arbitrary, and might lead to a mix of smart and dumb moves (kind of a heuristic)\
{\listtext	\uc0\u8259 	}simple example = 1000 if player wins, -1000 if opponent ones, 0 if nobody wins (leads to smart and dumb moves)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls10\ilvl3\cf0 {\listtext	\uc0\u8259 	}could improve it by taking into account how close user is to winning\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}more complex example = chess piece values added up or something like that\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i isWin(for:)
\i0  - get a boolean indicating whether the board state is an immediate win for the given player [OPTIONAL]\
{\listtext	\uc0\u8259 	}
\i isLoss(for:)
\i0  - like doing isWin(for:) for other player [OPTIONAL]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0\cf0 {\listtext	\'95	}\ul \ulc0 GKGameModelPlayer\ulnone  - protocol that represents a player in a strategy-based game (for AI) [must be an NSObject]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i playerId
\i0  - integer gettable property (computed or stored) that gives a unique integer ID for each player in the game (can be as simple as 0 and 1)\
{\listtext	\uc0\u8259 	}although you only have to give this one value to make the protocol work, you are free to store other information as needed in the class that implements it (and make use of it in game model)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls10\ilvl0
\fs36 \cf0 {\listtext	\'95	}
\fs28 \ul \ulc0 GKGameModelUpdate\ulnone  - protocol that represents an individual move in a strategy-based game (for AI) [must be an NSObject]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\i\fs28 value
\i0  - integer property representing how good a move is (to be set and read by GameplayKit, not your code)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls10\ilvl2\cf0 {\listtext	\uc0\u8259 	}this ends up getting the values your game model calculates for different states - it is not to be set (other than maybe 0 on init) by you\
{\listtext	\uc0\u8259 	}should be readable/writable (can be computed or stored)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls10\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\fs28 only the one required member but internally in your game model it will have meaning after casting
\fs36 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
WebKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Web browsing and HTML functionality.
\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul WKWebView\ulnone  - web browser view (render web page or raw html content) [see UIWebView for ideas of what else might be here]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}can set 
\i view
\i0  of view controller object to an instance of it and set the controller as the delegate (bypassing having to use that view in the storyboard)\
{\listtext	\uc0\u8259 	}
\i navigationDelegate
\i0 : set to class (eg. view controller) that will handle browsing actions for the view [must implement 
\f1\fs22 \cf4 \CocoaLigature0 WKNavigationDelegate protocol]\
\ls11\ilvl1
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}\ul WKNavigationDelegate\ulnone  - protocol that implements navigation functions for WKWebView\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls11\ilvl2\cf0 {\listtext	\uc0\u8259 	}all methods are optional\
{\listtext	\uc0\u8259 	}methods start with 
\i web\
\ls11\ilvl2
\i0 {\listtext	\uc0\u8259 	}
\i webView(_:didFinishNavigation)
\i0 : for responding to navigation to a url (eg. to set title)\
{\listtext	\uc0\u8259 	}
\f1\fs22 \CocoaLigature0 webView(\cf7 _\cf0  webView: \cf4 WKWebView\cf0 , decidePolicyFor navigationAction: \cf4 WKNavigationAction\cf0 , decisionHandler: \cf7 @escaping\cf0  (\cf4 WKNavigationActionPolicy\cf0 ) -> \cf4 Void\cf0 )\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls11\ilvl3
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}for deciding whether to allow navigation to a given url\
{\listtext	\uc0\u8259 	}see example in Project 4 if need to use this (it\'92s a little complicated and weird)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i load
\i0 : for loading a web page (eg. 
\f1\fs22 \cf8 \CocoaLigature0 webView\cf0 .\cf9 load\cf0 (\cf4 URLRequest\cf0 (url: url)))\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls11\ilvl2\cf0 \CocoaLigature1 {\listtext	
\f2 \uc0\u8259 
\f1 	}NOTE: it has to be https and not http because of security reasons (ignores you for http)\CocoaLigature0 \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1
\f0\fs28 \cf0 \CocoaLigature1 {\listtext	\uc0\u8259 	}
\i loadHtmlString
\i0 : for loading HTML content directly (instead of from the web)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls11\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}reload
\i0 : for refreshing\
\ls11\ilvl1
\i {\listtext	\uc0\u8259 	}allowsBackForwardNavigationGestures
\i0  - set to true to support swiping back and forth to navigate\
{\listtext	\uc0\u8259 	}
\i title
\i0 : can be retrieved after navigating to a web page (eg. to set the navigation bar title)\
{\listtext	\uc0\u8259 	}
\i estimatedProgress
\i0 : from 0 to 1, but delegate doesn\'92t tell you when it changes, so use KVO\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone SafariServices\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Functionality related to Safari itself (not just web browsing).
\fs36 \
\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul SFSafariViewController
\i \ulnone  - 
\i0 view controller that hosts Safari in your application (more powerful than UIWebView and WKWebView but much less customizable)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls12\ilvl1\cf0 {\listtext	\uc0\u8259 	}HINT: Since this is a view controller you can present and dismiss it modally so it feels like they went to Safari\
{\listtext	\uc0\u8259 	}NOTE: you don\'92t have to implement any delegates just to allow browing\'85it has what you need built in by instantiating it with a web page and presenting it\
{\listtext	\uc0\u8259 	}NOTE: There is a button within the controller to go to full Safari if the user wants it\
{\listtext	\uc0\u8259 	}
\i init(url:entersReaderIfAvailable:)
\i0  - initializes a controller at a given webpage\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls12\ilvl2\cf0 {\listtext	\uc0\u8259 	}does not seem to have the same http problem (instead of https) as WKWebView and UIWebView\
{\listtext	\uc0\u8259 	}Reader = text-only view, availability depends on web page\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls12\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(url:)
\i0  - same as above but without reader mode option\
{\listtext	\uc0\u8259 	}
\i delegate
\i0  - SFSafariViewControllerDelegate to use for events like user clicking Done (optional: Done button works as is already)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls12\ilvl0\cf0 {\listtext	\'95	}\ul SFSafariViewControllerDelegate\ulnone  - delegate for SFSafariViewController events\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls12\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i safariViewControllerDidFinish()
\i0  - user tapped Done\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
SpriteKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \
2d Games (inc. sprites, fonts, physics, particle effects, etc.)\
\
NOTE: can subclass specific classes to add behavior to them (eg. SKNode for grouping, SKSpriteNode for sprites with special capabilities) [remember if you don\'92t give initializer and members are ! or ? or =, you can leave out initializer]\
NOTE: you can access UIKit from SpriteKit apps (in fact they are hosted by UIKit storyboards and view controllers)\
NOTE: a useful way to draw directly (and quickly) in SpriteKit apps is to use UIKit to obtain a CoreGraphics context and use CoreGraphics to render\
NOTE: you could also bring SpriteKit into UIKit apps by doing what the template app does (controller loads scene, storyboard has SKView, etc.)\
NOTE: to use actual UIKit controls within a SpriteKit game, add them to the view controller and see steps in Xcode notes under Game project type\
	this is possible because SpriteKit just draws into a view within the UIKit framework\
HINT: to start a new game, use present(_:transition:) in the SKView to transition to a new instance of your game scene object\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Background, ground, player, rock graphics by Kenney\
	http://opengameart.org/content/tappy-plane\
	http://kenney.itch.io/kenney-donation\
\
Music by ShwiggityShwag \'96\'a0"8 Bit The Hero"\
	http://opengameart.org/content/8-bit-the-hero\
\
Coin sound by Luke.RUSTLD - "10 8Bit Coin Sounds"\
	http://opengameart.org/content/10-8bit-coin-sounds\
\
Explosion sound by Luke.RUSTLD - "Bomb Explosion 8bit"\
	http://opengameart.org/content/bombexplosion8bit\
\
Other Clipart:{\field{\*\fldinst{HYPERLINK "https://openclipart.org/"}}{\fldrslt  https://openclipart.org/}}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
See Plachinko project for dropping balls into animated slots and having them explode with a score\
See WhackAPenguin project for wack-a-mole style game with changing penguin images/states, cropping, only being able to hit when visible, timed events that decrease the interval over time (with some variability), ending game w/ gameover, etc.\
\
See SwiftyNinja for a Fruit Ninja style game with altered physics, lives count, drawing trails on the screen in response to user swiping (2-layered trail), responding to various phases of touch lifecycle (such as tracing movement), fancy animations like fading out the touch when you lift your finger, drawing multiple segments paths with max and min size clipping, playing sound effect that does not pile on itself (swoosh when you are moving finger), random positions w/ angular velocities, etc. based on position and desired learning curve of enemies vs. good guys, syncing cleanup code to frame drawing, using enums with meanings about what kind of things to create to allow for randomization, increasing difficulty via adjusting physics and delays as game goes on, using dispatch queue to chain enemies together with delay while doing other stuff immediately, removing enemies from the game when they go offscreen and only creating more enemies when last one (or sequence) done, using swipe/slice to kill sprite, animating destruction of objects (such as making them stop moving, shrink, explode, etc. all at the same time better than Plachinko), animating and showing life loss dynamically, ending game from various causes and various ways (eg. freezing everything by slowing down the world)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 See FireworksNight project for MissileCommand like game w/ recoloring artwork at runtime, having sprites follow a path (w/ rotation included), having a sparky tail behind a sprite, changing colors dynamically (eg. to show selection), removing fireworks that make it to a certain height, exploding objects (fireworks), awarding different points based on number of objects destroyed at once, detecting device being shaken, cooperation between view controller and scene classes\
\
See SpaceRace project for moving starfield as background, pixel-by-pixel collision detection, space gravity, scoring based on time alive, building a game quickly (see check-ins for approach that was used), moving player based on touching, ending game when they try to cheat [NOTE: this project took a total of 50 minutes from start to finish even with all the reading, looking up methods, and taking notes into this doc]((possible extension = fire lasers on touchesBegan to destroy debris))\
See MarbleMaze for maze that uses tilt (accelerometer) for rolling player through maze, hack for using touch on simulator to test, swirly vortexes, maze loading from text file, tile-based game, detailed collision detection masking w/ proper enumerations, conditional compilation for simulator vs. iDevice, stopping a player dead, sucking player into vortex when hits edge, collecting stars [[several todo items in this project could do for fun/learning later]]\
See ExplodingMonkeys for custom SKSpriteNode subclass, using CoreGraphics to draw, using stride() to iterate blocks in a game sprite, drawing random buildings with lights on and off (retro style DOS looking), calling UIKit stuff from SpriteKit, using UIKit controls in SpriteKit games, communication between the SpriteKit and UIKit layers of the same app, two-player game w/ turns, texture atlas, precise collision detection option, animating player raising and lowering arm to throw spinning object, basic math/trigonometry, applying impulse vector to object (to fling bananas), starting a new game (w/ transition, etc.), deduping multiple collisions, converting coordinates between CoreGraphics, UIKit, and SpriteKit, terrain destruction [[several todo items for later]]\
\
See FourInARow project for UIKit game that uses buttons as columns, proper separation of model and view, using arrays (single and multidimensional) and tags to identify cells/buttons/chips generically, stacking chips, making UIViews into circles(chips), animating dropping a chip into a column (in UIKit), receiving taps through chips to a button column, using statics for overall game state, turn-based game w/ colored chips and UI updates, game reset, detecting four in a row straight and diagonal, AI to allow playing against the computer, implementing NSCopying and the AI protocols for GameplayKit efficiently, using activity indicator and delay for UI \'93thinking\'94\
\
See CrashyPlane for iPhone game, portrait mode, animation loop for player (propeller spinning quickly), creating layers (solid colored sky with two pieces, background image), infinitely scrolling background, parallax scrolling (different layers different speeds), objects appearing from right edge of screen and dissappearing when hit left, random rock gap selection for user to navigate through, using SKAction to automate regular creation of new rocks, adding score label that floats above other stuff, specifying a floaty gravity world (to make game easier than real gravity would be - and to make it feel like plane has propeller), using taps to keep plane from falling\
\
See Hangman (in OSX folder) for cmdline game (and example of printing full state between each round) [doesn\'92t involve SpriteKit]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul Coordinates\ulnone  \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}Y axis is flipped from normal (higher Y = higher up screen)\
{\listtext	\uc0\u8259 	}Coordinates of an object are coordinates of the center (or anchor point if specified)\
{\listtext	\uc0\u8259 	}Angles are in radians, not degrees (true in UIKit too) [CGFloat.pi for 180 degrees]\
\ls13\ilvl1{\listtext	\uc0\u8259 	}By following the step to set scene anchor to (0, 0), you make bottom-left the origin in the scene [although it would default to center screen]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\'95	}\ul FPS\ulnone  - displayed by default until you turn it off in scene editor -> aiming for 60 FPS for games\
{\listtext	\'95	}\ul SKNode\ulnone  - base class for SpriteKit nodes (the classes that end in Node)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: most of what I put under SKSpriteNode below actually belongs here (will fix later) [see below]\
{\listtext	\uc0\u8259 	}SKNode objects form a tree of ownership\
{\listtext	\uc0\u8259 	}you can SUBCLASS SKNode yourself even if not rendering (eg. hole that owns hole image and mole image in whack-a-mole game) [stuff you don\'92t need like size can be ignored as well]\
{\listtext	\uc0\u8259 	}NOTE: often want to store your nodes directly in scene instead of finding in tree every time\
{\listtext	\uc0\u8259 	}coordinates, zPositions, etc. are relative to the node\'92s parent (including things like crop nodes)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}very useful because objects can be repositioned without knowing where they are exactly\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}good idea to encapsulate behavior in SKNode subclasses that other classes or the game scene can make use of\
{\listtext	\uc0\u8259 	}the tree does not prevent a node from being tapped (in other words children of children are findable by nodes(at:) method)\
{\listtext	\uc0\u8259 	}
\i parent
\i0  - the parent node of this node (optional)\
{\listtext	\uc0\u8259 	}
\i children
\i0  - array of the children of the node\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\'95	}\ul SKView\ulnone  - view hosted in view controller (castable from view member) in SpriteKit game\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i scene
\i0  - SKScene wrapped by the view (castable to your scene class) if you want to access members of it\
{\listtext	\uc0\u8259 	}
\i presentScene()
\i0  - present an SKScene in the view (used by the game template)\
{\listtext	\uc0\u8259 	}
\i presentScene(_:transition:)
\i0  - transition from the current scene to a new one (eg. to start a new game)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}first param is new scene that will replace the old one\
{\listtext	\uc0\u8259 	}2nd param is an SKTransition\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls13\ilvl0\cf0 {\listtext	\'95	}\ul SKScene\ulnone  - represents a scene in SpriteKit\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: SKScene is an SKNode (the root node) (so certain things like coordinate transformations are available)\
\ls13\ilvl1{\listtext	\uc0\u8259 	}TIP: to change scene properties, either use the Scene Editor (for something things) or edit GameViewController.Swift where the scene is created (already filled in by template)\
{\listtext	\uc0\u8259 	}roughly equivalent to an app controller in UIKit in terms of importance and position in the program\
\ls13\ilvl1{\listtext	\uc0\u8259 	}COORDINATES: all are within the scene (or parent that is in scene) -> the mapping of scene to screen happens as a result of the scaleMode after that\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}anchor point for scene (which tutorial says to set to 0,0) will be the origin point that all objects in the scene will be relative to\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls13\ilvl1\cf0 {\listtext	\uc0\u8259 	}WARNING: due to the above fact, there is a possibility that something you render will be cropped or distorted\
{\listtext	\uc0\u8259 	}
\i init(fileNamed:)
\i0  - initialize from a scene (sks) file (used by the default template)\
{\listtext	\uc0\u8259 	}
\i init(size:)
\i0  - initialize with a given size (can use to directly instantiate your scene class [eg. to start a new game])\
{\listtext	\uc0\u8259 	}
\i didMove(to:)
\i0  - sort of equivalent to 
\i viewDidLoad
\i0  from UIKIt (the place to do initialization)\
{\listtext	\uc0\u8259 	}
\i touchesBegan()
\i0  - override this to handle when the user touches the screen\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls13\ilvl2\cf0 {\listtext	\uc0\u8259 	}you get a set of UITouch (from UIKit) describing the places that are being touched\
{\listtext	\uc0\u8259 	}use 
\i self
\i0  (the scene) as the reference point for locations\
{\listtext	\uc0\u8259 	}good place to detect label/button taps as well\
{\listtext	\uc0\u8259 	}can just get the first one if you don\'92t want to worry about multitouch\
{\listtext	\uc0\u8259 	}NOTE: This is the only one where tutorial calls 
\b super
\b0  version (probably so that buttons and stuff still work)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls14\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i touchesMoved()
\i0  - override to handle movement while finger is still down after touches began\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls14\ilvl2\cf0 {\listtext	\uc0\u8259 	}works similarly to touchesBegan (see above)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i touchesEnded()
\i0  - override to handle user lifting finger from screen when touching has begun\
{\listtext	\uc0\u8259 	}
\i touchesCancelled()
\i0  - override to handle system interrupting the touch (eg. a dialog)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}consider calling your touchesEnded() method for consistency\
{\listtext	\uc0\u8259 	}NOTE: this is the only one where the tutorial checks if touches is populated before acting\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i update()
\i0  - override to execute code before each frame is drawn\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}useful for things like counting, doing some cleanup for offscreen or out of bounds things, stopping sounds, etc.\
{\listtext	\uc0\u8259 	}EXAMPLE: tutorial uses it to stop fuse sound if no bombs left (since you can only see frame by frame, you can\'92t see 0 bombs with sound because it\'92s synced to this)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i addChild()
\i0  - add a node (such as SKSpriteNode, SKLabelNode, etc.) to the scene\
{\listtext	\uc0\u8259 	}
\i physicsBody
\i0  - set this to an SKPhysicsBody if you want to have physics act on it (eg. have SKSpriteNodes inside react with the edges)\
{\listtext	\uc0\u8259 	}
\i physicsWorld
\i0  - SKPhysicsWorld representing overall physics behavior that affects all the bodies, such as gravity and collision detection\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}to make the scene detect its own collisions, set physicsWorld.contactDelegate to self\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i frame
\i0  - CGRect describing the rectangle containing the scene\'92s content (in scene coordinates, not scaled screen coordinates)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}if you want screen coordinates (eg. to see where cropping happens), use view?.frame\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i backgroundColor
\i0  - UIColor representing color to show behind texture (if any)\
\ls15\ilvl1{\listtext	\uc0\u8259 	}
\i scaleMode
\i0  - enum specifying how the game scene file\'92s dimensions will be mapped to the device\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}aspectFill = maintain aspect ratio and size up or down until whole screen covered (with one dimension exact and the other possibly cropped)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls15\ilvl3\cf0 {\listtext	\uc0\u8259 	}DRAWBACK: will change the size of items in the scene based on device size (despite points instead of pixels)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}fill = scale to fill exactly (with distortion)\
{\listtext	\uc0\u8259 	}aspectFit = like aspectFill but will have letterboxing instead of cropping\
{\listtext	\uc0\u8259 	}resizeFill = scale the scene\'92s size to fit the view\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i nodes(atLocation:)
\i0  - get an array of nodes at a given position (eg. when detected a tap)\
{\listtext	\uc0\u8259 	}
\i run
\i0  - you can run an action on the scene too (eg. sound effect)\
{\listtext	\uc0\u8259 	}
\i isUserInteractionEnabled
\i0  - can set to false to stop the scene from receiving things like touch events anymore (eg. Game Over)\
{\listtext	\uc0\u8259 	}
\i view
\i0  - the SKView containing the scene\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKSpriteNode\ulnone  - main image/sprite class\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}most of the methods below are actually on SKNode (refactor this later)\
{\listtext	\uc0\u8259 	}
\i init(imageNamed:)
\i0  - load an image from the assets by name and wrap it in an SKSpriteNode\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}probably will want to change other properties like position once you have instance\
{\listtext	\uc0\u8259 	}size will already be set for you\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(color:size:)
\i0  - load a rectangle with the given color (UIColor) and size (CGSize)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: you could still set the texture property to an image\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(texture:)
\i0  - load an image from an existing SKTexture instance\
{\listtext	\uc0\u8259 	}
\i texture
\i0  - SKTexture property, can use it to reassign the image after creation (eg. flipping between states of a character)\
{\listtext	\uc0\u8259 	}
\i size
\i0  - CGSize with size information for the node\
{\listtext	\uc0\u8259 	}
\i position
\i0  - CGPoint representing the position of the center of the image in its container\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}it\'92s ok to have it go off screen\
{\listtext	\uc0\u8259 	}negative numbers are also fine\
{\listtext	\uc0\u8259 	}defaults to 0,0 (center)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i anchorPoint
\i0  - CGPoint representing which part of the node is used for positioning\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}default is (0.5, 0.5) which means center of object\
{\listtext	\uc0\u8259 	}setting to (0.5, 1) would mean center-top (useful for pieces of sky)\
{\listtext	\uc0\u8259 	}when you position the object, the coordinates will be the coordinates of the anchor point\
{\listtext	\uc0\u8259 	}WARNING: coordinates of all children will be relative to this anchor point as well\
{\listtext	\uc0\u8259 	}NOTE: if you change this after setting coordinates, it will move the object (not transform existing coordinates)\
{\listtext	\uc0\u8259 	}WARNING: do not change the anchor point if going to give it a physics body as this can screw up the 
\b physics
\b0  (parent anchor point is fine)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i blendMode
\i0  - how the image combines with other images at the same positions (like in Photoshop)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}.replace = simple pixel override (fastest way) [definitely use this for background][don\'92t usually have to set if using physics]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i color
\i0  - UIColor to be combined with the non-transparent areas of the sprite (like photoshop opacity)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}
\i0 colorBlendFactor - blend between color member and the sprite texture (0 = texture only , 1 = color only)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2
\i \cf0 {\listtext	\uc0\u8259 	}
\i0 blending takes into account where the sprite image actually is (eg. leaves the overall shape and transparency)\
\ls15\ilvl2
\i {\listtext	\uc0\u8259 	}
\i0 TIP: great way to recolor artwork with no performance penalty
\i \
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}alpha
\i0  - 1.0 for fully opaque, 0 for invisible\
{\listtext	\uc0\u8259 	}
\i zPosition
\i0  - the z-order number of the item (use -1 for background)(don\'92t usually HAVE to set if using physics)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}defaults to 0 (so setting to 1 makes something pop in front of default items)\
\ls15\ilvl2{\listtext	\uc0\u8259 	}NOTE: you can use large negative values and build up layers too (completely flexible)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i zRotation
\i0  - rotation about the z-axis in radians (counterclockwise on the screen)\
{\listtext	\uc0\u8259 	}
\i xScale
\i0  and 
\i yScale
\i0  - can use for stretching/shrinking (floating point, default 1)\
{\listtext	\uc0\u8259 	}
\i physicsBody
\i0  - set this to an SKPhysicsBody if you want it to have physics act on it instead of it being static on the screen\
{\listtext	\uc0\u8259 	}
\i name
\i0  - optionally set this to a string that will be used to identify the object (for instance in collision detection) [can give multiple objects same name to name them by type]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: this is the preferred way rather than storing references to objects or whatever\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls15\ilvl3\cf0 {\listtext	\uc0\u8259 	}eg. find nodes that got tapped then for ones with certain names, can do something (and go up hierarchy with 
\i parent
\i0  if needed)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}can reassign name according to state if want\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i run()
\i0  - add an SKAction to the execution list for the node (in other words execute the action)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}ok to swap image after doing it in same function on main loop (because won\'92t get to the rendering until after that)\
{\listtext	\uc0\u8259 	}actions are queued to run asynchronously\
{\listtext	\uc0\u8259 	}optional 
\b closure
\b0  if you want to execute something when the action completes\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i removeFromParent()
\i0  - removes the node from its parent node (eg. remove a sprite from a scene after the character dies)\
{\listtext	\uc0\u8259 	}
\i removeAllActions()
\i0  - clear out all the actions assigned to the node (inc. ones that have already executed)\
{\listtext	\uc0\u8259 	}
\i convert(_:to:)
\i0  - convert a CGPoint in this node\'92s coordinates to those in another SKNode\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}eg. collision point in scene converted to point relative to one of the objects collided so that you can put something at that point within the object\'92s class\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i convert(_:from:)
\i0  - same but in reverse\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKTexture\ulnone  - an image, more basic than SKSpriteNode\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}SKTexture is to SKSprite Node as UIImage is to UIImageView\
{\listtext	\uc0\u8259 	}
\i init(imageNamed:)
\i0  - create an image from a resource\
\ls15\ilvl1{\listtext	\uc0\u8259 	}
\i size()
\i0  - get CGSize representing the size of the texture\
{\listtext	\uc0\u8259 	}probably other similar initializers and methods as sprite node\
{\listtext	\uc0\u8259 	}NOTE: this is not an SKNode\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKPhysicsBody\ulnone  - representation of physics properties within SpriteKit (set as properties of nodes)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}once you set a node to have a physics body, the behavior is handled automatically including gravity, animation, collision reaction, etc.\
{\listtext	\uc0\u8259 	}by default, things will accelerate with gravity to the bottom of the screen, bounce off each other, stack, tip each other over, etc.\
{\listtext	\uc0\u8259 	}balls will even roll!\
{\listtext	\uc0\u8259 	}HINT: if you set node to a picture of a ball with a transparent background and give it a circular physics body of the right radius, it will make a bouncing ball (but no smushing)\
{\listtext	\uc0\u8259 	}
\i init(rectangeOf:)
\i0  - simple initializer to set a rectangular physics body (eg. set to the same size as your SKSpriteNode)\
{\listtext	\uc0\u8259 	}
\i init(edgeLoopFrom:)
\i0  - initialize an edge loop (something that just bounces things off - for instance set to frame member of scene to contain things inside the scene)\
{\listtext	\uc0\u8259 	}
\i init(circleOfRadius:)
\i0  - initialize a circular physics body\
{\listtext	\uc0\u8259 	}
\i init(texture:size:)
\i0  - init a physics body based on an image (the non-transparent parents)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}good for creating irregular physics bodies with pixel-by-pixel collision detection\
{\listtext	\uc0\u8259 	}probably going to pass in something like sprite.size and sprite.texture!\
{\listtext	\uc0\u8259 	}NOTE: this automatically allows pixel-by-pixel collision detection which is not 100% accurate but very close (also performs a little less than shaped based so test it out and don\'92t abuse)\
{\listtext	\uc0\u8259 	}NOTE: if the texture is split into multiple pieces, only one piece will end up being used\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i restitution
\i0  - how bouncy the item is (from 0 bounciest to 1 no bounce) [default seems to be 1]\
{\listtext	\uc0\u8259 	}
\i isDynamic
\i0  - if true (the default) object will be moved by gravity and other objects (set to false to make it stationary and then it will just affect objects that hit it)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}setting it to 0 will stop the object immediately (eg. player when game is over)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i velocity
\i0  - CGVector representing the velocity of the object at this point in time (will of course be subject to physics over time)\
{\listtext	\uc0\u8259 	}
\i angularVelocity
\i0  - CGFloat representing radians per second rotation of the object\
{\listtext	\uc0\u8259 	}
\i allowRotation
\i0  - set to false to stop object from rotating (eg. if has glint on it that would look weird if it rotated)\
{\listtext	\uc0\u8259 	}
\i linearDamping
\i0  - friction to slow down object in linear domain (defaults to 0.1, set to 0 for none, set to higher value to have things slow down faster)\
{\listtext	\uc0\u8259 	}
\i angularDamping
\i0  - friction to slow down object in angular domain (default to 0.1, set to 0 for none)\
{\listtext	\uc0\u8259 	}
\i usesPreciseCollisionDetection
\i0  - set to true for objects where approximations aren\'92t good enough (such as small, fast-moving objects)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: in tutorial, banana had this property but buildings and apes it could collide with did not\
{\listtext	\uc0\u8259 	}will of course have slower calculations so use only when needed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i collisionBitMask
\i0  - number defining what categories of objects the node can collide with (physically) [defaults to all bits set]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}if one body is set to collide with the other but it does not reciprocate, only the first object will react to the collision physically\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i contactTestBitMask
\i0  - like collisionBitMask but defines which of the collisions we want to be notified about via the contact delegate [defaults to NO bits set]\
{\listtext	\uc0\u8259 	}
\i categoryBitMask
\i0  - defines what category(ies) of collision this physics body belongs to (defaults to all bits set)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}the category(ies) you define for each object determine the behavior of collisionBitMask and contactTestBitMask (it\'92s a flexible customization system that uses bits as categories)\
{\listtext	\uc0\u8259 	}can have items bounce off each other but not be notified, or be notified of overlap but not have them physically bounce\
{\listtext	\uc0\u8259 	}HINT: use an enum (w/ powers of 2) to define the categories (and to sort in the contact delegate call to normalize the order)\
{\listtext	\uc0\u8259 	}NOTE: since these are numbers, you can | the raw values of an enum together and assign the result to these masks\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i applyImpulse()
\i0  - applies an impulse vector (CGVector) to the object, pushing the object along the given speed at the given direction\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}physically it is saying how much momentum is transferred in each direction to the object\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKPhysicsWorld\ulnone  - an overall physics world (eg. gravity, collision detection, etc.)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i contactDelegate
\i0  - set to something that conforms to SKPhysicsContactDelegate protocol in order to enable collision detection\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}remember to also set the nodes\'92 collisionBitMask and contactTestBitMask as needed\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i gravity
\i0  - CGVector describing 2D acceleration due to gravity in m/s/s (default = earth = <0.0, -9.8>)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}reduce magnitude from -9.8 to make it more floaty\
{\listtext	\uc0\u8259 	}set to <0,0> for deep space\
{\listtext	\uc0\u8259 	}NOTE: you can change this while the program is running (eg. to respond to accelerometer stuff)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i speed
\i0  - overall speed ratio (CGFloat, default = 1.0)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}eg. adjust downward to make everything move slower\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKPhysicsContactDelegate\ulnone  - protocol to conform to in order to detect collisions (eg. conform your scene to this)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}for just having objects bounce off each other, you don\'92t need collision detection, but for detecting when collisions happen you do\
{\listtext	\uc0\u8259 	}
\i didBegin(_ contact: SKPhysicsContact)
\i0  - implement this to detect collisions between two objects\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}use contact.contactPoint (CGPoint) to determine where collision occured if it matters\
{\listtext	\uc0\u8259 	}use contact.bodyA.node and contact.bodyB.node to know which nodes were involved (could come in either order)\
{\listtext	\uc0\u8259 	}use node names to determine types of objects\
{\listtext	\uc0\u8259 	}one side or the other could be nil if that object was destroyed after the collision happened (eg. if get same collision notification for both sides)\
{\listtext	\uc0\u8259 	}NOTE: the tutorials set consistent values on both sides of the collision and then dedupe within this method (not sure if the ordering implies which mask was used)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKAction\ulnone  - represents an action such as a movement or rotation\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}contains factory methods that return SKAction instances which you can retain or queue\
\ls15\ilvl1{\listtext	\uc0\u8259 	}HINT: durations less than the refresh rate of the game mean \'93as fast as possible\'94 (synced to frames or not?)(eg. in an animation loop)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}duration of 0 can be used to do something immediately\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: you can use the same action in multiple sprites\
{\listtext	\uc0\u8259 	}
\i rotate(byAngle:duration:)
\i0  - factory method to create an SKAction that represents a rotation (radians and seconds)\
{\listtext	\uc0\u8259 	}
\i moveBy(x:y:duration:)
\i0  - linear movement over a duration in seconds (floating point)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: can use this to scroll a background by having two background pieces (possibly overlapped by 1 point depending on the image) and 2 moveBys for each of them\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls15\ilvl3\cf0 {\listtext	\uc0\u8259 	}one move to left for a duration and then one move to reset instantly back to the right by that amount\
{\listtext	\uc0\u8259 	}repeat forever\
{\listtext	\uc0\u8259 	}have different layers scrolling different speeds for depth\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i fadeOut(withDuration:)
\i0  - gradually reduce alpha value of the node to 0.0 (and leave it there)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}remember to clean up the expired action at some point if can happen again\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i scale(to:duration:)
\i0  - gradually change scale values of node (x and y)\
{\listtext	\uc0\u8259 	}
\i follow(path:asOffset:orientToPath:speed:)
\i0  - animate movement (and possibly rotation) of sprite along a given path\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i path
\i0  = CGPath (Hint: Use UIBezierPath)\
{\listtext	\uc0\u8259 	}
\i asOffset
\i0  = true if path should be considered relative to sprite\'92s position\
{\listtext	\uc0\u8259 	}
\i orientToPath
\i0  = true if object should be rotated so that it faces down the path\
{\listtext	\uc0\u8259 	}
\i speed
\i0  = how fast the object will move on the path (points per second maybe???)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i follow
\i0 () - other overloads of the above such as taking duration instead, taking less params, etc.\
{\listtext	\uc0\u8259 	}
\i setTexture(imageNamed:)
\i0  - change the texture of the sprite\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}eg. use in a sequence to animate things like character raising and lowering arm with timing\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i animate(with:timePerFrame:)
\i0  - displays an array of textures for a specified duration per texture\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}can pass into repeatForever to make a permanent animation loop\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i repeatForever(action)
\i0  - factory method that takes an SKAction instance and gives an SKAction that repeats that action forever in a loop (eg. rotate a circle forever)\
{\listtext	\uc0\u8259 	}
\i wait(forDuration:)
\i0  - wait for a specified number of (float) seconds [introduces a delay between/before other queued actions]\
{\listtext	\uc0\u8259 	}
\i run(block:)
\i0  - execute a closure [allows for something to be done in code in between actions later]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: can use this in a sequence with 
\i wait
\i0  to create more sprites at intervals (execute it on the scene)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i playSoundFileNamed(_:waitForCompletion:)
\i0  - play a sound file from the resources and optionally wait for it\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}if you don\'92t wait for completion, the completion closure (optional) will execute right away and so will other actions\
{\listtext	\uc0\u8259 	}if you want to be able to stop the sound while playing, use AVAudioPlayer from AVFoundation instead\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i sequence([SKAction])
\i0  - executes an array of actions in order (useful for specific sequences of actions that you need to happen a certain way)\
{\listtext	\uc0\u8259 	}
\i group([SKAction])
\i0  - the parallel version of 
\i sequence
\i0 \
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: it is common to have a group inside a sequence\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i removeFromParent()
\i0  - remove the item from its parent (useful to put at end of sequence)\
{\listtext	\uc0\u8259 	}the action is executed by putting it into the execution list for a node (such as SKSpriteNode) (executed asynchronously from the queueing)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKTransition
\i \ulnone  - 
\i0 a transition from one scene to another\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i doorway(withDuration:)
\i0  - factory method to get an instance that fades with a doorway effect\
{\listtext	\uc0\u8259 	}HINT: see other factory methods for other available transitions\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKLabelNode\ulnone  - the SpriteKit equivalent of UILabel (can also be used as a button by detecting tap)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(fontNamed:)
\i0  - create a label with a given font (eg. Chalkduster or Optima-ExtraBlack)\
{\listtext	\uc0\u8259 	}
\i text
\i0  -  the text of the label (you can update it after added to scene to keep it up to date)\
{\listtext	\uc0\u8259 	}
\i position
\i0  -  CGPoint saying where it goes\
{\listtext	\uc0\u8259 	}
\i horizontalAlignmentMode
\i0  - the alignment of the text within the label\
{\listtext	\uc0\u8259 	}
\i fontSize
\i0 : can use this as a surrogate for height (since 
\i size
\i0  property isn\'92t present)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKEmitterNode\ulnone  - particle effects node (such as explosion, smoke, starfield, etc.)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(fileNamed:)
\i0  - create an emitter node from a file in the resources (.sks file, don\'92t need the extension in the call)\
{\listtext	\uc0\u8259 	}
\i position
\i0  - like all other nodes, you can position it (eg. to where your object to get blown up is/was)\
{\listtext	\uc0\u8259 	}just use addChild() and then remove the child it\'92s replacing and it will look like the object is being blown up (or whatever)\
{\listtext	\uc0\u8259 	}animation happens automatically and then node goes away\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}the length of the animation is part of the particle effect itself\
{\listtext	\uc0\u8259 	}NOTE: another way to get rid of it is to remove it from its parent after a certain amount of time (probably a good idea to remove it at some point anyway)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i advanceSimulationTime()
\i0  - move forward in simulation time by a number of seconds (eg. so that a starfield can fill up the whole screen right away)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKCropNode\ulnone  - SKNode that crops its children\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i maskNode
\i0  - SKNode representing the image to use for cropping\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}the mask node (for instance an SKSpriteNode, or a tree) is rendered, and then any transparent pixels in that mask become cropped in the output of the crop node\
{\listtext	\uc0\u8259 	}default is nil which means no cropping\
{\listtext	\uc0\u8259 	}HINT: for penguin whacking game, the mask consisted of the visible hole plus a rectangle above it to account for going above ground\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}eg. SKNode that has hole image, crop node, and penguin image (where penguin is child of crop node)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls15\ilvl0\cf0 {\listtext	\'95	}\ul SKShapeNode\ulnone  - a generic shape that you can draw, move, etc. (follows a path that you give and can change) [eg. for drawing trail that tracks user input]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i strokeColor
\i0  - UIColor representing the color to draw on the path\
{\listtext	\uc0\u8259 	}
\i lineWidth
\i0  - CGFloat line width (defaults to 1.0)\
{\listtext	\uc0\u8259 	}HINT: you can store multiple shape nodes and use the same path for them (eg. a thicker trail under a thinner one of a different color)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls15\ilvl2\cf0 {\listtext	\uc0\u8259 	}go ahead and add them to the parent right away even before you set a path\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls15\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i path
\i0  - CGPath describing what path the shape should use (nil by default, which means to draw nothing)\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
SceneKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 3D Games
\fs36 \
\
MapKit\

\fs24 Map-related functionality (imports CoreLocation)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul MKMapView\ulnone  - container for a map that lets you zoom, pan, drop pins, etc.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}must enable Maps in Capabilities tab of project settings or your app will crash on load\
{\listtext	\uc0\u8259 	}by default, will show a map of the country that you can zoom into (no GPS required)\
{\listtext	\uc0\u8259 	}
\i addAnnotation()
\i0  - adds a map \'93annotation\'94 (which is a pin that has information attached)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls16\ilvl2\cf0 {\listtext	\uc0\u8259 	}the thing you pass in must conform to MKAnnotation protocol and inherit from NSObject\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i addAnnotations()
\i0  - same as singular version but takes array\
{\listtext	\uc0\u8259 	}
\i dequeueReusableAnnotationView(withIdentifier:)
\i0  - attempt to get an annotation view with a given identifier if it\'92s been created already (nil otherwise)\
{\listtext	\uc0\u8259 	}
\i mapType
\i0  - lets you select what type of map to show (eg. sattelite, normal, etc.)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	\'95	}\ul MKAnnotation\ulnone  - protocol to implement for class representing annotation (pin) on a map w/ information attached (clickable)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i title
\i0  - optional String with text that will show up when you tap the pin\
{\listtext	\uc0\u8259 	}
\i subtitle
\i0  - optional String with text that will show up as smaller subtext when you tap the pin [can be left out of the class]\
{\listtext	\uc0\u8259 	}
\i coordinate
\i0  - a CLLocationCoordinate2D representing the point for the pin\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	\'95	}\ul MKMapViewDelegate\ulnone  - protocol for an object (eg. the view controller) that handles behavior for MKMapView control\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i mapView(_:viewFor:)
\i0  - called when a new MKAnnotationView is needed (pin is being displayed)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls16\ilvl2\cf0 {\listtext	\uc0\u8259 	}should check if the viewFor parameter is of an annotation class you\'92re looking for (because system can have its own such as GPS pins)\
{\listtext	\uc0\u8259 	}should dequeue or create MKPinAnnotationView and return it\
{\listtext	\uc0\u8259 	}return nil if it\'92s an annotation you don\'92t handle\
{\listtext	\uc0\u8259 	}DEFAULT: if you don\'92t provide this delegate and method, it\'92s a red pin that pops up the title and subtitle\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i mapView()
\i0  - overload to respond to things like button clicks (takes map view, annotation view, and control that was clicked)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls16\ilvl2\cf0 {\listtext	\uc0\u8259 	}HINT: the tutorial uses this to pop up an alert box\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls16\ilvl0\cf0 {\listtext	\'95	}\ul MKPinAnnotationView\ulnone  - view that handles what type of pin to drop and what to pop up when it is tapped\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(annotation:reuseIdentifier:)
\i0  - create a view with a given annotation and identifier (which can be used to dequeue and reuse it later)\
{\listtext	\uc0\u8259 	}
\i annotation
\i0  - MKAnnotation property that you can set after the fact\
{\listtext	\uc0\u8259 	}
\i canShowCallout
\i0  - set to true if want it to pop up bubble when you tap\
{\listtext	\uc0\u8259 	}
\i rightCalloutAccessoryView
\i0  - UIButton instance (create in code) (eg. .detailDisclosure) to put on right side of popup bubble\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls16\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: the button does not need to have a target as the MKMapViewDelegate will handle clicks for it\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls16\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i pinColor
\i0  - used to select the color of the pint on the map\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
CoreLocation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Location-related functionality (MapKit support, iBeacons, GPS location, tracking user\'92s movements, Geocoding)\
\
iBeacon: a protocol Apple supports for physical devices you can have\
	can get range from a beacon\
	can also just detect is present (eg. to do something when you\'92re home)\
	NOTE: although GPS can be used for these purposes, iBeacon is more accurate in smaller distances\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul CLLocationCoordinate2D\ulnone  - a point on a 2D map (no altitude)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(latitude:longitude:)
\i0  - create a new point from float coordinates\
{\listtext	\uc0\u8259 	}
\i latitude & longitude
\i0  - coordinates (CLLocationDegrees)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf0 {\listtext	\'95	}\ul CLLocationManager\ulnone  - location manager that you can ask for location notifications and stuff like that\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i delegate
\i0  - can set to CLLocationManagerDelegate to handle location notifications\
{\listtext	\uc0\u8259 	}
\i requestWhenInUseAuthorization()
\i0  - request that the user grant authorization while the app is in use (must have Info.plist set up with message)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}non-blocking call (the delegate will be informed when the user chooses)\
{\listtext	\uc0\u8259 	}result is remembered by system next time app is run\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i requestAlwaysAuthorization()
\i0  - same as above but requesting to always have access\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}non-blocking call (the delegate will be informed when the user chooses)\
{\listtext	\uc0\u8259 	}result is remembered by system next time app is run\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i isMonitoringAvailable(for:)
\i0  - static method to check if monitoring is available for a given class (eg. CLBeaconRegion) on this system\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}false for simulator\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i isRangingAvailable()
\i0  - static method to check if bluetooth ranging is available on the system\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}false for simulator\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i startMonitoring(for:)
\i0  - begins location monitoring of a CLRegion instance (such as CLBeaconRegion for iBeacon)\
{\listtext	\uc0\u8259 	}
\i startRangingBeacons(in:)
\i0  - starts the receiving of notification for a CLBeaconRegion (usually coupled with startMonitoring above)\
{\listtext	\uc0\u8259 	}
\i requestLocation()
\i0  - asynchronously asks for GPS location of user (which will call methods in the delegate when ready or failed)\
{\listtext	\uc0\u8259 	}
\i startMonitoringVisits()
\i0  - asynchronously asks for periodic updates of GPS coordinates as the user moves around (will call methods in delegate)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf0 {\listtext	\'95	}\ul CLLocationManagerDelegate\ulnone  - protocol to implement if you want to receive delegate calls from CLLocationManager for location notifications\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i locationManager(_:didChangeAuthorization)
\i0  - called to let you know if you are authorized or not (after authorization has been requested)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}check the status (didChangeAuthorization) parameter for what you have been authorized for\
{\listtext	\uc0\u8259 	}good place to start monitoring of locations/devices\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i locationManager(_:didRangeBeacons:in:)
\i0  - called to notify of location changes in beacons (after you\'92ve started monitoring)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}2nd param is CLBeacon array representing beacons being updated\
{\listtext	\uc0\u8259 	}3rd param is CLBeaconRegion being updated\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i locationManager(_:didUpdateLocations)
\i0  - called in response to requestLocation() on manager\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}gives you an array of CLLocation (just take the first)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i locationManager(_:didFailWithError)
\i0  - called when requestLocation() fails to get user location\
{\listtext	\uc0\u8259 	}
\i locationManager(_:didVisit)
\i0  - called when startMonitoringVisits() sees a visit (CLVisit)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}departureDate will be Date.distantFuture if arrival\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}\ul CLBeaconRegion\ulnone  - represents scanning for proximity to a Bluetooth beacon using iBeacon protocol\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(proximityUUID:major:minor:identifier:)
\i0  - initialize a new instance with given identity information\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls17\ilvl2\cf0 {\listtext	\uc0\u8259 	}(the given descriptions are analogies, you are free to use as much or as little subdivision as is needed for your app)\
{\listtext	\uc0\u8259 	}proximityUUID = UUID of you or your store chain\
{\listtext	\uc0\u8259 	}major = specific app (branch location) [optional]\
{\listtext	\uc0\u8259 	}minor = subdivision within app (department) [optional]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls17\ilvl0\cf0 {\listtext	\'95	}\ul CLBeacon\ulnone  - an individual beacon being updated in a notification\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls17\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i proximity
\i0  - CLProximity representing the proximity to the beacon (enum values like near, far, unknown, immediate)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \
Core Graphics\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Device-Independent Drawing\
NOTE: since it\'92s at a lower level, CoreGraphics can update in background threads instead of requiring work to be queued back to the main thread\
WARNING: the context drawing stuff is specific to iOS 10 (if you need to support older stuff, need to learn the old versions as shown in Milestone 10 in the Hacking with Swift Guide Book)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul CGColor\ulnone  - color in the Core Animation layer (lower level than UIColor although UIColor can convert to CGColor)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1
\fs36 \cf0 {\listtext	\uc0\u8259 	}
\fs28 to make your own color, make UIColor and use cgColor magic property
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0
\fs28 \cf0 {\listtext	\'95	}\ul CGPoint\ulnone  - struct representing a point in space\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i zero
\i0  - static instance representing <0, 0>\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\'95	}\ul CGSize\ulnone  - size information (width and height) [stored as CGFloat]\
{\listtext	\'95	}\ul CGRect\ulnone  - a rectangle\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i insetBy(dx:dy:)
\i0  - returns a new CGRect which has been shrunk in both axes but still has the same centerpoint\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}width and height will be shrunk by 2*dx and 2*dy\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i width, height, minX, minY, midX, midY, maxX, maxY
\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\'95	}\ul CGFloat\ulnone  - a floating point number (interopable with regular floats/doubles)(floats and doubles often accepted by functions/properties that take CGFloat)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}easy to cast other things like ints, floats, etc. just by using CGFloat(value)\
{\listtext	\uc0\u8259 	}
\i pi
\i0 : static member, the value of pi (also available as members of Double and Float)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\'95	}\ul CGVector\ulnone  - 2D vector (dx and dy CGFloat members)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}can be initialized using various types (floats, ints, CGFloats, etc.)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\'95	}\ul CGImage
\i \ulnone  - 
\i0 an image\
{\listtext	\'95	}\ul CGAffineTransform\ulnone  - a transformation action (eg. to be applied over a duration of time within UIKit animations)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(scaleX:y:)
\i0  - create a transform that multiplies the dimensions by a scale factor (leaving the center in the same place)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: if you apply this transform again in the future it will have no effect because the system will know the thing already has been scaled (and thus the scale factor remains the same)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls18\ilvl3\cf0 {\listtext	\uc0\u8259 	}in other words, these are not cumulative\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(translationX:y:)
\i0  - basic movement\
{\listtext	\uc0\u8259 	}
\i init(rotationAngle:)
\i0  - rotate within the X way plane\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}angle is in RADIANS (use CGFloat.pi if needed)\
{\listtext	\uc0\u8259 	}rotation will take shortest path (eg. 360 = don\'92t move, 270 = 90 degrees counterclockwise, 90 = 90 degrees clockwise) [note that I used degrees here but you cannot]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i identity
\i0  - static property to get the transform representing no transform\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}use this if you\'92ve applied other transforms and want to put it back (inc. movements, resizing, etc.)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\'95	}\ul CGPath\ulnone  - represents a path\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}useful to use UIBezierPath (even for straight segments) and use its 
\i cgPath
\i0  property to get this when you need it\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls18\ilvl0\cf0 {\listtext	\'95	}\ul CGContext\ulnone  - device-independent graphics context for fast drawing\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}can be obtained via cgContext property of UIGraphicsRendererContext (see UIKit)\
{\listtext	\uc0\u8259 	}by default, only what you draw will be drawn (the rest is transparent)\
{\listtext	\uc0\u8259 	}maintains a current path and only draws it when you tell it to\
{\listtext	\uc0\u8259 	}you can keep adding to the path and it\'92s smart enough to only draw what is necessary\
{\listtext	\uc0\u8259 	}path doesn\'92t include stroke and color information - that comes in when you draw the path\
{\listtext	\uc0\u8259 	}it\'92s ok to draw out of the bounds of the context (it\'92ll just be clipped) (this may happen due to stroke being centered and going above and below the rect)\
{\listtext	\uc0\u8259 	}text and images can be drawn to the context by using 
\i draw
\i0  methods of String and UIImage (which magically find the context from inside the closure if you are in a rendering closure)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}image.draw(at:) = draw image to the rendering context\
{\listtext	\uc0\u8259 	}string.draw() = for rendering text to the context\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls18\ilvl3\cf0 {\listtext	\uc0\u8259 	}takes attributes dictionary specifying paragraph style (NSMutableParagraphStyle) and font (UIFont) [keys are NSFontAttributeName and NSParagraphStyleAttributeName]\
{\listtext	\uc0\u8259 	}if code completion not bringing up the method, try making it NSString instead\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}UIColor has a 
\i set
\i0  method that can set the stroke and fill color of the current context (magic like above)\
{\listtext	\uc0\u8259 	}
\i setFillColor()
\i0  - sets the color that goes inside shapes\
{\listtext	\uc0\u8259 	}
\i setStrokeColor()
\i0  - sets the color that shapes are stroked with\
{\listtext	\uc0\u8259 	}
\i setLineWidth()
\i0  - the width (in points) of the stroke around a shape (centered so that it goes lineWidth /2 each way)\
{\listtext	\uc0\u8259 	}
\i setBlendMode()
\i0  - set the blend mode to use in the next draw\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}.clear = get rid of what is there already (eg. to cutout holes)\
{\listtext	\uc0\u8259 	}other Photoshop-like ones available\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i addRect
\i0 () - adds a CGRect to the current path\
{\listtext	\uc0\u8259 	}addEllipse()
\i  - 
\i0 adds an ellipse to the current path (as constrained by a CGRect passed in)\
{\listtext	\uc0\u8259 	}
\i drawPath()
\i0  - draws the current path using given draw mode (.fillStroke = the normal one with a fill and a stroke)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}the path is (presumably) cleared at this point (because tutorials draw new ones and it\'92s fine)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i strokePath()
\i0  - paints a line along current path (using stroke color and line width)\
{\listtext	\uc0\u8259 	}
\i fill()
\i0  - fills a rectangle using CGRect and current fill color (skipping the path and drawing stuff above)\
{\listtext	\uc0\u8259 	}
\i translateBy()
\i0  - translates all rendering by given x and y coordinates (eg. if translating 100, then -100 will go to 0)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}anything that has already been added to path or drawn is not affected by this change\
{\listtext	\uc0\u8259 	}cumulative to existing translations\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i rotate(by:)
\i0  - rotates all rendering by given radians around the ORIGIN\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: translation happens first so if you want to rotate around center you can translateBy first\
{\listtext	\uc0\u8259 	}anything already added to path or drawn is not affected by this change\
{\listtext	\uc0\u8259 	}cumulative to existing rotations\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i move(to:)
\i0  - moves the current path position to the given CGPoint (but does not add anything to path)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}translations and rotations taken into account\
{\listtext	\uc0\u8259 	}translations/rotations applied after moving will preserve absolute position of current point\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i addLine(to:)
\i0  - adds a line from the current position to the given CGPoint in the current path\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}translations and rotations taken into accounts\
{\listtext	\uc0\u8259 	}EX) if you used the same coordinates for move and addLine but applied a translation in between, it would add a line to the path\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i clip()
\i0  - uses current path to set clipping path so that only what\'92s inside the path is drawn\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls18\ilvl2\cf0 {\listtext	\uc0\u8259 	}clears the path\
{\listtext	\uc0\u8259 	}affects subsequent drawing\
{\listtext	\uc0\u8259 	}can be taxing on the system\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls18\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i setShadow()
\i0  - set drop shadow information for subsequent drawing (more efficient than CALayer version)\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone \
CoreImage\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Image filtering functionality (not pure pixel filters - things like gaussian blur, distortion, and vignette as well)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CIContext\ulnone  - handles rendering\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls19\ilvl1\cf0 {\listtext	\uc0\u8259 	}want to create once and use throughout app because creating one is expensive\
{\listtext	\uc0\u8259 	}default empty initializer\
{\listtext	\uc0\u8259 	}
\i createCGImage(_:from:)
\i0  - create a CGImage instance by passing image through filter\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls19\ilvl2\cf0 {\listtext	\uc0\u8259 	}parameters are CIImag (probably obtained by filter.outputImage!) and a rectangle (probably outputImage.extent to render whole thing)\
{\listtext	\uc0\u8259 	}this method is what does the actual work of applying the filter and creating a new image\
{\listtext	\uc0\u8259 	}the new image is independent of the original\
{\listtext	\uc0\u8259 	}will often want to construct a new UIImage from the CGImage\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls19\ilvl1\cf0 {\listtext	\uc0\u8259 	}it is possible to chain filters together too for complex processing\
{\listtext	\uc0\u8259 	}NOTE: sometimes filters will run slowly in simulator, but always quickly on devices because CoreImage is very FAST\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0
\fs36 \cf0 {\listtext	\'95	}
\fs28 \ul CIFilter\ulnone  - an image filter (takes input image and some filter settings and creates output image)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls19\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(name:)
\i0  - create a new filter of a given name (certain built-in names that must be spelled correctly)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls19\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i CISepiaTone\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls19\ilvl1\cf0 {\listtext	\uc0\u8259 	}setValue(value, forKey: constant)
\i0  - set a value in the filter using predefined key that expects certain values\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls19\ilvl2
\i \cf0 {\listtext	\uc0\u8259 	}setValue(image, forKey: kCIInputImageKey) 
\i0 will add a CIImage as the input image for the filter\
\ls19\ilvl2
\i {\listtext	\uc0\u8259 	}setValue(float, forKey: kCIInputIntensityKey)
\i0  will set the intensity of the filter (0 to 1) [like Photoshop opacity]\
{\listtext	\uc0\u8259 	}WARNING: if you set a key that the filter doesn\'92t support, it will crash (use 
\i inputKeys
\i0  to check, or specifically code for each filter)\
{\listtext	\uc0\u8259 	}see Apple documentation for supported keys by filter\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls19\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}outputImage
\i0  - property that gives you a CIImage which represents the output image of the filter (but the work isn\'92t done just yet when you get it)\
\ls19\ilvl1
\i {\listtext	\uc0\u8259 	}inputKeys
\i0  - array of string keys supported by the current filter
\i \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls19\ilvl0
\i0 \cf0 {\listtext	\'95	}\ul CIImage\ulnone  - an image in the CoreImage library\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls19\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(image:)
\i0  - create a CIImage based on a UIImage instance\
{\listtext	\uc0\u8259 	}
\i extent
\i0  - CGRect representing the size of the image\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 AVFoundation\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Audio/Visual stuff available to both SpriteKit and UIKIt
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul AVAudioPlayer\ulnone  - sound player (for playing a sound with control over playback)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(contentsOf:)
\i0  - initialize player for sound at given URL (but don\'92t start playing yet) [throws]\
{\listtext	\uc0\u8259 	}
\i play()
\i0  - begin (or resume) playback of sound [will stop on its own when done]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}stop()
\i0  - stop the sound from playing (more like pause than stop)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	\'95	}\ul AVAudioSession\ulnone  - overall session for recording/playback (not needed by AVAudioPlayer)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i sharedInstance()
\i0  - static, get the current singleton session for the device\
{\listtext	\uc0\u8259 	}
\i setCategory()
\i0  - sets the current session type based on a string constant [throws]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls20\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i AVAudioSessionCategoryPlayAndRecord
\i0  - record and playback session\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i setActive()
\i0  - try to set the active state to a boolean [throws]\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls20\ilvl2\cf0 {\listtext	\uc0\u8259 	}setting your app\'92s audio session as the active one before doing work\
{\listtext	\uc0\u8259 	}will fail (throw) if something higher priority is active (eg. a phone call)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i requestRecordPermission()
\i0  - ask the user for permission to record (using the normal Allow/Don\'92t Allow dialog)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls20\ilvl2\cf0 {\listtext	\uc0\u8259 	}takes a closure that takes an 
\i allowed
\i0  parameter to tell you the answer\
{\listtext	\uc0\u8259 	}as always, remember that the closure will not be in the main thread\
{\listtext	\uc0\u8259 	}NOTE: in order for this to work you need 
\f3\fs32 \cf10 \expnd0\expndtw0\kerning0
\'93Privacy - Microphone Usage Description\'94 
\f0\fs28 \cf0 \kerning1\expnd0\expndtw0 in Info.plist\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	\'95	}\ul AVAudioRecorder
\i \ulnone  - 
\i0 for recording audio to a file from the microphone [throws]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: even though this isn\'92t created via a session and doesn\'92t take a session, you must set up the AVAudioSession to make it work\
{\listtext	\uc0\u8259 	}NOTE: to play back the recording, use AVAudioPlayer\
{\listtext	\uc0\u8259 	}
\i init(url:settings:)
\i0  - create a new instance to record to a given file (url)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls20\ilvl2\cf0 {\listtext	\uc0\u8259 	}settings = dictionary [String: Any] with record settings (constants available for keys)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls20\ilvl3\cf0 {\listtext	\uc0\u8259 	}AVFormatIDKey = general format (eg. kAudioFormatMPEG4AAC constant for .aac file)\
{\listtext	\uc0\u8259 	}AVSampleRateKey = sample rate in Hz\
{\listtext	\uc0\u8259 	}AVNumberOfChannelsKey = # recording channels (1 for mono)\
{\listtext	\uc0\u8259 	}AVEncoderAudioQualityKey = quality to use (eg. AVAudioQuality.high.rawValue)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i delegate
\i0  - AVAudioRecorderDelegate for this instance\
{\listtext	\uc0\u8259 	}
\i record()
\i0  - start/resume recording (erasing existing file if applicable)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls20\ilvl2\cf0 {\listtext	\uc0\u8259 	}doesn\'92t throw - uses the delegate to report errors\
{\listtext	\uc0\u8259 	}delegate also is notified when complete\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i stop()
\i0  - stop recording and close audio file\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls20\ilvl0\cf0 {\listtext	\'95	}\ul AVAudioRecorderDelegate\ulnone  - handles interruptions, encoding errors, completion, etc. from AVAudioRecorder\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls20\ilvl1\cf0 {\listtext	\uc0\u8259 	}all methods are optional\
{\listtext	\uc0\u8259 	}
\i audioRecorderDidFinishRecording(_:successfully:)
\i0  - called when recording ends normally (flag tells you whether it failed or not)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls20\ilvl2\cf0 {\listtext	\uc0\u8259 	}succesfully is true if reached time limit or stopped (not by stop() method)\
{\listtext	\uc0\u8259 	}succesfully is false if encoding error\
{\listtext	\uc0\u8259 	}interruptions do not trigger this method (they trigger another one)\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 UserNotifications\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Functionality related to publishing notifications (lock screen, notification center, push notifications, etc.) [don\'92t pop up when app itself has focus]\
NOTE: notifications are independent of the app instance once scheduled
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul UNUserNotificationCenter\ulnone  - central notification wrapper\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i current()
\i0  - gets the current notification center for your app (use this rather than creating an instance yourself)\
{\listtext	\uc0\u8259 	}
\i requestAuthorization(options:closure:)
\i0  - pop up an alert asking the user for permission to use notifications (asynchronous)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}options is a bitfield (UNNotificationOptions) of what you want to support [.alert, .badge, .sound, etc.]\
{\listtext	\uc0\u8259 	}closure takes a boolean of whether you have been authorized, and an error otherwise (granted, error)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls21\ilvl3\cf0 {\listtext	\uc0\u8259 	}this is done so that code that comes after the call is executed right away while the user is \'93thinking\'94\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}once you click it the first time, the system remembers for the future and answers on the user\'92s behalf\
{\listtext	\uc0\u8259 	}can be configured in Settings just like apps you\'92ve seen\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i add()
\i0  - adds a UNNotificationRequest as a local notification (does not handle push notifications)\
{\listtext	\uc0\u8259 	}
\i removeAllPendingNotificationRequests()
\i0  - unscheduled all pending notification requests asynchronously on a separate thread\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}anything whose trigger has not been met yet\
{\listtext	\uc0\u8259 	}not sure about repeats (find out later???)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i setNotificationCategories()
\i0  - add categories to notification center (array of UNNotificationCategory)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}add it in each running instance of the app (even though notifications are independent of the instance)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i delegate
\i0  - something that conforms to UNUserNotificationCenterDelegate to handle actions taken on notifications\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotificationRequest\ulnone  - a notification to present to notification enter (includes trigger & content information)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(identifier:content:trigger:)
\i0  - create a new instance with a unique identifier, UNNotificationContent, and UNNotificationTrigger\
{\listtext	\uc0\u8259 	}unique identifier is used for updating or removing later, so make it truly unique (eg. use UUID)\
{\listtext	\uc0\u8259 	}
\i content
\i0  - UNNotificationContent representing the content of the request\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotificationTrigger\ulnone  - represents a trigger to be used for notifications\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UNCalendarNotificationTrigger\ulnone  - subclass that deals with absolute time/date related triggers\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i init(dateMatching:repeats:)
\i0  - initialize with a DateComponents instance and a bool specifying whether it is a repeating notification\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}\ul UNTimeIntervalNotificationTrigger\ulnone  - subclass that deals with time interval related triggers\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i init(timeInterval:repeats:)
\i0  - initialize with time in seconds and whether it should repeat\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNMutableNotificationContent\ulnone  - represents the actual content of a notification (subclass of UNNotificationContent)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i title
\i0  - name of the notification\
{\listtext	\uc0\u8259 	}
\i body
\i0  - the description of the notification\
{\listtext	\uc0\u8259 	}
\i categoryIdentifier
\i0  - name of registered notification category to use (for delegating user actions if you\'92ve set it up) [see UNNotificationCategory]\
{\listtext	\uc0\u8259 	}
\i userInfo
\i0  - dictionary of custom data (eg. to pass to delegate when user responds)\
{\listtext	\uc0\u8259 	}
\i sound
\i0  - UNNotificationSound to play when the notification happens\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotificationSound\ulnone  - a sound to play as part of notifications\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i default()
\i0  - factory method to obtain the default notification sound\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotificationAction\ulnone  - an action to allow a user to perform in response to a notification\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(identifier:title:options:)
\i0  - create an action\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}identifier is internally identifier for the application to use\
{\listtext	\uc0\u8259 	}title is the text to display to the user\
{\listtext	\uc0\u8259 	}options = what to do (eg. .foreground = launch app in the foreground)\
{\listtext	\uc0\u8259 	}NOTE: this only shows up in rare circumstances (notification pops up on home screen, but not on lock or notification center screens)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotificationCategory\ulnone  - a category of notifications\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(identifier:actions:intentIdentifiers:)
\i0  - create a category instance\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}identifier = internal use ID for the category (eg. for use in UNNotificationContent)\
{\listtext	\uc0\u8259 	}actions = array of UNNotificationAction\
{\listtext	\uc0\u8259 	}intentIdentifiers = array of intents (empty if none) [tutorial doesn\'92t show this so I don\'92t know yet what it does]\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNUserNotificationCenterDelegate\ulnone  - protocol for delegates handling notification actions\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i userNotificationCenter(center:response:completionHandler:)
\i0  - called when user selects action to perform\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}passes in the notification center\
{\listtext	\uc0\u8259 	}response = UNNotificationResponse representing the action taken\
{\listtext	\uc0\u8259 	}completionHandler = something you should make sure to call before you return\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotificationResponse\ulnone  - a user response to a notification\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i notification
\i0  - UNNotification instance representing the notification the user responded to\
{\listtext	\uc0\u8259 	}
\i actionIdentifier
\i0  - string identifying the action\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls21\ilvl2\cf0 {\listtext	\uc0\u8259 	}might be the string you gave in UNNoficationAction\
{\listtext	\uc0\u8259 	}might be UNNotificationDefaultActionIdentifier which means the user swiped to unlock\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls21\ilvl0\cf0 {\listtext	\'95	}\ul UNNotification\ulnone  - a notification that happened\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls21\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i request
\i0  - the original UNNotificationRequest (eg. added by the app) [can read back the stuff you set on it before]\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 MultipeerConnectivity\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 P2P functionality (can be tested by running on device and simulator at same time)\
NOTE: Apple will use Wi-Fi, or create ad-hoc Wi-Fi, or use Bluetooth depending on what is available\
See SelfiShare for overall view of how connection management and data transmission works
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul MCSession\ulnone  - manager class that handles all P2P functionality\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(peer:securityIdentity:encryptionPreference:)
\i0  - create a new session\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}peer = MCPeerID for the local device\
{\listtext	\uc0\u8259 	}securityIdentity = more specific security information (tutorial leaves nil)\
{\listtext	\uc0\u8259 	}encryptPreference = enum of things like .required (recommended to secure data)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i delegate
\i0  - MCSessionDelegate to handle events from the session\
{\listtext	\uc0\u8259 	}
\i connectedPeers
\i0  - array of MCPeerID for peers you are connected to\
{\listtext	\uc0\u8259 	}
\i send(_:toPeers:with:)
\i0  - send data to connected peer(s)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}first param is the Data object to send\
{\listtext	\uc0\u8259 	}toPeers = array of MCPeerID (eg. connectedPeers)\
{\listtext	\uc0\u8259 	}with = enum specifying type of transmission (eg. .reliable)\
{\listtext	\uc0\u8259 	}NOTE: this method throws on error\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\'95	}\ul MCPeerID\ulnone  - identifies each user during a P2P session\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(displayName:)
\i0  - create a new peer ID with a given display name (tutorial shows using UIDevice.current.name)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\'95	}\ul MCAdvertiserAssistant\ulnone  - handles advertising existence to other users and taking responses/connections\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(serviceType:discoveryInfo:session:)
\i0  - create a new instance\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}serviceType = string identifying your app within the framework\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls22\ilvl3\cf0 {\listtext	\uc0\u8259 	}should contain only numbers, letters, and hyphens\
{\listtext	\uc0\u8259 	}should be max 15 characters\
{\listtext	\uc0\u8259 	}Apple recommends having your company and a description of app (eg. abc-txtchat for Txt Chat app by company abc)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}discoveryInfo = dictionary of extra information for browsers (tutorial has nil)\
{\listtext	\uc0\u8259 	}session = the MCSession to use\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i start()
\i0  - begin advertising the device as a peer and waiting for connections\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\'95	}\ul MCBrowserViewController\ulnone  - used to help user see who is nearby and join sessions with them\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(serviceType:session:)
\i0  - create a new instance in a given MCSession with a given serviceType identifier\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}serviceType should be same string described in initializer of MCAdvertiserAssistant\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1
\i \cf0 {\listtext	\uc0\u8259 	}delegate
\i0  - MCBrowserViewControllerDelegate to handle events from this view controller\
{\listtext	\uc0\u8259 	}to display it, use 
\i present
\i0  just like you would with others like UIAlertController\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\'95	}\ul MCSessionDelegate\ulnone  - protocol for handling events from MCSession\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}methods that the tutorial said were required but you can leave blank: 3 session overloads w/ 
\i didReceive, didStartReceivingResourceWithName
\i0 , 
\i didFinishReceivingResourceWithName\
\ls22\ilvl1
\i0 {\listtext	\uc0\u8259 	}
\i session(_:peer:didChange:)
\i0  - called when a session changes state such as when someone connects to you\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}use didChange (internally state) to determine what happened\
{\listtext	\uc0\u8259 	}use peer (an MCPeerID) to get info about the peer that you connected/disconnected with\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i session(_:didReceive:fromPeer:)
\i0  - called when data is sent from a peer (eg. as sent by MCSession 
\i send
\i0  method)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls22\ilvl2\cf0 {\listtext	\uc0\u8259 	}_ = the session\
{\listtext	\uc0\u8259 	}didReceive = Data instance representing the data that was sent\
{\listtext	\uc0\u8259 	}fromPeer = MCPeerID representing the peer the data is coming from\
{\listtext	\uc0\u8259 	}NOTE: since this is going to be called on a worker thread, you need to dispatch any UI changes back to main thread\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls22\ilvl0\cf0 {\listtext	\'95	}\ul MCBrowserViewControllerDelegate\ulnone  - protocol for handling events from MCBrowserViewController\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls22\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i browserViewControllerDidFinish()
\i0  - required method to handle dismissing the controller without cancelling (can just call dismiss)\
{\listtext	\uc0\u8259 	}
\i browserViewControllerWasCancelled()
\i0  - required method to handle cancelling the controller (can just call dismiss)\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 CoreMotion\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Accelerometer functionality
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls23\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CMMotionManager\ulnone  - main motion wrapper for CoreMotion\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls23\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: do not need special permissions like with map or location libraries\
{\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i startAccelerometerUpdates()
\i0  - starts the manager monitoring for accelerometer changes\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls23\ilvl2\cf0 {\listtext	\uc0\u8259 	}these updates are \'93received\'94 by polling the 
\i accelerometerData 
\i0 member\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls23\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i accelerometerData
\i0  - CMAccelerometerData containing the current accelerometer data if you\'92ve called startAccelerometerUpdates()\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls23\ilvl2\cf0 {\listtext	\uc0\u8259 	}key thing would be to get accelerometerData.acceleration.x (and .y) to get the actual acceleration values in meters/second (can be used to populate physics body vectors, for instance)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls23\ilvl3\cf0 {\listtext	\uc0\u8259 	}values would be components of the full force of earth\'92s gravity as defined by the tilting of the device (both 0 when the device is flat)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls23\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: the y component is opposite of SpriteKit so you\'92d have to reverse it\
{\listtext	\uc0\u8259 	}NOTE: the components are relative to portrait mode, so in landscape mode you have to flip x and y (test to make sure you get it right for landscape left vs. right)\
{\listtext	\uc0\u8259 	}could possibly be nil so use an if let\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 CoreSpotlight\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Spotlight Search functionality
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul CSSearchableIndex\ulnone  - a searchable index (such as the one Spotlight uses)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i default()
\i0  - static method to get the instance representing the index spotlight uses on the device\
{\listtext	\uc0\u8259 	}
\i indexSearchableItems()
\i0  - adds an array of CSSearchableItem to the index (with optional completion handler to indicate whether worked)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls24\ilvl2\cf0 {\listtext	\uc0\u8259 	}all the metadata is included/searchable in the index, not just the unique identifier\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i deleteSearchableItems()
\i0  - removes an array of strings (the unique identifiers from CSSearchableItem creation) to remove from the index (with optional completion handler as in adding)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	\'95	}\ul CSSearchableItem\ulnone  - an item within the index that can be found by searching\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(uniqueIdentifier:domainIdentifier:attributeSet:)
\i0  - create a new item\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls24\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i uniqueIdentifier
\i0  = a name for the item (to be used for identification in the app)\
{\listtext	\uc0\u8259 	}
\i domainIdentifier
\i0  = a logical grouping (eg. album if song track)\
{\listtext	\uc0\u8259 	}
\i attributeSet
\i0  = CSSearchableItemAttributeSet with metadata for the item\'92s display\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i expirationDate
\i0  - by default items expire after a month, so set it to Date.distantFuture if you want to make it permanent\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	\'95	}\ul CSSearchableItemAttributeSet\ulnone  - metadata for a search result in the index\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(itemContentType:)
\i0  - create a new instance for a given content type\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls24\ilvl2\cf0 {\listtext	\uc0\u8259 	}can use constants from MobileCoreServices like kUTTypeText\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i title
\i0  - the displayable title of the item\
{\listtext	\uc0\u8259 	}
\i contentDescription
\i0  - more detailed description of the item\
{\listtext	\uc0\u8259 	}HINT: there are lots of attributes including camera settings, etc.\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	\'95	}NOTE: to deal with the user picking a search result in Spotlight, implement 
\i application(_:continue:restorationHandler:)
\i0  in your app delegate\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls24\ilvl1\cf0 {\listtext	\uc0\u8259 	}the app will automatically be launched and then that method will be called when it\'92s finished launching\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls24\ilvl0\cf0 {\listtext	\'95	}WARNING: Apple monitors how users interact with your search results and if it thinks you are indexing unhelpful data, it will stop showing your results (so only index what\'92s important)\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 MobileCoreServices\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Data types for inter-app functionality
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls25\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul kUTTypeText\ulnone  - constant for a text item\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls25\ilvl1\cf0 {\listtext	\uc0\u8259 	}can use the constant as a real string with \'93as String\'94 after it\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 CloudKit\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Convenience functionality related to Apple\'92s CloudKit (see Xcode notes)\
NOTE: need to add CloudKit (under iCloud) in the Capabilities tab for your app target to use this library (see Xcode notes)\
NOTE: see Xcode notes for additional information about stuff you may need to do in CloudKit dashboard for your app (rather than in code)\
NOTE: basically all CloudKit methods are asynchronous, so don\'92t assume they have happened in the next line (use the closures)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0
\fs36 \cf0 {\listtext	\'95	}
\fs28 \ul CKContainer\ulnone  - CloudKit container for your app\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}each container instance at runtime has 2 CKDatabase databases, a public one (your app\'92s CloudKit storage [not separated by user]) and a private one (user\'92s iCloud storage)\
{\listtext	\uc0\u8259 	}
\i default()
\i0  - get the default container for the app (an instance to run methods on)\
{\listtext	\uc0\u8259 	}
\i publicCloudDatabase/
\i0 privateCloudDatabase
\i  - 
\i0 properties representing the public and private databases (CKDatabase)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKDatabase\ulnone  - database of CloudKit/iCloud storage\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}databases have CKRecord instances to store data\
{\listtext	\uc0\u8259 	}
\i save()
\i0  - saves a CKRecord to the database asynchronously and calls the given closure when done (remember may be on different thread)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}closure takes record and error (which will be nil if successful)\
{\listtext	\uc0\u8259 	}WARNING: it is very important to check the error because you\'92re going over the network, user\'92s storage (or yours) could be full, etc.\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i save(subscription)
\i0  - save a CKQuerySubscription to the database as above\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}subscribes you to a push notification based on the subscription object (and of course takes a closure to let you know if it works)\
{\listtext	\uc0\u8259 	}WARNING: subscribing to an existing subscription will fail so be careful about timing if doing asynchronous delete\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}various fetch methods to retrieve records (this will fetch the whole records, so if you want to filter first use the more complicated CKQueryOperation)\
{\listtext	\uc0\u8259 	}
\i fetch(withRecordId:closure:)
\i0  - get a specific record from the database (and call closure with that record and error if any)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}NOTE: CKAsset fields will automatically be downloaded into a temporary cache and can be accessed via CKAsset fileUrl field\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i fetchAllSubscriptions()
\i0  - gets all subscriptions (push notifications for database changes) and passes them into a closure (subscriptions, error)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}subscriptions is an optional [CKSubscription]\
{\listtext	\uc0\u8259 	}HINT: tutorial shows getting all subscriptions, then deleting all of them, then adding back based on the controls\'92 states\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i add()
\i0  - takes a CKQueryOperation to perform a complex query asynchronously (closures provided to CKQueryOperation determine how to handle results)\
{\listtext	\uc0\u8259 	}
\i perform(_:inZoneWith:closure:)
\i0  - convenience wrapper for 
\i add()
\i0  that takes just a CKQuery and returns the results in a closure when done\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}tutorial passes nil for zone\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i delete(withSubscriptionID:)
\i0  - unsubscribe (remove a subscription from the DB)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}takes a trailing closure that passes in a string and an error\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKRecord\ulnone  - a database record containing key-value pairs\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}one possible value type is CKAsset for binary data\
{\listtext	\uc0\u8259 	}
\i init(recordType:)
\i0  - create a new instance with a given record type string (identifies the record type in the cloud so you can retrieve it later)\
{\listtext	\uc0\u8259 	}
\i recordID
\i0  - ID fo the record in the database (CKRecordID)\
{\listtext	\uc0\u8259 	}use [] to set values for keys just like with a dictionary, but cast to CKRecordValue with \'93as\'94 (magically works for many types - not allowed for custom types)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}can assign a CKAsset as well (without casting)\
{\listtext	\uc0\u8259 	}can assign CKReference (may need casting) to link to another record\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}use [] to read values as well (but may have to cast with as! (eg. as! String))\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKAsset\ulnone  - a binary blob to attach to CKRecord\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(fileURL:)
\i0  - create a new instance containing the contents of a given file\
{\listtext	\uc0\u8259 	}
\i fileURL
\i0  - can be used after fetching a record to read the contents of the asset from the cache\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKQueryOperation\ulnone  - main workhorse for querying a CloudKit database\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(query:)
\i0  - a CKQuery to use (which includes a lot of the configuration not listed here)\
{\listtext	\uc0\u8259 	}
\i desiredKeys
\i0  - the fields you want to get back (so that you don\'92t bring back extra data)\
{\listtext	\uc0\u8259 	}
\i resultsLimit
\i0  - the number of results to return at most\
{\listtext	\uc0\u8259 	}
\i recordFetchedBlock
\i0  - closure to call (which takes a CKRecord) for each record returned\
{\listtext	\uc0\u8259 	}
\i queryCompletionBlock
\i0  - the closure to call (taking a cursor and an error) when all results have been returned (or a page if paging is enabled)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}if paging is enabled, you can use cursor to get the next page (if desired, or not do so) [otherwise cursor is probably unimportant]\
{\listtext	\uc0\u8259 	}check error to see if anything went wrong\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}to actually issue the query, call CKDatabase 
\i add()
\i0 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKQuery\ulnone  - query parameters for a CKQueryOperation to use\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(recordType:predicate:)
\i0  - create an instance for a given string record type in the database and NSPredicate to determine what records get returned\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}predicate can check fields, ID, etc. with == in string and %@ in formatted string\
{\listtext	\uc0\u8259 	}can check a reference field against a CKReference instance with %@ as well\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i sortDescriptors
\i0  - array of NSSortDescriptor describing how to sort the results (before limiting results)\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}for built-in fieldnames they look like this: \'93creationDate\'94\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKReference\ulnone  - a link to a CKRecord (for use as a field in another record)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(recordID:action:)
\i0  - create an instance based on the linked record ID and what to do to this record in case that record is deleted\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}
\i .deleteSelf
\i0  = cascading delete (when the target record is deleted, all records pointing to it are deleted)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKSubscription\ulnone  - a subscription to a database change (read side)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i subscriptionID
\i0  - string unique ID for the subscription\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKQuerySubscription\ulnone  - a subscription to a database change (write side) [not a subclass of CKSubscription]\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}added to database via 
\i save()\
\ls26\ilvl1
\i0 {\listtext	\uc0\u8259 	}
\i init(recordType:predicate:options:)
\i0  - create a new instance\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}record type to subscribe to\
{\listtext	\uc0\u8259 	}predicate is an NSPredicate which can, for instance, say which field should equal which value\
{\listtext	\uc0\u8259 	}options is an enum that says when the notification should be sent (eg. .firesOnRecordCreation)\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i notificationInfo
\i0  - push notification configuration (CKNotificationInfo)\
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls26\ilvl0\cf0 {\listtext	\'95	}\ul CKNotificationInfo\ulnone  - push notification configuration\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}default initializer\
{\listtext	\uc0\u8259 	}
\i alertBody
\i0  - text to use for the alert message\
{\listtext	\uc0\u8259 	}
\i soundName
\i0  - the sound to play (eg. \'93default\'94)\
{\listtext	\uc0\u8259 	}NOTE: to get permission to subscribe to notifications, you don\'92t need to do Info.plist stuff, but you do need to call application.registerForRemoteNotifications() [which will enable them for your app] at some point\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}good place to do this is within 
\i didFinishLaunchingWithOptions
\i0  in AppDelegate after getting permission to show notifications in general\
{\listtext	\uc0\u8259 	}if you do this, CloudKit deals with the subscribing, etc. behind the scenes so that when you get the notification and click on it, it will launch your app\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls26\ilvl1\cf0 {\listtext	\uc0\u8259 	}NOTE: a notification that happens while the app is actually running will be silently ignored unless you do the following:\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls26\ilvl2\cf0 {\listtext	\uc0\u8259 	}conform AppDelegate to UNUserNotificationCenterDelegate\
{\listtext	\uc0\u8259 	}assign UNNotificationCenter delegate member your app delegate\
{\listtext	\uc0\u8259 	}implement 
\i willPresent
\i0  method to call the completion handler\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 \ulnone LocalAuthentication\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 Functionality for authenticating users with passphrase, biometrics, etc.\
See SecretSwift project for usage (in combination with SwiftKeychainWrapper library)\
NOTE: some of this may be settings/system specific but in my testing, it prompts you for unlock every time (not cached) and gives you 3 tries if you get it wrong [this may differ for passcode behavior]\
HINT: if TouchID fails you can have the user enter a password and retrieve it from the keychain (or whatever you use)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls27\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul LAContext\ulnone  - the main workhorse class of LocalAuthentication\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls27\ilvl1\cf0 {\listtext	\uc0\u8259 	}has default initializer\
{\listtext	\uc0\u8259 	}
\i canEvaluatePolicy(_:&error)
\i0  - for testing capabilities of the device\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls27\ilvl2\cf0 {\listtext	\uc0\u8259 	}1st param has enum values like .deviceOwnerAuthenticationWithBiometrics (for testing if biometric authentication allowed)\
{\listtext	\uc0\u8259 	}returns boolean and also sets error by reference\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls27\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i evaluatePolicty(_:localizedReason:closure:)
\i0  - obtains authentication\
\pard\tx1660\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2160\fi-2160\pardirnatural\partightenfactor0
\ls27\ilvl2\cf0 {\listtext	\uc0\u8259 	}1st param has enum value like .deviceOwnerAuthenticationWithBiometrics (for getting a biometric unlock)\
{\listtext	\uc0\u8259 	}localizedReason = text to show user for why you need it\
{\listtext	\uc0\u8259 	}closure = code to call when authentication is done (since this call is non-blocking)\
\pard\tx2380\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li2880\fi-2880\pardirnatural\partightenfactor0
\ls27\ilvl3\cf0 {\listtext	\uc0\u8259 	}parameters received in closure are success (boolean) and authenticationError\
{\listtext	\uc0\u8259 	}NOTE: if you\'92re going to update the UI, you will have to dispatch back to the main thread\
{\listtext	\uc0\u8259 	}success is false on Cancel or bad fingerprint (after retries)\ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 SwiftyJSON\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 3rd party library for handling Json on GitHub (not a Cocoa Touch Library) [several ways to install - the tutorial uses dragging the .swift file into your project directly, which is one of the official ways]
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls28\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul JSON\ulnone  - struct that represents json data\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls28\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i init(data:)
\i0  - can be initialized with a Data object (from Foundation) containing json data\
{\listtext	\uc0\u8259 	}can parse by chain of dictionaries (eg. json[\'93a\'94][\'93b\'94] to get member b of member a)\
{\listtext	\uc0\u8259 	}to get value of a member, use the .intValue or .stringValue properties\
{\listtext	\uc0\u8259 	}missing values are treated safely here without you having to check each one (missing string will be empty string and stuff like that)\
{\listtext	\uc0\u8259 	}to iterate an array member with \'93for\'94 use .arrayValue property (empty array if not there)\
{\listtext	\uc0\u8259 	}to parse json object as dictionary, pull out the values manually and make your own (at least that\'92s what the tutorial does)\
{\listtext	\uc0\u8259 	}conversions are done automatically (eg. if you read an int field with the .stringValue property)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 SwiftKeychainWrapper\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 3rd party library for wrapping iOS keychain (secure storage) so that it acts like UserDefaults [distributed via KeychainWrapper.Swift and KeychainOptions.Swift]((official release not ready for Swift 3 at time of tutorial - but a fork from Jordan Kay is))\
Without this library, working with the keychain is very hard and complicated\
NOTE: the data will not persist between sessions unless you give your project the \'93Keychain Sharing\'94 capability in Capabilities tab for project target (Project settings menu in Xcode)\
SEE: SecretSwift project for how to handle secure data (in terms of focus changes, encryption, etc.)
\fs36 \
\pard\tx220\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li720\fi-720\pardirnatural\partightenfactor0
\ls29\ilvl0\cf0 {\listtext	\'95	}
\fs28 \ul KeychainWrapper\ulnone  - equivalent of UserDefaults for accessing data in the keychain\
\pard\tx940\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li1440\fi-1440\pardirnatural\partightenfactor0
\ls29\ilvl1\cf0 {\listtext	\uc0\u8259 	}
\i standardKeychainAccess()
\i0  - gets the main/default keychain instance\
{\listtext	\uc0\u8259 	}
\i string(forKey:)
\i0  - obtain optional string value (in case not present) for given string keyname from the secure keychain\
{\listtext	\uc0\u8259 	}
\i setString(_:forKey:)
\i0  - set string (by given keyname) in secure keychain (name should match string(forKey:)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs36 \cf0 TODO: Learn more VFL (eg. percentages, aspect ratio, margin vs. absolute, etc.)\
TODO: Get better at Auto Layout in IB (via Attributes Inspector, popups, outline, etc.)\
TODO: Understand the correlation of features between IB and VFL for Auto Layout\
TODO: How to do offsets/ratios/etc with anchors\
TODO: How to add spacing between things using anchors, minimum space, etc.\
TODO: be able to translate anything from anchors method into VFL and IB methods\
TODO: clarify and document .alert vs. .actionSheet in UIAlertController\
TODO: how to prevent user from entering text into text edit while still using it for display\
TODO: create a URL\
TODO: What are the defaults for SKSpriteNodes and physics bodies?\
TODO: can you run multiple actions for the same node simultaneously or is it a synchronous list?  (what happens if one repeats forever?)\
TODO: learn about the node tree nature of SKNode (will sprites be bound to each other\'92s movements?)\
TODO: learn about particle effects (smoke, explosions, etc.)\
TODO: learn about multiple frame sprites, how to better interleave the explosions with the sprites, etc.\
TODO: find out about autolayout, adaptive layouts, etc. for SpriteKit apps\
TODO: learn about arc4random and arc4random_uniform (and what Darwin is and different ways of doing random numbers in Swift)\
TODO: find out if names/paths are case sensitive (eg. with assets)\
TODO: what happens if you create an object over another object when using dynamic physics on both or either?\
TODO: is there a quick way to get nodes in their z-order instead of added order?\
TODO: clarify interchangeability of NSString and other objective-C types with Swift counterparts\
TODO: move SKSpriteNode stuff that belongs in SKNode\
TODO: are SKAction instances one-shot deals or are they reusable?\
TODO: is action order for SKNode guaranteed if not done with sequence()?\
TODO: will nodes(at:) method of SKNode return nodes that are hidden, cropped, etc?\
TODO: figure out how to smoothly wind down particle effects and remove them (apparently they don\'92t go away after all??? and how to set lifetime?)\
TODO: does the rest of UIKit (eg. tap detection) see a UIKit view as being in its transformed position when you animate it\
TODO: can you arbitrarily use 
\i transform
\i0  on UIView when not animating (I assume yes) and does that affect other properties?  AutoLayout?\
TODO: if you set the alpha of a control to 0, and it\'92s something like a button, is it unclickable?\
TODO: figure out how to scale a UIImage down the right way (eg. if want to make it a little smaller for iphone)\
TODO: look into more advanced regex functionality like enumerateMatches (may be useful for super long strings where you might bail)\
TODO: look at NSRegularExpression document for other stuff not documented like specifying flags inside the regex (some if it goes in regex doc)\
TODO: learn more about UIBezierPath\
TODO: how to make custom notification center buttons show up in more scenarios\
TODO: learn CADisplayLink (presented as alternative to Timer) (is there a more accurate Timer also?) [in Knolwedge Base part of book]\
TODO: GPS functionality (in CoreLocation?)\
TODO: What is AnyClass?\
TODO: make sure reassigning non-optional array declared is covered in notes somewhere\
TODO: learn the Date type (inc. members like Date.distantFuture)\
TODO: can you assume object A or B in SpriteKit collision if you only set one of the contact bits\
TODO: look into CICheckerboardGenerator\
TODO: how to allow the user to reorder rows and activate/deactivate editing mode\
TODO: how to add custom buttons in editing mode\
TODO: figure out weirdness with volume levels with AVAudioPlayer\
TODO: figure out why Project 33 push notifications don\'92t work\
TODO: learn from DemoBots tutorial\
TODO: find out what happens if you leave or don\'92t leave the memory warning method you get by default in a view controller\
TODO: learn more of GameplayKit\
TODO: find out if durations less than refresh rate get synced to refresh rate in SKAction methods (I don\'92t think so because it looks erratic)\
}