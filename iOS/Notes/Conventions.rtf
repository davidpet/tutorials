{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;}
{\*\expandedcolortbl;\csgray\c100000;\csgenericrgb\c0\c45600\c0;}
\margl1440\margr1440\vieww28600\viewh15100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \ulc0 Documentation\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 //use documentation comments to clarify the purpose in your mind and help other developers\
//Document the complexity of any computed property that is not O(1)\

\f0\b\fs36 \cf0 \ul \ulc0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Grammar\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 //method calls (method name and external parameter names) should read as grammatical phrases when possible\
//Don\'92t do that in initializers or factory methods though\
//This doesn\'92t always have to happen - just a tool to make the call clearer\
//Besides that, most things should read as nouns/noun phrases except functions that have side effects (which should be verbs/verb phrases), boolean isXXX, and protocols that describe capabilities instead of objects (eg. Printable)\

\f0\b\fs36 \cf0 \ul \ulc0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Classes
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //class names start with capital and methods/properties start with lowercase\
//use structs unless you need to use classes (structs = safety, classes = flexibility)\
//Mark things as final whenever you can - it provides a compiler optimization boost and reduces complexity\
//Begin factory methods with \'91make\'92\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Structs
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //computed properties tend to be more common in Apple code and less common in user code\
//Use structs instead of classes to eliminate relationships that might cause things like race conditions\
//Use classes when need inheritence or shared object\
//Mark classes as constants and/or final when possible\
//Also use structs if you want convenience of automatically generated init\
//Prefer structs to classes when possible\
//Use property observers for updating UI controls based on a change in a value (eg. score)\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Collections
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //Use set instead of array when either uniqueness or lookup speed matters\
//Use NSCountedSet instead of dictionary of item to count when speed matters\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Enums
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //enum types start with capitalize while enum values inside the type start with lowercase\
//use 'unknown' as the unset type for an enum\
//Might want to provide a none or default value for enums, but do not do that for bitfields because [] means that\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Errors
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //Order of preference should be try, try?, try!\
//Use guards to test positive conditions instead of negative (while avoiding deeply nested loops) and to be explicit\
//guard typically all on one line (including the \{\})\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Extensions
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //Common naming scheme for extensions in source files: Type+Modifier.Swift (eg. String+RandomLetter.Swift)\
//Also will commonly see something like String+Additions.Swift because it's timing consuming and ugly to make a file for each thing you add\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Functional Programming
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //Use trailing closures when possible (defining and calling)\
//Consider whether you should capture self (or any other variable) as unowned to avoid cycles\
//Only use autoclosures when really need them since they can make your code complicated\
//Consider using a private method to compute a transformation that a lazy property will call\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Strings
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //Use 'characters.count' for your own code and 'utf16.count' for Apple library code\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 \ul \CocoaLigature1 Variables
\f1\b0\fs22 \cf2 \ulnone \CocoaLigature0 \
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0
\cf2 //Start with Capital: data types\
//Start with lowercase: variables and constants\
//Use Constants when possible\
//Use Type Inference (instead of explicit types) when possible\
//put : next to variable name (eg. var name: String)\
//use implicitly unwrapped optionals (!) for members that will start out empty and get set on load (when you don't want to be forced to have a constructor or to use ? all the time)\
}